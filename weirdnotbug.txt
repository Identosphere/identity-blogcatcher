Warning: the running version of Bundler (2.1.2) is older than the version that created the lockfile (2.2.3). We suggest you to upgrade to the version that created the lockfile by running `gem install bundler:2.2.3`.
pluto/1.3.4 on Ruby 2.7.0 (2019-12-25) [x86_64-linux]
[debug]    executing command build
[debug] hello from build command
[info] db settings:
[info] {:adapter=>"sqlite3", :database=>"./try.db"}
[debug] ar configurations (before):
[debug] #<ActiveRecord::DatabaseConfigurations:0x000055dd6266d718 @configurations=[]>
DEPRECATION WARNING: to_h is deprecated and will be removed from Rails 6.2 (You can use `ActiveRecord::Base.configurations.configs_for(env_name: 'env', name: 'primary').configuration_hash` to get the configuration hashes.) (called from load at /home/lovelace/.rvm/gems/ruby-2.7.0/bin/pluto:23)
[debug] ar configurations (after):
[debug] #<ActiveRecord::DatabaseConfigurations:0x000055dd6374ea28
 @configurations=
  [#<ActiveRecord::DatabaseConfigurations::HashConfig:0x000055dd6374e820
    @configuration_hash={:adapter=>"sqlite3", :database=>"./try.db"},
    @env_name="pluto",
    @name="primary">]>
D, [2022-07-10T03:07:42.225997 #3248059] DEBUG -- :    (1.1ms)  SELECT sqlite_version(*)
-- create_table(:logs)
D, [2022-07-10T03:07:42.246628 #3248059] DEBUG -- :    (18.2ms)  CREATE TABLE "logs" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "msg" varchar NOT NULL, "level" varchar NOT NULL, "app" varchar, "tag" varchar, "pid" integer, "tid" integer(8), "ts" varchar, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)
   -> 0.0193s
D, [2022-07-10T03:07:42.263210 #3248059] DEBUG -- :    (13.5ms)  CREATE TABLE "ar_internal_metadata" ("key" varchar NOT NULL PRIMARY KEY, "value" varchar, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)
D, [2022-07-10T03:07:42.281869 #3248059] DEBUG -- :   ActiveRecord::InternalMetadata Load (1.6ms)  SELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? LIMIT ?  [["key", "environment"], ["LIMIT", 1]]
D, [2022-07-10T03:07:42.289545 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:42.290353 #3248059] DEBUG -- :   ActiveRecord::InternalMetadata Create (0.4ms)  INSERT INTO "ar_internal_metadata" ("key", "value", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["key", "environment"], ["value", "default_env"], ["created_at", "2022-07-10 07:07:42.288376"], ["updated_at", "2022-07-10 07:07:42.288376"]]
D, [2022-07-10T03:07:42.302054 #3248059] DEBUG -- :   TRANSACTION (11.2ms)  commit transaction
-- create_table(:props)
D, [2022-07-10T03:07:42.319770 #3248059] DEBUG -- :    (15.0ms)  CREATE TABLE "props" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "key" varchar NOT NULL, "value" varchar NOT NULL, "kind" varchar, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)
   -> 0.0164s
D, [2022-07-10T03:07:42.322796 #3248059] DEBUG -- :   ActiveRecord::InternalMetadata Load (0.4ms)  SELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? LIMIT ?  [["key", "environment"], ["LIMIT", 1]]
-- create_table(:activities)
D, [2022-07-10T03:07:42.339398 #3248059] DEBUG -- :    (13.8ms)  CREATE TABLE "activities" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "user_id" integer, "trackable_id" integer, "trackable_type" varchar, "action" varchar, "text" text, "tmpl" varchar, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)
   -> 0.0148s
D, [2022-07-10T03:07:42.341156 #3248059] DEBUG -- :   ActiveRecord::InternalMetadata Load (0.3ms)  SELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? LIMIT ?  [["key", "environment"], ["LIMIT", 1]]
-- create_table(:sites)
D, [2022-07-10T03:07:42.362080 #3248059] DEBUG -- :    (18.8ms)  CREATE TABLE "sites" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "key" varchar NOT NULL, "title" varchar NOT NULL, "author" varchar, "email" varchar, "updated" datetime, "includes" varchar, "excludes" varchar, "url" varchar, "fetched" datetime, "http_code" integer, "http_etag" varchar, "http_last_modified" varchar, "http_server" varchar, "md5" varchar, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)
   -> 0.0199s
-- create_table(:subscriptions)
D, [2022-07-10T03:07:42.378934 #3248059] DEBUG -- :    (15.5ms)  CREATE TABLE "subscriptions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "site_id" integer NOT NULL, "feed_id" integer NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)
D, [2022-07-10T03:07:42.392928 #3248059] DEBUG -- :    (13.6ms)  CREATE INDEX "index_subscriptions_on_site_id" ON "subscriptions" ("site_id")
D, [2022-07-10T03:07:42.408280 #3248059] DEBUG -- :    (15.0ms)  CREATE INDEX "index_subscriptions_on_feed_id" ON "subscriptions" ("feed_id")
   -> 0.0460s
-- create_table(:feeds)
D, [2022-07-10T03:07:42.425278 #3248059] DEBUG -- :    (15.7ms)  CREATE TABLE "feeds" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "key" varchar NOT NULL, "encoding" varchar DEFAULT 'utf8' NOT NULL, "format" varchar, "title" varchar, "url" varchar, "feed_url" varchar, "auto_title" varchar, "auto_url" varchar, "auto_feed_url" varchar, "summary" text, "generator" varchar, "updated" datetime, "published" datetime, "author" varchar, "email" varchar, "avatar" varchar, "location" varchar, "github" varchar, "rubygems" varchar, "twitter" varchar, "meetup" varchar, "includes" varchar, "excludes" varchar, "items_last_updated" datetime, "fetched" datetime, "http_code" integer, "http_etag" varchar, "http_last_modified" varchar, "http_server" varchar, "md5" varchar, "body" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)
   -> 0.0170s
-- create_table(:items)
D, [2022-07-10T03:07:42.467394 #3248059] DEBUG -- :    (40.8ms)  CREATE TABLE "items" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "guid" varchar, "url" varchar, "title" text, "summary" text, "content" text, "updated" datetime, "published" datetime, "feed_id" integer NOT NULL, "fetched" datetime, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)
D, [2022-07-10T03:07:42.480868 #3248059] DEBUG -- :    (13.1ms)  CREATE INDEX "index_items_on_feed_id" ON "items" ("feed_id")
   -> 0.0555s
D, [2022-07-10T03:07:42.484040 #3248059] DEBUG -- :   ActiveRecord::InternalMetadata Load (0.3ms)  SELECT "ar_internal_metadata".* FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? LIMIT ?  [["key", "environment"], ["LIMIT", 1]]
D, [2022-07-10T03:07:42.495281 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:42.496203 #3248059] DEBUG -- :   ConfDb::Model::Prop Create (0.5ms)  INSERT INTO "props" ("key", "value", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["key", "db.schema.planet.version"], ["value", "1.6.2"], ["created_at", "2022-07-10 07:07:42.494346"], ["updated_at", "2022-07-10 07:07:42.494346"]]
D, [2022-07-10T03:07:42.507688 #3248059] DEBUG -- :   TRANSACTION (11.0ms)  commit transaction
dump >try<:
{"title"=>"\"Try this at home\"",
 "dustycloud"=>
  {"title"=>"DustyCloud Brainstorms",
   "link"=>"http://dustycloud.org",
   "feed"=>"http://dustycloud.org/blog/index.xml"}}
D, [2022-07-10T03:07:42.515594 #3248059] DEBUG -- :   Pluto::Model::Site Load (0.4ms)  SELECT "sites".* FROM "sites" WHERE "sites"."key" = ? LIMIT ?  [["key", "try"], ["LIMIT", 1]]
[debug] site_attribs: {:title=>"\"Try this at home\"", :url=>nil, :author=>nil, :email=>nil, :updated=>2022-07-10 03:07:42.53771497 -0400}
D, [2022-07-10T03:07:42.562476 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:42.563687 #3248059] DEBUG -- :   ActivityDb::Models::Activity Create (0.8ms)  INSERT INTO "activities" ("text", "created_at", "updated_at") VALUES (?, ?, ?)  [["text", "new site >try< - "], ["created_at", "2022-07-10 07:07:42.561706"], ["updated_at", "2022-07-10 07:07:42.561706"]]
D, [2022-07-10T03:07:42.579580 #3248059] DEBUG -- :   TRANSACTION (15.4ms)  commit transaction
D, [2022-07-10T03:07:42.581392 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:42.582206 #3248059] DEBUG -- :   Pluto::Model::Site Create (0.4ms)  INSERT INTO "sites" ("key", "title", "updated", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?)  [["key", "try"], ["title", "\"Try this at home\""], ["updated", "2022-07-10 07:07:42.537714"], ["created_at", "2022-07-10 07:07:42.580451"], ["updated_at", "2022-07-10 07:07:42.580451"]]
D, [2022-07-10T03:07:42.598120 #3248059] DEBUG -- :   TRANSACTION (15.3ms)  commit transaction
D, [2022-07-10T03:07:42.615654 #3248059] DEBUG -- :    (0.2ms)  SELECT COUNT(*) FROM "subscriptions" WHERE "subscriptions"."site_id" = ?  [["site_id", 1]]
[debug] before site.subscriptions.delete_all - count: 0
D, [2022-07-10T03:07:42.617146 #3248059] DEBUG -- :   Pluto::Model::Subscription Load (0.3ms)  SELECT "subscriptions".* FROM "subscriptions" WHERE "subscriptions"."site_id" = ?  [["site_id", 1]]
D, [2022-07-10T03:07:42.617991 #3248059] DEBUG -- :    (0.2ms)  SELECT COUNT(*) FROM "subscriptions" WHERE "subscriptions"."site_id" = ?  [["site_id", 1]]
[debug] after site.subscriptions.delete_all - count: 0
[info] Updating feed subscription >dustycloud< - >http://dustycloud.org/blog/index.xml<...
D, [2022-07-10T03:07:42.622260 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.3ms)  SELECT "feeds".* FROM "feeds" WHERE "feeds"."key" = ? LIMIT ?  [["key", "dustycloud"], ["LIMIT", 1]]
D, [2022-07-10T03:07:42.657509 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:42.658180 #3248059] DEBUG -- :   ActivityDb::Models::Activity Create (0.4ms)  INSERT INTO "activities" ("text", "created_at", "updated_at") VALUES (?, ?, ?)  [["text", "new feed >dustycloud< - DustyCloud Brainstorms"], ["created_at", "2022-07-10 07:07:42.656847"], ["updated_at", "2022-07-10 07:07:42.656847"]]
D, [2022-07-10T03:07:42.670158 #3248059] DEBUG -- :   TRANSACTION (11.6ms)  commit transaction
D, [2022-07-10T03:07:42.672740 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:42.673949 #3248059] DEBUG -- :   Pluto::Model::Feed Create (0.7ms)  INSERT INTO "feeds" ("key", "title", "url", "feed_url", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?)  [["key", "dustycloud"], ["title", "DustyCloud Brainstorms"], ["url", "http://dustycloud.org"], ["feed_url", "http://dustycloud.org/blog/index.xml"], ["created_at", "2022-07-10 07:07:42.671241"], ["updated_at", "2022-07-10 07:07:42.671241"]]
D, [2022-07-10T03:07:42.686224 #3248059] DEBUG -- :   TRANSACTION (11.2ms)  commit transaction
D, [2022-07-10T03:07:42.699873 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:42.700783 #3248059] DEBUG -- :   Pluto::Model::Subscription Create (0.5ms)  INSERT INTO "subscriptions" ("site_id", "feed_id", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["site_id", 1], ["feed_id", 1], ["created_at", "2022-07-10 07:07:42.698983"], ["updated_at", "2022-07-10 07:07:42.698983"]]
D, [2022-07-10T03:07:42.712156 #3248059] DEBUG -- :   TRANSACTION (10.9ms)  commit transaction
D, [2022-07-10T03:07:42.713669 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:42.714490 #3248059] DEBUG -- :   ActivityDb::Models::Activity Create (0.4ms)  INSERT INTO "activities" ("text", "created_at", "updated_at") VALUES (?, ?, ?)  [["text", "update feeds >try<"], ["created_at", "2022-07-10 07:07:42.712904"], ["updated_at", "2022-07-10 07:07:42.712904"]]
D, [2022-07-10T03:07:42.725360 #3248059] DEBUG -- :   TRANSACTION (10.5ms)  commit transaction
D, [2022-07-10T03:07:42.726401 #3248059] DEBUG -- :   Pluto::Model::Site Load (0.2ms)  SELECT "sites".* FROM "sites" WHERE "sites"."key" = ? LIMIT ?  [["key", "try"], ["LIMIT", 1]]
D, [2022-07-10T03:07:42.739074 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.5ms)  SELECT "feeds".* FROM "feeds" INNER JOIN "subscriptions" ON "feeds"."id" = "subscriptions"."feed_id" WHERE "subscriptions"."site_id" = ?  [["site_id", 1]]
[debug] fetch - get(_response) src: http://dustycloud.org/blog/index.xml
[debug] using direct net http access; no proxy configured
[debug] GET /blog/index.xml uri=http://dustycloud.org/blog/index.xml, redirect_limit=5
[info] found cache entry for >http://dustycloud.org/blog/index.xml<
[debug] 200 OK
[debug]   content_type: text/xml, content_length: 
[info] OK - fetching feed 'dustycloud' - HTTP status 200 OK
[debug] feed_xml.encoding.name (before): ASCII-8BIT
[debug] feed_xml.encoding.name (after): UTF-8
[debug] http header - server: nginx/1.10.3 - String
[debug] http header - etag: W/"62ca03d6-3351a" - String
[debug] http header - last-modified: Sat, 09 Jul 2022 22:40:22 GMT - String
D, [2022-07-10T03:07:43.066310 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:43.072998 #3248059] DEBUG -- :   Pluto::Model::Feed Update (1.0ms)  UPDATE "feeds" SET "fetched" = ?, "http_code" = ?, "http_etag" = ?, "http_last_modified" = ?, "http_server" = ?, "md5" = ?, "body" = ?, "updated_at" = ? WHERE "feeds"."id" = ?  [["fetched", "2022-07-10 07:07:43.060469"], ["http_code", 200], ["http_etag", "W/\"62ca03d6-3351a\""], ["http_last_modified", "Sat, 09 Jul 2022 22:40:22 GMT"], ["http_server", "nginx/1.10.3"], ["md5", "4bbe77dc281179ed1fe78d2dcd28e823"], ["body", "<?xml version=\"1.0\" encoding=\"utf-8\"?><feed xmlns=\"http://www.w3.org/2005/Atom\"><title>Dustycloud Brainstorms</title><id>https://dustycloud.org//blog/index.xml</id><subtitle>Recent Posts</subtitle><updated>2022-07-09T18:40:19Z</updated><link href=\"dustycloud.org//blog/index.xml\" rel=\"self\" /><link href=\"dustycloud.org\" /><entry><title>Guile Steel: a proposal for a systems lisp</title><id>https://dustycloud.org/blog/guile-steel-proposal/</id><author><name>Christine Lemmer-Webber</name><email>cwebber@dustycloud.org</email></author><updated>2022-07-09T11:26:00Z</updated><link href=\"https://dustycloud.org/blog/guile-steel-proposal/\" rel=\"alternate\" /><summary type=\"html\">&lt;p&gt;Before we get into this kind of stream-of-consciousness outline, I'd\nlike to note that very topically to this, over at the\n&lt;a href=&quot;https://spritely.institute/&quot;&gt;Spritely Institute&lt;/a&gt; (where I'm CTO, did\nI mention on here yet that I'm the CTO of a nonprofit to improve\nnetworked communication on the internet on this blog?  because I don't\nthink I did) we\n&lt;a href=&quot;https://spritely.institute/news/the-spritely-institute-publishes-a-scheme-primer.html&quot;&gt;published&lt;/a&gt;\na &lt;a href=&quot;https://spritely.institute/static/papers/scheme-primer.html&quot;&gt;Scheme Primer&lt;/a&gt;,\nand the feedback to it has been just lovely.\nThis post isn't a Spritely Institute thing (at least, not yet, though\nif its ideas manifested it could be possible we might use some of the\ntech), but since it's about Scheme, I thought I'd mention that.&lt;/p&gt;&lt;p&gt;This blogpost outlines something I've had kicking around in my head\nfor a while: the desire for a modern &amp;quot;systems lisp&amp;quot;, you know, kind of\nlike Rust, except hopefully much better than Rust, and in Lisp.  (And,\nif it turns out to be for not other reason, it might simply be better\nby &lt;em&gt;being&lt;/em&gt; written in a Lisp.)  But let's be clear: I haven't written\nanything, this blogpost is a ramble, it's just kind of a set of\n&lt;em&gt;feelings&lt;/em&gt; about what I'd like, what I think is possible.&lt;/p&gt;&lt;p&gt;Let's open by saying that there's no real definition of what a\n&amp;quot;systems language&amp;quot; is... but more or less what people mean is,\n&amp;quot;something like C&amp;quot;.  In other words, what people nowadays consider a\nlow-level language, even though C used to be considered a high level\nlanguage.  And what people &lt;em&gt;really&lt;/em&gt; mean is: it's fast, it's\nstatically typed, and it's really for the bit-fiddling types of speed\ndemons out there.&lt;/p&gt;&lt;p&gt;Actually, let's put down a few asides for a moment.  People have\nconflated two &lt;em&gt;different&lt;/em&gt; benefits fo &amp;quot;statically typed&amp;quot; languages\nbecause they've mostly been seen together:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Static typing for ahead-of-time more-correct programs&lt;/li&gt;&lt;li&gt;Static typing for faster or leaner programs (which subdivides in\nterms of memory and CPU benefits, more or less)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In the recent &lt;a href=&quot;https://fossandcrafts.org&quot;&gt;FOSS &amp;amp; Crafts&lt;/a&gt; episode\n&lt;a href=&quot;https://fossandcrafts.org/episodes/47-what-is-lisp.html&quot;&gt;What is Lisp?&lt;/a&gt;\nwe talk a bit about how the assumptions that dynamically typed\nlanguages are &amp;quot;slow&amp;quot; is really due to lack of hardware support,\nand that lisp machines actually had hardware support directly (tagged\nmemory architecture and hardware garbage collection) and even wrote\nlow-level parts of their systems like the &amp;quot;graphics drivers&amp;quot; directly\nin lisp, and it was plenty fast, and that it would even be possible to\nhave co-processors on which dynamic code (not just lisp) ran at\n&amp;quot;native speed&amp;quot; (this is what the\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Symbolics#Ivory_and_Open_Genera&quot;&gt;MacIvory&lt;/a&gt;\ndid), but this is all somewhat of an aside because that's not the\nworld we live in.  So as much as I,\nChristine, would love to have tagged architecture (co-)processors, they\nprobably won't happen, except there's some\n&lt;a href=&quot;https://lowrisc.org/docs/tagged-memory-v0.1/&quot;&gt;RISC-V tagged&lt;/a&gt;\n&lt;a href=&quot;https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_10-3_Weiser_paper.pdf&quot;&gt;architecture&lt;/a&gt;\nthings but I don't think they've gotten very far and they seem mostly\nmotivated by a security model that doesn't make any sense to me.\nBut I'd love to be wrong on this!  I would like tagged RISC-V to\nsucceed!  But still, there's the problem of memory management, and\nI don't think anyone's been working on a hardware garbage collector\nor if that would really be a better thing anyway.&lt;/p&gt;&lt;p&gt;The fact is, there's been a reinforcing effect over the last several\ndecades since the death of the lisp machine: CPUs are optimized for C,\nand C is optimized for CPUs, and both of them try to optimize for each\nother.  So &amp;quot;systems programming&amp;quot; really means &amp;quot;something like C&amp;quot;\nbecause that's what our CPUs like because that's what our languages\nlike and these are pretty much re-inforcing.&lt;/p&gt;&lt;p&gt;And besides, C is basically the lingua franca of programming\nlanguages, right?  If you want to make something widely portable,\nyou target the C ABI, because pretty much all programming languages\nhave some sort of C FFI toolkit thing or just make C bindings, and\neveryone is happy.  Except, oh wait,\n&lt;a href=&quot;https://gankra.github.io/blah/c-isnt-a-language/#c-doesnt-actually-have-an-abi&quot;&gt;C doesn't actually have an ABI&lt;/a&gt;!\nWell, okay, I guess not, but it doesn't matter because the C ABI\ntriples, that's what the world works with.&lt;/p&gt;&lt;p&gt;Well also, you gotta target the web, right?  And actually the story\nthere is a bit nicer because &lt;a href=&quot;https://webassembly.org/&quot;&gt;WebAssembly&lt;/a&gt;\nis actually kinda awesome, and the hope and dream is that all\nprogramming languages in some way or another target WebAssembly, and\nthen &amp;quot;you gotta write your thing in Javascript because it's the\nlanguage of the web!!!&amp;quot; is no longer a thing I have to hear anymore.\n(Yes, all my friends who work on Javascript, I appreciate you for\nmaking it the one programming language which has &lt;em&gt;mostly&lt;/em&gt; gotten\nbetter over time... hopefully it\n&lt;a href=&quot;https://scribe.rip/the-tragedy-of-the-common-lisp-why-large-languages-explode-4e83096239b9&quot;&gt;stays that way&lt;/a&gt;,\nand best of luck.)\nBut the point is, any interesting programming language these days\nshould be targeting Webassembly, and hopefully not just via\n&lt;a href=&quot;https://emscripten.org/&quot;&gt;Emscripten&lt;/a&gt;, but hopefully via actually\ntargeting Webassembly directly.&lt;/p&gt;&lt;p&gt;So okay, we have at least two targets for our &amp;quot;system language&amp;quot;: C, or\nsomething that is C-compatible, and Webassembly.\nAnd static type analysis in terms of preventing errors, that's also a\nuseful thing, I won't deny it.  (I think the division of &amp;quot;statically\ntyped&amp;quot; and &amp;quot;dynamically typed&amp;quot; languages is probably more of a false\none than we tend to think, but that's a future blogpost, to be\nwritten.)  And these days, it's &lt;em&gt;also&lt;/em&gt; how you get speed while also\nbeing maximally bit-twiddly fast, because that's how our machines\n(including the abstract one in Webassembly) are designed.  So okay,\ngrumbling about conflating two things aside, let's run with that.&lt;/p&gt;&lt;p&gt;So anyway, I promised to write about this &amp;quot;Guile Steel&amp;quot; thing I've\nbeen musing about, and we've gotten this far in the article, and I\nhaven't yet.  So, this is, more than a concrete proposal, a call to\narms to implement just such a systems language for Guile.  I might\nmake a prototype at some point, but you, dear reader, are free to take\nthe idea of &amp;quot;Guile Steel&amp;quot; and run with it.  In fact, please do.&lt;/p&gt;&lt;p&gt;So anyway.  First, about the name.  It's probably pretty obvious based\non the name that I'm suggesting this be a language for\n&lt;a href=&quot;https://www.gnu.org/software/guile/&quot;&gt;Guile&lt;/a&gt; Scheme.  And &amp;quot;Guile&amp;quot; as a\nname itself is both a continuation of the kind of playfully\nmischevious names in the Scheme family and its predecessors, but also\na pun on co-founder of the Scheme language, Guy L. Steele.  So &amp;quot;Guile\nSteele&amp;quot; kinda brings that pun home, and &amp;quot;Steel&amp;quot; sounds low-level,\nclose to the metal.&lt;/p&gt;&lt;p&gt;But also, Guile has a lovely\n&lt;a href=&quot;https://www.gnu.org/software/guile/manual/html_node/Compiler-Tower.html&quot;&gt;compiler tower&lt;/a&gt;.\nIt would be nice to put some more lovely things on it!  Why not a\nsystems language?&lt;/p&gt;&lt;p&gt;There's some precedent here.  The lovely\n&lt;a href=&quot;https://www.s48.org/&quot;&gt;Scheme 48&lt;/a&gt;'s lowest levels of code\n(including its garbage collector) are written in an interesting\nlanguage called\n&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.3.4031&quot;&gt;PreScheme&lt;/a&gt;\n(&lt;a href=&quot;https://thintz.com/resources/prescheme-documentation&quot;&gt;more on PreScheme&lt;/a&gt;),\nwhich is something that's kind of like Scheme, but not really.\nIt doesn't do automatic garbage collection itself, and I think\nRust has shown that this area could be improved for a more modern\nPreScheme system.\nBut you &lt;em&gt;can&lt;/em&gt; hack on it at the REPL, and then it can compile to\nC, and it also has an implementation on Common Lisp, so you can\nbootstrap it a few different ways.\nPreScheme uses a\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system&quot;&gt;Hindley-Milner type system&lt;/a&gt;;\nI suspect we can do even better with\n&lt;a href=&quot;https://www.youtube.com/watch?v=jI8gA68OXLM&quot;&gt;a propagator approach&lt;/a&gt;\nbut that's untested.\nAnyway, starting by porting PreScheme from Scheme48 to Guile directly\nwould be a good way to get going.&lt;/p&gt;&lt;p&gt;Guile also has some pretty good reasons to want something like this.\nFor one thing, if you're a\n&lt;a href=&quot;https://www.gnu.org/software/guile/&quot;&gt;Guile&lt;/a&gt;\nperson, then by gosh you're probably\n&lt;a href=&quot;https://guix.gnu.org/&quot;&gt;a Guix person&lt;/a&gt;.\nAnd Rust, it's real popular these days, and for good reasons, we're\nall better of with less memory vulnerabilities in our lives, but you\nknow... it's kind of a pain, packaging wise, I hear?  Actually\nI've never tried packaging anything in Rust but\n&lt;a href=&quot;https://www.youtube.com/watch?v=ehghWzMXUts&quot;&gt;Efraim certainly has&lt;/a&gt;\nand when your presentation starts with the slide &amp;quot;Packaging Rust\ncrates in GNU Guix: How hard could it possibly be?&amp;quot; I guess the\nanswer is going to be that it's a bit of a headache.  So maybe\nit's not the end of the world, but I think it might be nice if on\nthat ground we had our own alternative, but that's just a minor thing.&lt;/p&gt;&lt;p&gt;And I don't think there's anything wrong with Rust, but I'd love to\nsee... can we do better?  I feel like it could be hackable,\naccessible, and it also could, probably, be a lot of fun?  That's a\ngood reason, I know I'd like something like this myself, I'd like to\nplay with it, I'd like to be able to use it.&lt;/p&gt;&lt;p&gt;But maybe also... well, let's not beat around the bush, a whole lot\nof Guile is written in C, and our dear wonderful\n&lt;a href=&quot;https://wingolog.org/&quot;&gt;Andy Wingo&lt;/a&gt; has done a lot of lovely things\nto make us less dependent on C, some\n&lt;a href=&quot;https://wingolog.org/archives/2016/01/11/the-half-strap-self-hosting-and-guile&quot;&gt;half-straps&lt;/a&gt;\nand some\n&lt;a href=&quot;https://wingolog.org/archives/2020/06/03/a-baseline-compiler-for-guile&quot;&gt;baseline compilers&lt;/a&gt;\nand just rewriting a lot of stuff in Scheme and so on and so forth but\nit would be nice if we had something we could officially rally around\nas &amp;quot;hey this is the thing we're going to start rewriting things in&amp;quot;,\nbecause you know, C really is kind of a hard world to trust, and I'd\nlike the programming language environment I rely on to not be so\nheavily built on it.&lt;/p&gt;&lt;p&gt;And at this point in the article, I have to say that\n&lt;a href=&quot;https://fedi.xerz.one/users/xerz&quot;&gt;Xerz!&lt;/a&gt; pointed out that there\nis a thing called &lt;a href=&quot;https://github.com/carp-lang/Carp&quot;&gt;Carp&lt;/a&gt; which\nis indeed a lisp that compiles to C and you know what, I'm pretty\nembarassed for having not paid attention to it... I certainly saw\nit linked at one point but didn't pay enough attention, and... maybe\nit needs a closer look.  Heck, it's written in Haskell, which is a\npretty cool choice.&lt;/p&gt;&lt;p&gt;But hey, the Guile community still deserves a thing of its own, right?\nWhat do we have that &lt;a href=&quot;https://www.gnu.org/software/guile/manual/html_node/Compiler-Tower.html&quot;&gt;compiler tower&lt;/a&gt;\nfor if we're not going to add some cool things to it?\nAnd... gosh, I'd really like to get Guile in the browser, and there\nare some various paths, and\n&lt;a href=&quot;https://archive.fosdem.org/2021/schedule/event/webassembly/&quot;&gt;Wingo gave a fun presentation on compiling to Webassembly&lt;/a&gt;\nlast year, but wouldn't it be nice if just our whole language stack\nwas written in something designed to compile to either something\nC-like or... something?&lt;/p&gt;&lt;p&gt;I might do some weekend fiddling towards this direction, but sadly\nthis can't be my main project.  As a call to arms, maybe it inspires\nsomeone to take it up as theirs though.  I will say that if you work\non it, I promise to spend some time using whatever you build and\ntrying it out and sending patches.  So that's it, that's my\nstream-of-consciousness post on Guile Steel: currently an idea...\nmaybe eventually a reality?&lt;/p&gt;</summary></entry><entry><title>Site converted to Haunt</title><id>https://dustycloud.org/blog/site-converted-to-haunt/</id><author><name>Christine Lemmer-Webber</name><email>cwebber@dustycloud.org</email></author><updated>2022-07-05T13:20:00Z</updated><link href=\"https://dustycloud.org/blog/site-converted-to-haunt/\" rel=\"alternate\" /><summary type=\"html\">&lt;p&gt;Lo and behold, I've converted the last of the sites I've been managing\nfor ages to &lt;a href=&quot;https://dthompson.us/projects/haunt.html&quot;&gt;Haunt&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Haunt isn't well known.  Apparently I am responsible for, er, many of\nthe sites listed on\n&lt;a href=&quot;https://awesome.haunt.page/&quot;&gt;awesome.haunt.page&lt;/a&gt;.\nBut you know what?\nI've been making website things for a long time, and Haunt is honestly\nthe only static site generator I've worked with (and I've worked with\nquite a few) that's actually truly customizable and programmable and\npleasant to work with.\nAnd hackable!&lt;/p&gt;&lt;p&gt;This site has seen quite a few iterations... some custom code when I\n&lt;a href=&quot;/blog/new-site-new-blog/&quot;&gt;first launched it&lt;/a&gt;\nsome time ago, &lt;a href=&quot;/blog/switched-blog-to-zine/&quot;&gt;then I used Zine&lt;/a&gt;,\n&lt;a href=&quot;/blog/switched-blog-to-pyblosxom/&quot;&gt;then I used PyBlosxom&lt;/a&gt;,\nand for quite a few years\n&lt;a href=&quot;/blog/switched-blog-to-pyblosxom/&quot;&gt;everything was running on Pelican&lt;/a&gt;.\nBut I never liked hacking on any of those... I always kind of\nbegrudgingly opened up the codebase and regretted having to change\nanything.\nBut Haunt?\nHaunt's a dream, it's all there and ready for you, and I've even\ngotten some patches upstream.\n(Actually I owe Dave a few more, heh.)&lt;/p&gt;&lt;p&gt;Everything is Scheme in Haunt, which means, for instance, that this\npage needed an &lt;a href=&quot;/archive/&quot;&gt;archive page&lt;/a&gt; for ages that actually worked\nand was sensible and I just didn't ever feel like doing it.  But in\nHaunt, it's just delicious &lt;a href=&quot;https://www.gnu.org/software/guile/&quot;&gt;Guile&lt;/a&gt;\nflavored &lt;a href=&quot;https://en.wikipedia.org/wiki/Scheme_(programming_language)&quot;&gt;Scheme&lt;/a&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-special&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;archive-tmpl&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;site&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;\n  &lt;span class=&quot;syntax-comment&quot;&gt;;; build a map of (year -&amp;gt; posts)\n&lt;/span&gt;  &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-special&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;posts-by-year&lt;/span&gt;\n    &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-special&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;ht&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;make-hash-table&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;syntax-comment&quot;&gt;; hash table we're building up\n&lt;/span&gt;      &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-special&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;syntax-comment&quot;&gt;; iterate over all posts\n&lt;/span&gt;          &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;null?&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;ht&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;syntax-comment&quot;&gt;; until we're out of posts\n&lt;/span&gt;        &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-special&quot;&gt;let*&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;                   &lt;span class=&quot;syntax-comment&quot;&gt;; put this post in year bucket\n&lt;/span&gt;               &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;date-year&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;post-date&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;\n               &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;year-entries&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;hash-ref&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;ht&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;\n          &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;hash-set!&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;ht&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;year-entries&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;\n  &lt;span class=&quot;syntax-comment&quot;&gt;;; sort all the years\n&lt;/span&gt;  &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-special&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;sorted-years&lt;/span&gt;\n    &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;hash-map-&amp;gt;list&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-special&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;posts-by-year&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;\n  &lt;span class=&quot;syntax-comment&quot;&gt;;; rendering for one year\n&lt;/span&gt;  &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-special&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;year-content&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;syntax-symbol&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;syntax-string&quot;&gt;&amp;quot;margin-bottom: 10px;&amp;quot;&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;\n          &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;h3&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;,year&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;\n          &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;,@&lt;/span&gt;&lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-special&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;post-content&lt;/span&gt;\n                     &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;posts/reverse-chronological&lt;/span&gt;\n                      &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;hash-ref&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;posts-by-year&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;\n  &lt;span class=&quot;syntax-comment&quot;&gt;;; rendering for one post within a year\n&lt;/span&gt;  &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-special&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;post-content&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;syntax-symbol&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;li&lt;/span&gt;\n      &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;post-uri&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;site&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;\n         &lt;span class=&quot;syntax-symbol&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;post-ref&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;'title&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;\n  &lt;span class=&quot;syntax-comment&quot;&gt;;; the whole page\n&lt;/span&gt;  &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-special&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;content&lt;/span&gt;\n    &lt;span class=&quot;syntax-symbol&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;syntax-string&quot;&gt;&amp;quot;entry&amp;quot;&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;\n          &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;syntax-string&quot;&gt;&amp;quot;Blog archive (by year)&amp;quot;&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;\n          &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;,@&lt;/span&gt;&lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-special&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;year-content&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;sorted-years&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;\n  &lt;span class=&quot;syntax-comment&quot;&gt;;; render within base template\n&lt;/span&gt;  &lt;span class=&quot;syntax-open&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;syntax-symbol&quot;&gt;base-tmpl&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;site&lt;/span&gt; &lt;span class=&quot;syntax-symbol&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;syntax-close&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikisource.org/wiki/Lambda_Papers&quot;&gt;Lambda, the ultimate&lt;/a&gt;\nstatic site generator!&lt;/p&gt;&lt;p&gt;At any rate, I expect some things are broken, to be fixed, etc.\n&lt;a href=&quot;/contact/&quot;&gt;Let me know&lt;/a&gt; if you see 'em.\nHeck, you can &lt;a href=&quot;https://gitlab.com/dustyweb/dustycloud.org&quot;&gt;browse the site contents&lt;/a&gt;\nshould you be so curious!&lt;/p&gt;&lt;p&gt;But is there really anything more boring than a meta &amp;quot;updated my\nwebsite code&amp;quot; post like this?\nAnyway, in the meanwhile I've corrected straggling instances of my\ndeadname which were sitting around.\nThe last post I made was me\n&lt;a href=&quot;https://dustycloud.org/blog/nonbinary-trans-femme/&quot;&gt;coming out as trans&lt;/a&gt;,\nand... well a lot has changed since then.\nSo I guess I've got some more things to write.\nAnd also this whole theme... well I like some of it but I threw it\ntogether when I was but a wee web developer, back before CSS was actually\nnice to write, etc.\nSo maybe I need to overhaul the look and feel too.\nAnd I always meant to put in that project directory, and ooh maybe an\nart gallery, and so on and so on...&lt;/p&gt;&lt;p&gt;But hey, I like updating my website again!  So maybe I actually will!&lt;/p&gt;</summary></entry><entry><title>Hello, I'm Chris Lemmer-Webber, and I'm nonbinary trans-femme</title><id>https://dustycloud.org/blog/nonbinary-trans-femme/</id><author><name>Christine Lemmer-Webber</name><email>cwebber@dustycloud.org</email></author><updated>2021-06-28T18:13:00Z</updated><link href=\"https://dustycloud.org/blog/nonbinary-trans-femme/\" rel=\"alternate\" /><summary type=\"html\">&lt;p&gt;&lt;img src=&quot;https://dustycloud.org/gfx/goodies/chris-and-morgan-2021-06-27.jpg&quot; alt=&quot;A picture of Chris and Morgan together&quot; /&gt;&lt;/p&gt;&lt;p&gt;I recently came out as nonbinary trans-femme.\nThat's a picture of me on the left, with my spouse Morgan Lemmer-Webber\non the right.&lt;/p&gt;&lt;p&gt;In a sense, not much has changed, and so much has changed.\nI've dropped the &amp;quot;-topher&amp;quot; from my name, and given the common tendency\nto apply gender to pronouns in English, please either use nonbinary\npronouns or feminine pronouns to apply to me.\nOther changes are happening as I wander through this space, from\nappearance to other things.\n(Probably the biggest change is finally achieving something resembling\nself-acceptance, however.)&lt;/p&gt;&lt;p&gt;If you want to know more,\n&lt;a href=&quot;https://fossandcrafts.org/episodes/30-gender-sexuality-personal-perspective.html&quot;&gt;Morgan and I did a podcast episode&lt;/a&gt;\nwhich explains more from my present standing, and also explains Morgan's\nexperiences with being demisexual, which not many people know about!\n(Morgan has been incredible through this whole process, by the way.)&lt;/p&gt;&lt;p&gt;But things may change further.\nMaybe a year from now those changes may be even more drastic, or maybe\nnot.\nWe'll see.\nI am wandering, and I don't know where I will land, but it won't be\nback to where I was.&lt;/p&gt;&lt;p&gt;At any rate, I've spent much of my life not being able to stand myself\nfor how I look and feel.\nFor most of my life, I have not been able to look at myself in a mirror\nfor more than a second or two due to the revulsion I felt at the person\nI saw staring back at me.\nThe last few weeks have been a shift change for me in that regard...\nit's a very new experience to feel so happy with myself.&lt;/p&gt;&lt;p&gt;I'm only at the beginning of this journey.\nI'd appreciate your support... people have been incredibly kind to me\nby and large so far but like everyone who goes through a process like this,\nit's very hard in those experiences where people aren't.\nThank you to everyone who has been there for me so far.&lt;/p&gt;</summary></entry><entry><title>Beyond the shouting match: what is a blockchain, really?</title><id>https://dustycloud.org/blog/what-is-a-blockchain-really/</id><author><name>Christine Lemmer-Webber</name><email>cwebber@dustycloud.org</email></author><updated>2021-04-24T15:30:00Z</updated><link href=\"https://dustycloud.org/blog/what-is-a-blockchain-really/\" rel=\"alternate\" /><summary type=\"html\">&lt;p&gt;If there's one thing that's true about the word &amp;quot;blockchain&amp;quot;, it's that\nthese days people have strong opinions about it.\nOpen your social media feed and you'll see people either heaping praises\non blockchains, calling them the saviors of humanity, or condemning them\nas destroying and burning down the planet and making the rich richer\nand the poor poorer and generally all the other kinds of fights that\npeople like to have about capitalism (also a quasi-vague word\noccupying some hotly contested mental real estate).&lt;/p&gt;&lt;p&gt;There are good reasons to hold opinions about various aspects of what\nare called &amp;quot;blockchains&amp;quot;, and I too have some pretty strong opinions\nI'll be getting into in a followup article.\nThe followup article will be about &amp;quot;cryptocurrencies&amp;quot;, which many people\nalso seem to think of as synonymous with &amp;quot;blockchains&amp;quot;, but this isn't\nparticularly true either, but we'll deal with that one then.&lt;/p&gt;&lt;p&gt;In the meanwhile, some of the fighting on the internet is kind of\nconfusing, but even more importantly, kind of confused.\nSome of it might be what I call &amp;quot;sportsballing&amp;quot;: for whatever reason,\nfor or against blockchains has become part of your local sportsball\nteam, and we've all got to be team players or we're gonna let the local\nteam down already, right?\nAnd the thing about sportsballing is that it's kind of arbitrary and\nit kind of isn't, because you might pick a sportsball team because you\ndid all your research or you might have picked it because that just\nhappens to be the team in your area or the team your friends like, but\ngod almighty once you've picked your sportsball team let's actually not\ntalk against it because that might be giving in to the other side.\nBut sportsballing kind of &lt;em&gt;isn't&lt;/em&gt; arbitrary either because it tends to\nbe initially connected to real communities of real human beings and\nthere's usually a deeper cultural web than appears at surface level,\nso when you're poking at it, it appears surface-level shallow but\nthere are some real intricacies beneath the surface.  (But anyway, go\nsportsball team.)&lt;/p&gt;&lt;p&gt;But I digress.\nThere are important issues to discuss, yet people aren't really\ndiscussing them, partly because &lt;em&gt;people mean different things&lt;/em&gt;.\n&amp;quot;Blockchain&amp;quot; is a strange term that encompasses a wide idea space,\nand what people consider or assume essential to it vary just as\nwidely, and thus when two people are arguing they might not even be\narguing about the same thing.\nSo let's get to unpacking.&lt;/p&gt;&lt;h2&gt;&amp;quot;Blockchain&amp;quot; as handwaving towards decentralized networks in general&lt;/h2&gt;&lt;p&gt;Years ago I was at a conference about decentralized networked\ntechnology, and I was having a conversation with someone I had just met.\nThis person was telling me how excited they were about\nblockchains... finally we have decentralized network designs, and so\nthis seems really useful for society!&lt;/p&gt;&lt;p&gt;I paused for a moment and said yes, blockchains can be useful for some\nthings, though they tend to have significant costs or at least\ntradeoffs.  It's good that we also have other decentralized network\ntechnology; for example, the &lt;a href=&quot;https://www.w3.org/TR/activitypub/&quot;&gt;ActivityPub&lt;/a&gt;\nstandard I was involved in had no blockchains but did rely on the\nmuch older &amp;quot;classic actor model.&amp;quot;&lt;/p&gt;&lt;p&gt;&amp;quot;Oh,&amp;quot; the other person said, &amp;quot;I didn't know there were other kinds of\ndecentralized network designs.  I thought that 'blockchain' just meant\n'decentralized network technology'.&amp;quot;&lt;/p&gt;&lt;p&gt;It was as if a light had turned on and illuminated the room for me.  Oh!\nThis explained so many conversations I had been having over the years.\nOf course... for many people, blockchains like Bitcoin were the first\never exposure they had (aside from email, which maybe they never gave\nmuch thought to as being decentralized) of something that involved\na decentralized protocol.  So for many people, &amp;quot;blockchain&amp;quot; and\n&amp;quot;decentralized technology&amp;quot; are synonyms, if not in technical design,\nbut in terms of understanding of a space.&lt;/p&gt;&lt;p&gt;Mark S. Miller, who was standing next to me, smiled and gave a very\ninteresting followup: &amp;quot;There is only one case in which you need a\nblockchain, and that is in a decentralized system which needs to\nconverge on a single order of events, such as a public ledger\ndealing with the\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Double-spending#Decentralized_currencies&quot;&gt;double spending problem&lt;/a&gt;.&amp;quot;&lt;/p&gt;&lt;p&gt;Two revelations at once.  It was a good conversation... it was a good\nstart.\nBut I think there's more.&lt;/p&gt;&lt;h2&gt;Blockchains are the &amp;quot;cloud&amp;quot; of merkle trees&lt;/h2&gt;&lt;p&gt;As time has gone on, the discourse over blockchains has gotten more\ndramatic.  This is partly because what a &amp;quot;blockchain&amp;quot; is hasn't been\nwell defined.&lt;/p&gt;&lt;p&gt;All terminology exists on an ever-present battle between\n&lt;a href=&quot;https://fossandcrafts.org/episodes/23-nerdout-fuzzy-and-crisp.html&quot;&gt;fuzziness and crispness&lt;/a&gt;,\nwith some terms being much clearer than others.\nThe term &amp;quot;boolean&amp;quot; has a fairly crisp definition in computer science,\nbut if I ask you to show me your &amp;quot;stove&amp;quot;, the device you show me today\nmay be incomprehensible to someone's definition a few centuries ago,\nparticularly in that today it might not involve fire.\nTrying to define as in terms of its functionality can also cause\nconfusion: if I asked you to show me a stove, and you showed me a\ncomputer processor or a car engine, I might be fairly confused, even\nthough technically people enjoy showing off that they can cook eggs on\nboth of these devices when they get hot enough.\n(See also: &lt;a href=&quot;https://dustycloud.org/blog/identity-is-a-katamari/&quot;&gt;Identity is a Katamari, language is a Katamari explosion&lt;/a&gt;.)&lt;/p&gt;&lt;p&gt;Still, some terms are fuzzier than others, and as far as terms go,\n&amp;quot;blockchain&amp;quot; is quite fuzzy.\nHence my joke: &amp;quot;Blockchains are the 'cloud' of merkle trees.&amp;quot;&lt;/p&gt;&lt;p&gt;This ~joke tends to get a lot of laughs out of a particular kind of\naudience, and confused looks from others, so let me explain.\nThe one thing everyone seems to agree on is that it's a &amp;quot;chain of\nblocks&amp;quot;, but all that really seems to mean is that it's a\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Merkle_tree&quot;&gt;merkle tree&lt;/a&gt;... really,\njust an immutable datastructure where one node points at the parent node\nwhich points at the parent node all the way up.\nThe joke then is not that this merkle tree runs &lt;em&gt;on&lt;/em&gt; a cloud, but that\n&amp;quot;cloud computing&amp;quot; means approximately nothing: it's marketing speak for\nsome vague handwavey set of &amp;quot;other peoples' computers are doing\ncomputation somewhere, possibly on your behalf sometimes.&amp;quot;\nTherefore, &amp;quot;cloud of merkle trees&amp;quot; refers to the vagueness of the\nsituation.\n(As everyone knows, jokes are funnier when fully explained, so I'll\nturn on my &amp;quot;STUDIO LAUGHTER&amp;quot; sign here.)&lt;/p&gt;&lt;p&gt;So, a blockchain is a chain of blocks, ie a merkle tree, and I mean,\ntechnically speaking, that means that &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; is a\nblockchain (especially if the commits are signed), but when you see\nsomeone arguing on the internet about whether or not blockchains are\n&amp;quot;good&amp;quot; or &amp;quot;bad&amp;quot;, they probably weren't thinking about git, which aside\nfrom having a high barrier of entry in its interface and some concerns\nabout the hashing algorithm used, isn't really something likely to\ndrag you into an internet flamewar.&lt;/p&gt;&lt;h2&gt;&amp;quot;Blockchain&amp;quot; is to &amp;quot;Bitcoin&amp;quot; what &amp;quot;Roguelike&amp;quot; is to &amp;quot;Rogue&amp;quot;&lt;/h2&gt;&lt;p&gt;These days it's common to see people either heaping praises on\nblockchains or criticizing them, and those people tend to be shouting\npast one another.\nI'll save unpacking that for another post.\nIn the meanwhile though, it's worth noting that people might not be\ntalking about the same things.&lt;/p&gt;&lt;p&gt;What isn't in doubt is whether or not\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Bitcoin&quot;&gt;Bitcoin&lt;/a&gt;\nis a blockchain... trying to understand and then explore the problem\nspace around Bitcoin is what &lt;em&gt;created&lt;/em&gt; the term &amp;quot;blockchain&amp;quot;.\nIt's a bit like the video game genre of\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Roguelike&quot;&gt;roguelikes&lt;/a&gt;,\nwhich started with the game\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Rogue_%28video_game%29&quot;&gt;Rogue&lt;/a&gt;,\nparticularly explored and expanded upon in\n&lt;a href=&quot;https://en.wikipedia.org/wiki/NetHack&quot;&gt;NetHack&lt;/a&gt;,\nand then suddenly exploding into the indie game scene as a &amp;quot;genre&amp;quot;\nof its own.\nExcept the genre has become fuzzier and fuzzier as people have explored\nthe surrounding space.\nWhat is essential?\nIs a grid based layout essential?\nIs a &lt;a href=&quot;http://roguetemple.com/z/hyper/&quot;&gt;non-euclidean grid&lt;/a&gt; acceptable?\nDo you have to provide an ascii or ansi art interface so people can play\nin their terminals?\nDare we allow unicode characters?\nWhat if we throw out terminals altogether and just play on a grid\nof 2d pixelart?\nWhat about 3d art?\nWhat about permadeath?\nWhat about the fantasy theme?\nWhat about random level generation?\nWhat are the &lt;a href=&quot;https://en.wikipedia.org/wiki/Roguelike#Key_features&quot;&gt;key features&lt;/a&gt;\nof a roguelike?&lt;/p&gt;&lt;p&gt;Well now we're at the point where I pick up a game like\n&lt;a href=&quot;https://blazingbeaks.fandom.com/wiki/Blazing_Beaks_Wiki&quot;&gt;Blazing Beaks&lt;/a&gt;\nand it calls itself a\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Roguelike#Rogue-lites_and_procedural_death_labyrinths&quot;&gt;&amp;quot;roguelite&amp;quot;&lt;/a&gt;,\nwhich I guess is embracing the point that terminology has gotten extremely\nfuzzy... this game feels more like\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Robotron&quot;&gt;Robotron&lt;/a&gt;\nthan &lt;a href=&quot;https://en.wikipedia.org/wiki/Rogue_%28video_game%29&quot;&gt;Rogue&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;So... if &amp;quot;blockchain&amp;quot; is to Bitcoin what &amp;quot;roguelike&amp;quot; is to Rogue, then\nwhat's essential to a blockchain?\nDoes the blockchain have to be applied to a financial instrument, or\ncan it be used to store updateable information about eg identity?\nIs global consensus required?\nOr what about a &amp;quot;trusted quorum&amp;quot; of nodes, such as in Hyperledger?\nIs &amp;quot;mining&amp;quot; some kind of asset a key part of the system?\nIs proof of work acceptable, or is proof of stake okay?\nWhat about proof of space, proof of space-time, proof of pudding?&lt;/p&gt;&lt;p&gt;On top of all this, some of the terms &lt;em&gt;around&lt;/em&gt; blockchains have been\nabsorbed as if into them.\nFor instance, I think to many people, &amp;quot;smart contract&amp;quot; means something\nlike &amp;quot;code which runs on a blockchain&amp;quot; thanks to Ethereum's major\nadoption of the term, but the\n&lt;a href=&quot;http://www.erights.org/&quot;&gt;E programming language&lt;/a&gt;\ndescribed &amp;quot;smart contracts&amp;quot; as the &amp;quot;likely killer app of distributed\ncapabilities&amp;quot; all the way\n&lt;a href=&quot;https://web.archive.org/web/19990125095122/http://www.erights.org/&quot;&gt;back in 1999&lt;/a&gt;,\nand was\n&lt;a href=&quot;https://web.archive.org/web/19990209105758/http://www.best.com/%7Eszabo/smart_contracts_idea.html&quot;&gt;borrowing the term&lt;/a&gt;\nfrom\n&lt;a href=&quot;https://web.archive.org/web/19990128165611/http://www.best.com/%7Eszabo/&quot;&gt;Nick Szabo&lt;/a&gt;,\nbut really the same folks working on E had described many of those same\nideas in the &lt;a href=&quot;https://agoric.com/papers/&quot;&gt;Agoric Papers&lt;/a&gt; back in 1988.\nBitcoin wasn't even a thing at all until at least 2008, so depending on\nhow you look at it, &amp;quot;smart contracts&amp;quot; precede &amp;quot;blockchains&amp;quot; by one or\ntwo decades.\nSo &amp;quot;blockchain&amp;quot; has somehow even rolled up terms &lt;em&gt;outside&lt;/em&gt; of its space\nas if within it.\n(By the way, I don't think anyone has given a good and crisp definition\nfor &amp;quot;smart contract&amp;quot; either despite some of these people trying to give\nme one, so let me give you one that I think is better and embraces its\nfuzziness: &amp;quot;Smart contracts allow you to do the kinds of things you\nmight do with legal contracts, but relying on networked computation\ninstead of a traditional state-based legal system.&amp;quot;\nIt's too bad more people also don't know about the huge role that Mark\nMiller's &amp;quot;split contracts&amp;quot; idea plays into this space because that's\nwhat makes the idea finally makes sense... but that's a conversation\nfor another time.)\n(&lt;strong&gt;EDIT:&lt;/strong&gt; Well, after I wrote this, Kate Sills lent me her\ndefinition, which I think is the best one: &amp;quot;Smart contracts are\ncredible commitments using technology, and outside a state-provided\nlegal system.&amp;quot;  I like it!)&lt;/p&gt;&lt;p&gt;So anyway, the point of this whole section is to say that kind of like\nroguelike, people are thinking of different things as essential to\nblockchains.\nEveryone roughly agrees on the jumping-off point of ideas but since\nnot everyone agrees from there, it's good to check in when we're having\nthe conversation.\nWait, you do/don't like this game because it's a roguelike?\nMaybe we should check in on what features you mean.\nLikewise for blockchains.\nBecause if you're blaming blockchains for burning down the planet, more\nthan likely you're not condemning signed git repositories (or at least,\nif you're condemning them, you're probably doing so about it from an\naspect that isn't the fundamental datastructure... probably).&lt;/p&gt;&lt;p&gt;This is an &amp;quot;easier said than done&amp;quot; kind of thing though, because of\ncourse, I'm kind of getting into some &amp;quot;in the weeds&amp;quot; level of details\nhere... but it's the &amp;quot;in the weeds&amp;quot; where all the substance of the\ndisagreements really are.\nThe person you are talking with might not actually even know or consider\nthe same aspects to be essential that you consider essential though,\nso taking some time to ask which things we mean can help us lead to a\nmore productive conversation sooner.&lt;/p&gt;&lt;h2&gt;&amp;quot;Blockchain&amp;quot; as an identity signal&lt;/h2&gt;&lt;p&gt;First, a digression.\nOne thing that's kind of curious about the term\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtue_signaling&quot;&gt;&amp;quot;virtue signal&amp;quot;&lt;/a&gt;\nis that in general it tends to be used as a kind of virtue signal.\nIt's kind of like the word\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Hipster_%28contemporary_subculture%29&quot;&gt;hipster&lt;/a&gt;\nin the previous decade, which weirdly seemed to be obsessively and\npejoratively used by people who resembled hipsters than anyone else.\nHence I used to make a joke called &amp;quot;hipster recursion&amp;quot;, which is that\nsince hipsters seem more obsessesed with pejorative labeling of\nhipsterism than anyone else, there's no way to call someone a &amp;quot;hipster&amp;quot;\nwithout yourself taking on hipster-like traits, and so inevitably\neven this conversation is N-levels deep into hipster recursion\nfor some numerical value of N.&lt;/p&gt;&lt;p&gt;&amp;quot;Virtue signaling&amp;quot; appears similar, but &lt;em&gt;even more&lt;/em&gt; ironically so\n(which is a pretty amazing feat given how much of hipsterdom seems to\nsurround a kind of inauthentic irony).\nWhen I hear someone say &amp;quot;virtue signaling&amp;quot; with a kind of sneer, part\nof that seems to be acknowledging that other people are sending signals\nmerely to impress others that they are some kind of the same group but\nit seems as if it's being raised as in a\nyou-know-and-I-know-that-by-me-acknowledging-this-I'm-above-virtue-signaling\nkind of way.\nExcept that by any possible definition of virtue signaling, the above\nappears to be a kind of virtue signaling, so now we're into virtue\nsignaling recursion.&lt;/p&gt;&lt;p&gt;Well, one way to claw our way out of the rabbithole of all this is to\ndrop the pejorative aspect of it and just acknowledge that signaling\nis something that everyone does.\nHence me saying &amp;quot;identity signaling&amp;quot; here.\nYou can't really escape identity signaling, or even sportsballing, but\nyou can acknowledge that it's a thing that we all do, and there's a\nreason for it: people only have so much time to find out information\nabout each other, so they're searching for clues that they might align\nand that, if they introduce you to their peer group, that you might\nalign with them as well, without access to a god-like view of the\nuniverse where they know &lt;em&gt;exactly&lt;/em&gt; what you think and &lt;em&gt;exactly&lt;/em&gt; what\nkinds of things you've done and &lt;em&gt;exactly&lt;/em&gt; what way you'll behave in\nthe future or whether or not you share the same values.\n(After all, what else is\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtue_ethics&quot;&gt;virtue ethics&lt;/a&gt;\nbut an ethical framework that takes this in its most condensed form as\nits foundation?)\nBut it's true that at its worst, this seems to result in shallow, quick,\njudgmental behavior, usually based on stereotypes of the other side...\nwhich can be unfortunate or unfair to whomever is being talked about.\nBut also on the flip side, people also do identity signal to each other\nbecause they &lt;em&gt;want&lt;/em&gt; to create a sense of community and bonding.\nThat's what a lot of culture &lt;em&gt;is&lt;/em&gt;.\nIt's worth acknowledging then that this occurs, recognizing its use and\nlimitations, without pretending that we are above it.&lt;/p&gt;&lt;p&gt;So wow, that's quite a major digression, so now let's get back to\n&amp;quot;identity signaling&amp;quot;.\nThere is definitely a &lt;em&gt;lot&lt;/em&gt; of identity signaling that tends to happen\naround the word &amp;quot;blockchain&amp;quot;, for or against.\nAround the critiques of the worst of this, I tend to agree: I find much\nof the machismo hyper-white-male-privilege that surrounds some of the\n&amp;quot;blockchain&amp;quot; space uncomfortable or cringey.&lt;/p&gt;&lt;p&gt;But I also have some close friends who are not male and/or are people\nof color and those ones tend to actually &lt;em&gt;suffer the worst of it&lt;/em&gt; from\nthese communities internally, but also seem to find things of value in\nthem, but particularly seem to feel squeezed externally when the field\nis &lt;em&gt;reduced to&lt;/em&gt; these kinds of (anti?-)patterns.\nThere's something sad about that, where I see on the one hand friends\ncomplaining about blockchain from the outside on behalf of people who\non the inside seem to be both struggling internally but then kind of\ncrushed by being lumped into the same identified problems externally.\nThis is hardly a unique problem but it's worth highlighting for a moment\nI think.&lt;/p&gt;&lt;p&gt;But anyway, I've taken a bunch of time on this, more than I care to,\nmaybe because (irony again?) I feel that too much of public conversation\nis also hyperfocusing on this aspect... whether there's a subculture\naround blockchain, whether or not that subculture is good or bad, etc.\nThere's a lot worthwhile in unpacking this discourse-wise, but some of\nthe criticisms of blockchains as a &lt;em&gt;technology&lt;/em&gt; (to the extent it even\nis coherently one) seem to get lumped up into all of this.\nIt's good to provide thoughtful cultural critique, particularly one\nwhich encourages healthy social change.\nAnd we can't escape identity signaling.\nBut as someone who's trying to figure out what properties of networked\nsystems we do and don't want, I feel like I'm trying to navigate the\nmachine and for whatever reason, my foot keeps getting caught in the\ngears here.\nWell, maybe that itself is pointing to some architectural mistakes,\nbut socially architectural ones.\nBut it's useful to also be able to draw boundaries around it so that\nwe know where this part of the conversation begins and ends.&lt;/p&gt;&lt;h2&gt;&amp;quot;Blockchain&amp;quot; as &amp;quot;decentralized centralization&amp;quot; (or &amp;quot;decentralized convergence&amp;quot;)&lt;/h2&gt;&lt;p&gt;One of the weird things about people having the idea of &amp;quot;blockchains&amp;quot; as\nbeing synonymous with &amp;quot;decentralization&amp;quot; is that it's kind of both very\ntrue and very &lt;em&gt;untrue&lt;/em&gt;, depending on what abstraction layer you're\nlooking at.&lt;/p&gt;&lt;p&gt;For a moment, I'm going to frame this in harsh terms: blockchains are\ndecentralized centralization.&lt;/p&gt;&lt;p&gt;What?\nHow dare I!\nYou'll notice that this section is in harsh contrast to the\n&amp;quot;blockchain as handwaving towards decentralized networks in general&amp;quot;\nsection... well, I &lt;em&gt;am&lt;/em&gt; acknowledging the decentralized aspect of it,\nbut the weird thing about a blockchain is that it's a decentralized\nset of nodes &lt;em&gt;converging on&lt;/em&gt; (creating a centrality of!) a single\nabstract machine.&lt;/p&gt;&lt;p&gt;Contrast with\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Actor_model#Fundamental_concepts&quot;&gt;classic actor model&lt;/a&gt;\nsystems like\n&lt;a href=&quot;http://erights.org/elib/distrib/captp/index.html&quot;&gt;CapTP&lt;/a&gt;\nin &lt;a href=&quot;https://spritelyproject.org/#goblins&quot;&gt;Spritely Goblins&lt;/a&gt;,\nor as less good examples\n(because they aren't quite as behavior-oriented as they are\ncorrespondence-oriented, usually)\n&lt;a href=&quot;https://www.w3.org/TR/activitypub/&quot;&gt;ActivityPub&lt;/a&gt;\nor\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol&quot;&gt;SMTP&lt;/a&gt;\n(ie, email).\nAll of these systems involve decentralized computation and collaboration\nstemming from sending messages to actors (aka &amp;quot;distributed objects&amp;quot;).\nOf CapTP this is especially clear and extreme: computations happen in\nparallel across many collaborating machines (and even better, many\ncollaborating objects on many collaborating machines), and the behavior\nof other machines and their objects is often even opaque to you.\n(CapTP survives this in a beautiful way, being able to do well on\nanonymous, peer to peer, &amp;quot;mutually suspicious&amp;quot; networks.\nBut maybe read my\n&lt;a href=&quot;https://spritelyproject.org/news/what-is-captp.html&quot;&gt;rambling thoughts about CapTP&lt;/a&gt;\nelsewhere.)&lt;/p&gt;&lt;p&gt;While to some degree there are some very\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Homomorphic_encryption&quot;&gt;clever&lt;/a&gt;\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Zero-knowledge_proof&quot;&gt;tricks&lt;/a&gt;\nin the world of cryptography where you may be able to get back some of\nthe opacity, this tends to be very expensive, adding an expensive\ncomponent to the already inescapable additional expenses of a\nblockchain.\nA multi-party blockchain with some kind of consensus\n&lt;em&gt;will always, by definition&lt;/em&gt; be slower than a single machine operating\nalone.&lt;/p&gt;&lt;p&gt;If you are irritated by this framing: good.\nIt's probably good to be irritated by it at least once, if you can\nrecognize the portion of truth in it.\nBut maybe that needs some unpacking to get there.\nIt might be better to say &amp;quot;blockchains are decentralized &lt;em&gt;convergence&lt;/em&gt;&amp;quot;,\nbut I have some other phrasing that might be helpful.&lt;/p&gt;&lt;h2&gt;&amp;quot;Blockchain&amp;quot; as &amp;quot;a single machine that many people run&amp;quot;&lt;/h2&gt;&lt;p&gt;There's value in having a single abstract machine that many people run.\nThe most famous source of value is in the &amp;quot;double spending problem&amp;quot;.\nHow do we make sure that when someone has money, they don't spend that\nmoney twice?&lt;/p&gt;&lt;p&gt;Traditional accounting solves this with a linear, sequential ledger,\nand it turns out that the right solution boils down to the same thing\nin computers.\nEmphasis on &lt;em&gt;sequential&lt;/em&gt;: in order to make sure money balances out\nright, we really do have to be able to order things.&lt;/p&gt;&lt;p&gt;Here's the thing though: the double spending problem was in a sense\nsolved in terms of single-computers a long time ago in the object\ncapability security community.\n&lt;a href=&quot;http://erights.org/elib/capability/ode/index.html&quot;&gt;Capability-based Financial Instruments&lt;/a&gt;\nwas written about a &lt;em&gt;decade&lt;/em&gt; before blockchains even existed and\nshowed off how to make a &amp;quot;mint&amp;quot; (kind of like a fiat-currency bank)\nthat can be implemented in about 25 lines of code in the right\narchitecture (I've &lt;a href=&quot;https://gitlab.com/spritely/goblins/-/blob/4f664218c87fa96432a04d0a107618ec36ab9310/goblins/actor-lib/simple-mint.rkt#L13&quot;&gt;ported it to Goblins&lt;/a&gt;,\nfor instance) and yet has both distributed accounts and is robust\nagainst corruption on errors.&lt;/p&gt;&lt;p&gt;However, this seems to be running on a &amp;quot;single-computer based\nmachine&amp;quot;, and again operates like a fiat currency.\nAnyone can create their own fiat currency like this, and they are\ncheap, cheap, cheap (and fast!) to make.\nBut it does rely on sequentiality to some degree to operate correctly\n(avoiding a class of attacks called &amp;quot;re-entrancy attacks&amp;quot;).&lt;/p&gt;&lt;p&gt;But this &amp;quot;single-computer based machine&amp;quot; might bother you for a couple\nreasons:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;We might be afraid the server might crash and service will be\ninterrupted, or worse yet, we will no longer be able to access our\naccounts.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Or, even if we could trade these on an open market, and maybe\ndiversify our portfolio, maybe we don't want to &lt;em&gt;have to&lt;/em&gt; trust a\nsingle operator or even some appointed team of operators... maybe we\nhave a lot of money in one of these systems and we want to be sure\nthat it won't suddenly vanish due to corruption.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Well, if our code operates deterministically, then what if from the\nsame initial conditions (or saved snapshot of the system) we replay\nall input messages to the machine?\nFunctional programmers know: we'll end up with the same result.&lt;/p&gt;&lt;p&gt;So okay, we might want to be sure this doesn't accidentally get\ncorrupted, maybe for backup reasons.\nSo maybe we submit the input messages to &lt;em&gt;two&lt;/em&gt; computers, and then\nif one crashes, we just continue on with the second one until the\nother comes up, and then we can restore the first one from the\nprogress the second machine made while the first one was down.&lt;/p&gt;&lt;p&gt;Oh hey, this is already technically a blockchain.\nExcept our trust model is that we implicitly trust &lt;em&gt;both&lt;/em&gt; machines.&lt;/p&gt;&lt;p&gt;Hm.\nMaybe we're now worried that we might have top-down government\npressure to coerce some behavior on one of our nodes, or maybe we're\nworried that someone at a local datacenter is going to flip some bits\nto make themselves rich.\nSo we actually want to spread this abstract machine out over three\ncountries.\nSo okay, we do that, and now we set a rule agreeing on what all the\nseries of input messages are... if two of three nodes agree, that's\ngood enough.\nOh hey look, we've just invented the &amp;quot;small-quorum-style&amp;quot;\nblockchain/ledger!&lt;/p&gt;&lt;p&gt;(And yes, you can wire up &lt;a href=&quot;https://docs.racket-lang.org/goblins/index.html&quot;&gt;Goblins&lt;/a&gt;\nto do just this; a hint as to how is seen in the\n&lt;a href=&quot;https://dustycloud.org/blog/goblins-time-travel-micropreview/&quot;&gt;Terminal Phase time travel demo&lt;/a&gt;.\nActually, let's come back to that later.)&lt;/p&gt;&lt;p&gt;Well, okay.\nThis is probably good enough for a private financial asset, but what\nabout if we want to make something more... global?\nWhere nobody is in charge!&lt;/p&gt;&lt;p&gt;Well, we could do that too.\nHere's what we do.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;First, we need to prevent a &amp;quot;swarming attack&amp;quot; (okay, this is\ngenerally called a &amp;quot;sybil attack&amp;quot; in the literature, but for a\nmultitude of reasons I won't get into, I don't like that term).\nIf a global set of peers are running this single abstract machine,\nwe need to make sure there aren't invocations filling up the system\nwith garbage, since we all basically have to keep that information\naround.\nWell... this is exactly where those proof-of-foo systems come in\nthe first time; in fact Proof of Work's origin is in something\ncalled &lt;a href=&quot;https://en.wikipedia.org/wiki/Hashcash&quot;&gt;Hashcash&lt;/a&gt; which\nwas designed to add &amp;quot;friction&amp;quot; to disincentivize spam for email-like\nsystems.\nIf we don't do something friction-oriented in this category, our\nledger is going to be too easily filled with garbage too fast.\nWe also need to agree on what the &lt;em&gt;order&lt;/em&gt; of messages is, so we\ncan use this mechanism in conjuction with a consensus algorithm.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;When are new units of currency issued?\nWell, in our original mint example, the person who set up the mint\nwas the one given the authority to make new money out of thin air\n(and they can hand out attenuated versions of that authority to\nothers as they see fit).\nBut what if instead of handing this capability out to &lt;em&gt;individuals&lt;/em&gt;\nwe handed it out to &lt;em&gt;anyone who can meet an abstract requirement&lt;/em&gt;?\nFor instance, in &lt;a href=&quot;https://w3c-ccg.github.io/zcap-ld/&quot;&gt;zcap-ld&lt;/a&gt;\nan invoker can be any kind of entity which is specified with\n&lt;a href=&quot;https://w3c-ccg.github.io/ld-proofs/&quot;&gt;linked data proofs&lt;/a&gt;,\nmeaning those entities can be something other than a single key...\nfor instance, what if we delegated to an abstract invoker that was\nspecified as being &amp;quot;whoever can solve the state of the machine's current\nproof-of-work puzzle&amp;quot;?\nOh my gosh!\nWe just took our 25-line mint and extended it for mining-style\nblockchains.\nAnd the fundamental design still applies!&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;With these two adjustments, we've created a &amp;quot;public blockchain&amp;quot; akin\nto bitcoin.\nAnd we don't need to use proof-of-work for either technically...\nwe could swap in different mechanisms of friction / qualification.&lt;/p&gt;&lt;p&gt;If the set of inputs are stored as a merkle tree, then all of the\nsystem types we just looked at are technically blockchains:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;A second machine as failover in a trusted environment&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Three semi-trusted machines with small-scale private consensus&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A public blockchain without global trust, with swarming-attack\nresistance and an interesting abstract capability accessible\nto anyone who can meet the abstract requirement (in this case,\nto issue some new currency).&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The difference for choosing any of the above is really a question of:\n&amp;quot;what is your trust/failover requirements?&amp;quot;&lt;/p&gt;&lt;h2&gt;Blockchains as time travel plus convergent inputs&lt;/h2&gt;&lt;p&gt;If this doesn't sound believable to you, that you could create\nsomething like a &amp;quot;public blockchain&amp;quot; on top of something like Goblins\nso easily, consider how we might extend\n&lt;a href=&quot;https://dustycloud.org/blog/goblins-time-travel-micropreview/&quot;&gt;time travel in Terminal Phase&lt;/a&gt;\nto add multiplayer.\nAs a reminder, here's an image:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://dustycloud.org/gfx/goodies/terminal-phase-goblins-time-travel.gif&quot; alt=&quot;Time travel in Spritely Goblins shown through Terminal Phase&quot; /&gt;&lt;/p&gt;&lt;p&gt;Now, a secret thing about Terminal Phase is that the gameplay is\ndeterministic (the random starfield in the background is not, but the\ngameplay is) and runs on a fixed frame-rate.\nThis means that given the same set of keyboard inputs, the game will\nalways play the same, every time.&lt;/p&gt;&lt;p&gt;Okay, well let's say we wanted to hand some way for someone to replay\nour last game.\nChess games can be fully replayed with a very\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Algebraic_notation_(chess)&quot;&gt;condensed syntax&lt;/a&gt;,\nmeaning that merely handing someone a short list of codes they can\n&lt;em&gt;precisely&lt;/em&gt; replay the same game, every time, deterministically.&lt;/p&gt;&lt;p&gt;Well okay, as a first attempt at thinking this through, what if for\nsome game of Terminal Phase I played we wrote down each keystroke I\nentered on my keyboard, on every tick of the game?\nTerminal Phase runs at 30 ticks per second.\nSo okay, if you replay these, each one at 30 ticks per second, then\nyeah, you'd end up with the same gameplay every time.&lt;/p&gt;&lt;p&gt;It would be simple enough for me to encode these as a linked list\n(cons, cons, cons!) and hand them to you.\nYou could descend all the way to the root of the list and start\nplaying them back up (ie, play the list in reverse order) and you'd\nget the same result as I did.\nI could even stream new events to you by giving you new items to\ntack onto the front of the list, and you could &amp;quot;watch&amp;quot; a game I\nwas playing live.&lt;/p&gt;&lt;p&gt;So now imagine that you and I want to play Terminal Phase together\nnow, over the network.\nLet's imagine there are two ships, and for simplicity, we're playing\ncooperatively.\n(The same ideas\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Lockstep_protocol&quot;&gt;can be extended to competitive&lt;/a&gt;,\nbut for narrating how real-time games work it's easier to to start\nwith a cooperative assumption.)&lt;/p&gt;&lt;p&gt;We could start out by wiring things up on the network so that I am\nallowed to press certain keys for player 1 and you are allowed to\npress certain keys for player 2.\n(Now it's worth noting that a better way to do this doesn't involve\n&lt;em&gt;keys on the keyboard&lt;/em&gt; but &lt;em&gt;capability references&lt;/em&gt;, and really that's\nhow we'd do things if we were to bring this multiplayer idea live, but\nI'm trying to provide a metaphor that's easy to think about without\nintroducing the complicated sounding kinds of terms like &amp;quot;c-lists&amp;quot; and\n&amp;quot;vat turns&amp;quot; that we ocap people seem to like.)\nSo, as a first attempt, maybe if we were playing on a local area\nnetwork or something, we could synchronize at every game tick: I share\nmy input with you and you share yours, and then and only then do both\nof our systems actually input them into that game-tick's inputs.\nWe'll have achieved a kind of &amp;quot;convergence&amp;quot; as to the current game state\non every tick.\n(&lt;strong&gt;EDIT:&lt;/strong&gt; I wrote &amp;quot;a kind of &lt;em&gt;consensus&lt;/em&gt;&amp;quot; instead of &amp;quot;a kind of\n&lt;em&gt;convergence&lt;/em&gt;&amp;quot; originally, and that was an error, because it misleads\non what consensus algorithms tend to do.)&lt;/p&gt;&lt;p&gt;Except this wouldn't work very well if you and I were living far away\nfrom each other and playing over the internet... the lag time for\ndoing this for every game tick might slow the system to a crawl...\nour computers wouldn't get each others' inputs as fast as the game was\nmoving along, and would have to pause until we received each others'\nmoves.&lt;/p&gt;&lt;p&gt;So okay, here's what we'll do.\nRemember the time-travel GUI above?\nAs you can see, we're effectively restoring from an old snapshot.\nOh!  So okay.\nWe could save a snapshot of the game every second, and then both get\neach other our inputs to each other as fast as we can, but knowing\nit'll lag.\nSo, without having seen your inputs yet, I could move my ship up and\nto the right and fire (and send that I did that to you).\nMy game would be in a &amp;quot;dirty state&amp;quot;... I haven't actually seen what\nyou've done yet.\nNow suddenly I get the last set of moves you did over the network...\nin the last five frames, you move down and to the left and fire.\nNow we've got each others' inputs... what our systems can do is\n&lt;em&gt;secretly time travel behind the scenes to the last snapshot&lt;/em&gt;, then\n&lt;em&gt;fast forward&lt;/em&gt;, replaying both of our inputs on each tick up until the\nlatest state where we've both seen each others' moves (but we wouldn't\n&lt;em&gt;show&lt;/em&gt; the fast forward process, we'd just show the result with the\nfast forward having been applied).\nThis can happen fast enough that I might see your ship jump forward\na little, and maybe your bullet will kill the enemy instead of mine\nand the scores shift so that you actually got some points that\nfor a moment I thought I had, but this can all happen in realtime\nand we don't need to slow down the game at all to do it.&lt;/p&gt;&lt;p&gt;Again, all the above can be done, but with actual wiring of\ncapabilities instead of the keystroke metaphor... and actually, the\nsame set of ideas can be done with &lt;em&gt;any&lt;/em&gt; kind of system, not just\na game.&lt;/p&gt;&lt;p&gt;And oh hey, technically, technically, &lt;em&gt;technically&lt;/em&gt; if we both hashed\neach of our previous messages in the linked list and signed each one,\nthen this would qualify as a merkle tree and then this would also\nqualify as a blockchain... but wait, this doesn't have anything to do\nwith cryptocurrencies!\nSo is it really a blockchain?&lt;/p&gt;&lt;h2&gt;&amp;quot;Blockchain&amp;quot; as synonym for &amp;quot;cryptocurrency&amp;quot; but this is wrong and don't do this one&lt;/h2&gt;&lt;p&gt;By now you've probably gotten the sense that I really was annoyed with\nthe first section of &amp;quot;blockchain&amp;quot; as a synonym for &amp;quot;decentralization&amp;quot;\n(especially because blockchains are decentralized centralization/convergence)\nand that is completely true.\nBut even more annoying to me is the synonym of &amp;quot;blockchain&amp;quot; with\n&amp;quot;cryptocurrency&amp;quot;.&lt;/p&gt;&lt;p&gt;&amp;quot;Cryptocurrency&amp;quot; means &amp;quot;cryptographically based currency&amp;quot; and it is\nNOT synonymous with blockchains.\n&lt;a href=&quot;https://en.wikipedia.org/wiki/DigiCash&quot;&gt;Digicash&lt;/a&gt; precedes blockchains\nby a dramatic amount, but it is a cryptocurrency.\nThe &amp;quot;simple mint&amp;quot; type system also precedes blockchains and while it\ncan be run on a blockchain, it can also run on a solo\ncomputer/machine.&lt;/p&gt;&lt;p&gt;But as we saw, we could perceive multiplayer Terminal Phase as\ntechnically, technically a blockchain, even though it has &lt;em&gt;nothing to do with&lt;/em&gt;\ncurrencies whatsoever.&lt;/p&gt;&lt;p&gt;So again a blockchain is just a single, abstract, sequential machine,\nrun by multiple parties.\nThat's it.\nIt's more general than cryptocurrencies, and it's not exclusive to\nimplementing them either.\nOne is a kind of programming-plus-cryptography-use-case\n(cryptocurrencies), the other one is a kind of abstracted machine\n(blockchains).&lt;/p&gt;&lt;p&gt;So please.\nThey are frequently combined, but don't treat them as the same thing.&lt;/p&gt;&lt;h2&gt;Blockchains as single abstract machines on a wider network&lt;/h2&gt;&lt;p&gt;One of my favorite talks is Mark Miller's\n&lt;a href=&quot;https://www.youtube.com/watch?v=YXUqfgdDbr8&quot;&gt;Programming Secure Smart Contracts&lt;/a&gt;\ntalk.\nAdmittedly, I like it partly because it well illustrates some of the\nlow-level problems I've been working on, and that might not be as\nuseful to everyone else.\nBut it has this lovely diagram in it:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/etc/images/blog/markm-agoric-layers.png&quot; alt=&quot;Machines / Vats / Ocaps / Erights layers of abstractions&quot; /&gt;&lt;/p&gt;&lt;p&gt;This is better understood by watching the video, but the abstraction\nlayers described here are basically as follows:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&amp;quot;Machines&amp;quot; are the lowest layer of abstraction on the network, but\nthere a variety of kinds of machines.\nPublic blockchains are one, quorum blockchains are another, solo\ncomputer machines yet another (and the simplest case, too).\nWhat's interesting then is that we can see public chains and quorums\nabstractly demonstrated as machines in and of themselves... even though\nthey are run by many parties.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Vats are the next layer of abstraction, these are basically the\n&amp;quot;communicating event loops&amp;quot;... actors/objects live inside them,\nand more or less these things run sequentially.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Replace &amp;quot;JS ocaps&amp;quot; with &amp;quot;language ocaps&amp;quot; and you can see actors/objects\nin both Javascript and Spritely living here.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Finally, at the top are &amp;quot;erights&amp;quot; and &amp;quot;smart contracts&amp;quot;, which feed\ninto each other... &amp;quot;erights&amp;quot; are &amp;quot;exclusive electronic rights&amp;quot;, and\n&amp;quot;smart contracts&amp;quot; are generally patterns of cooperation involving\nachieving mutual goals despite suspicion, generally involving the\ntrading of these erights things (but not necessarily).&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Okay, well cool!\nThis finally explains the worldview I see blockchains on.\nAnd we can see a few curious things:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;The &amp;quot;public chain&amp;quot; and &amp;quot;quorum&amp;quot; kinds of machines still boil down\nto a single, sequential abstract machine.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Object connections exist between the machines... ocap security.\nNo matter whether it's run by a single computer or multiple.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Public blockchains, quorum blockchains, solo-computer machines\nall talk to each other, and communicate between object references\non each other.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Blockchains are not magical things.\nThey are abstracted machines on the network.\nSome of them have special rules that let whoever can prove they qualify\nfor them access some well-known capabilities, but really they're just\nabstracted machines.&lt;/p&gt;&lt;p&gt;And here's an observation: you aren't ever going to move all\ncomputation to a single blockchain.\nAgoric's CEO, Dean Tribble,\n&lt;a href=&quot;https://youtu.be/WeRbY6tiAio?t=712&quot;&gt;explained beautifully why on a recent podcast&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;One of the problems with Ethereum is it is as tightly coupled as\npossible.\nThe entire world is a single sequence of actions that runs on a\ncomputer with about the power of a cell phone.\nNow, that's obviously hugely valuable to be able to do commerce in a\nhigh-integrity fashion, even if you can only share a cell phone's\nworth of compute power with the entire rest of the world.\nBut that's clearly gonna hit a brick wall.\nAnd we've done lots of large-scale distributed systems whether\npayments or cyberspace or coordination, and the fundamental model\nthat covers all of those is\n&lt;em&gt;islands of sequential programming in a sea of asynchronous communication&lt;/em&gt;.\nThat is what the internet is about, that's what the interchain is about,\nthat's what &lt;em&gt;physics&lt;/em&gt; requires you to do if you want a system to scale.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Put this way, it should be obvious: are we going to replace the entire\ninternet with something that has the power of a cell phone?\nTo ask the question is to know the answer: of course not.\nEven when we do admit blockchain'y systems into our system, we're going\nto have to have many of them communicating with each other.&lt;/p&gt;&lt;p&gt;Blockchains are just machines that many people/agents run.\nThat's it.&lt;/p&gt;&lt;p&gt;Some of these are encoded with some nice default programming to do\nsome useful things, but all of them can be done in non-blockchain\nsystems because\n&lt;em&gt;communicating islands of sequential processes is the generalization&lt;/em&gt;.\nYou might still want a blockchain, ie you might want multiple parties\nrunning one of those machines as a shared abstract machine, but\nhow you configure that blockchain from there might depend on your\ntrust and integrity requirements.&lt;/p&gt;&lt;h2&gt;What do I think of blockchains?&lt;/h2&gt;&lt;p&gt;I've covered a wide variety of perspectives of &amp;quot;what is a blockchain&amp;quot;\nin this article.&lt;/p&gt;&lt;p&gt;On the worse end of things are the parts involving hand-wavey\nconfusion about decentralization, mistaken ideas of them being tied to\ncryptocurrencies, marketing hype, cultural assumptions, and some real,\nbut not intrinsic, cultural problems.&lt;/p&gt;&lt;p&gt;In the middle, I am particularly keen on highlighting the similarity\nbetween the term &amp;quot;blockchain&amp;quot; and the term &amp;quot;roguelike&amp;quot;, how both of\nthem might boil down to some key ideas or not, but more importantly\nthey're both a rough family of ideas that diverge from one highly\ninfluential source (Bitcoin and Rogue respectively).\nThis is also the source of much of the &amp;quot;shouting past each other&amp;quot;,\nbecause many people are referring to different components that they\nview as essential or inessential.\nMany of these pieces may be useful or harmful in isolation, in small\namounts, in large amounts, but much of the arguing (and posturing)\ninvolves highlighting different things.&lt;/p&gt;&lt;p&gt;On the better end of things is a revelation, that blockchains are just\nanother way of abstracting a computer so that multiple parties can run\nit.\nThe particular decisions and use cases layered on top of this\nfundamental design are highly variant.&lt;/p&gt;&lt;p&gt;Having made the waters clear again, we could muddy them.\nA friend once tried to convince me that &lt;em&gt;all&lt;/em&gt; computers are\ntechnically blockchains, that blockchains are the generalization of\ncomputing, and the case of a solo computer is merely one where a\nblockchain is run only by one party and no transaction history or old\nstate is kept around.\nMaybe, but I don't think this is very useful.\nYou can go in either direction, and I think the time travel and\nTerminal Phase section maybe makes that clear to me, but I'm not so\nsure how it lands with others I suppose.\nBut a term tends to be useful in terms of what it &lt;em&gt;introduces&lt;/em&gt;, and\ncalling everything a blockchain seems to make the term even less\nuseful than it already is.\nWhile a blockchain could be one or more parties running a sequential\nmachine as the generalization, I suggest we stick to two or more.&lt;/p&gt;&lt;p&gt;Blockchains are not magic pixie dust, putting something on a\nblockchain does not make it work better or more\ndecentralized... indeed, what a blockchain really does is converging\n(or re-centralizing) a machine from a decentralized set of computers.\nAnd it always does so with some cost, some set of overhead...\nbut what those costs and overhead &lt;em&gt;are&lt;/em&gt; varies depending on what the\nconfiguration decisions are.\nThose decisions &lt;em&gt;should&lt;/em&gt; always stem from some careful thinking about\nwhat those trust and integrity needs are... one of the more\nfrustrating things about blockchains being a technology of great\nhype and low understanding is that such care is much less common than\nit should be.&lt;/p&gt;&lt;p&gt;Having a blockchain, as a convergent machine, can be useful.\nBut how that abstracted convergent machine is arranged can diverge\ndramatically; if we aren't talking about the same choices, we might\nshout past each other.\nStill, it may be an unfair ask to request that those without a deep\ntechnical background go into technical specifics, and I recognize\nthat, and in a sense there can be some amount gained from speaking\ntowards broad-sweeping, fuzzy sets and the patterns they seem to be\ncarrying.\nA gut-sense assertion from a set of loosely observed behaviors can be\na useful starting point.\nBut to get at the root of what those gut senses actually map to, we\nwill have to be specific, and we should encourage that specificity\nwhere we can (without being rude about it) and help others see those\ncomponents as well.&lt;/p&gt;&lt;p&gt;But ultimately, as convergent machines, blockchains will not operate\nalone.\nI think the system that will hook them all together\n&lt;a href=&quot;https://spritelyproject.org/news/what-is-captp.html&quot;&gt;should be CapTP&lt;/a&gt;.\nBut no matter the underlying protocol abstraction, blockchains\nare just abstract machines on the network.&lt;/p&gt;&lt;p&gt;Having finally disentangled what &lt;em&gt;blockchains&lt;/em&gt; are, I think soon I\nwould like to move onto what &lt;em&gt;cryptocurrencies&lt;/em&gt; are.\nKnowing that they are &lt;em&gt;not necessarily tied to blockchains&lt;/em&gt; opens us\nup to considering an ecosystem, even an interoperable and exchangeable\none, of varying cryptographically based financial instruments, and\nthe different roles and uses they might play.\nBut that is another post of its own, for whenever I can get to it,\nI suppose.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;ADDENDUM:&lt;/strong&gt; After writing this post, I had several conversations\nwith several blockchain-oriented people.\nEach of them roughly seemed to agree that Bitcoin was roughly the\nprototypical &amp;quot;blockchain&amp;quot;, but each of them also seemed to highlight\ndifferent things they thought were &amp;quot;essential&amp;quot; to what a &amp;quot;blockchain&amp;quot;\nis: some kinds of consensus algorithms being better than others, that\nkinds of social arrangements are enabled, whether transferrable\nassets are encoded on the chain, etc.\nTo start with, I feel like this does confirm some\nof the premise of this post, that Bitcoin is the starting point, but\nlike Rogue and &amp;quot;roguelikes&amp;quot;, &amp;quot;blockchains&amp;quot; are an exploration space\nstemming from a particular influential technical piece.&lt;/p&gt;&lt;p&gt;However my friend Kate Sills (who also gave me a much better\ndefinition for &amp;quot;smart contracts&amp;quot;, added above) highlighted something\nthat I hadn't talked about much in my article so far, which I do agree\ndeserves expansion.\nKate said: &amp;quot;I do think there is something huge missing from your\npiece.  Bitcoin is amazing because it aligns incentives among actors\nwho otherwise have no goals in common.&amp;quot;&lt;/p&gt;&lt;p&gt;I agree that there's something important here, and this definition of\n&amp;quot;blockchain&amp;quot; maybe does explain why while from a computer science\nperspective, perhaps signed git trees do resemble blockchains, they\ndon't seem to fit within the realm of what most people are thinking\nabout... while git might be a tool used by several people with aligned\nincentives, it is not generally itself the layer of\nincentive-alignment.&lt;/p&gt;</summary></entry><entry><title>The hurt of this moment, hopes for the future</title><id>https://dustycloud.org/blog/hurt-and-hopes/</id><author><name>Christine Lemmer-Webber</name><email>cwebber@dustycloud.org</email></author><updated>2021-03-31T13:42:00Z</updated><link href=\"https://dustycloud.org/blog/hurt-and-hopes/\" rel=\"alternate\" /><summary type=\"html\">&lt;p&gt;Of the deeper thoughts I might give to this moment, I have &lt;a href=&quot;https://fossandcrafts.org/episodes/25-governance-leadership-founders-syndrome.html&quot;&gt;given them elsewhere&lt;/a&gt;.  For this blogpost, I just want to speak of feelings... feelings of hurt and hope.&lt;/p&gt;&lt;p&gt;I am reaching out, collecting the feelings of those I see around me, writing them in my mind's journal.  Though I hold clear positions in this moment, there are few roots of feeling and emotion about the moment I feel I haven't steeped in myself at some time.  Sometimes I tell this to friends, and they think maybe I am drifting from a mutual position, and this is painful for them.  Perhaps they fear this could constitute or signal some kind of betrayal.  I don't know what to say: I've been here too long to feel just one thing, even if I can commit to one position.&lt;/p&gt;&lt;p&gt;So I open my journal of feelings, and here I share some of the pages collecting the pain I see around me:&lt;/p&gt;&lt;p&gt;The irony of a movement wanting to be so logical and above feelings being drowned in them.&lt;/p&gt;&lt;p&gt;The feelings of those who found a comfortable and welcoming home in a world of loneliness, and the split between despondence and outrage for that unraveling.&lt;/p&gt;&lt;p&gt;The feelings of those who wanted to join that home too, but did not feel welcome.&lt;/p&gt;&lt;p&gt;The pent up feelings of those unheard for so long, uncorked and flowing.&lt;/p&gt;&lt;p&gt;The weight and shadow of a central person who seems to feel things so strongly but cannot, and does not care to learn to, understand the feelings of those around them.&lt;/p&gt;&lt;p&gt;I flip a few pages ahead.  The pages are blank, and I interpret this as new chapters for us to write, together.&lt;/p&gt;&lt;p&gt;I hope we might re-discover the heart of our movement.&lt;/p&gt;&lt;p&gt;I hope we can find a place past the pain of the present, healing to build the future.&lt;/p&gt;&lt;p&gt;I hope we can build a new home, strong enough to serve us and keep us safe, but without the walls, moat, and throne of a fortress.&lt;/p&gt;&lt;p&gt;I hope we can be a movement that lives up to our claims: of justice, of freedom, of human rights, to bring these to everyone, especially those we haven't reached.&lt;/p&gt;</summary></entry><entry><title>Vote for Amy Guy on the W3C TAG (if you can)</title><id>https://dustycloud.org/blog/vote-for-amy-guy/</id><author><name>Christine Lemmer-Webber</name><email>cwebber@dustycloud.org</email></author><updated>2020-12-21T15:07:00Z</updated><link href=\"https://dustycloud.org/blog/vote-for-amy-guy/\" rel=\"alternate\" /><summary type=\"html\">&lt;p&gt;My friend &lt;a href=&quot;https://rhiaro.co.uk/&quot;&gt;Amy Guy&lt;/a&gt; is\n&lt;a href=&quot;https://rhiaro.co.uk/2020/11/tag-statement&quot;&gt;running for election&lt;/a&gt;\non the &lt;a href=&quot;https://www.w3.org/2001/tag/&quot;&gt;W3C TAG&lt;/a&gt;\n(Technical Architecture Group).\nThe TAG is an unusual group that sets a lot of the direction of the\nfuture of standards that you and I use everyday on the web.\n&lt;a href=&quot;https://rhiaro.co.uk/2020/11/tag-statement&quot;&gt;Read their statement on running&lt;/a&gt;,\nand if you can, ie if you're one of those unusual people labeled\nas &amp;quot;AC Representative&amp;quot;, please consider\n&lt;a href=&quot;https://www.w3.org/2002/09/wbs/33280/tagelect-2020/&quot;&gt;voting for them&lt;/a&gt;.\n(Due to the nature of the W3C's organizational and funding structure,\nonly paying W3C Members tend to qualify... if you know you're working\nfor an organization that has paying membership to the W3C, find out\nwho the AC rep is and strongly encourage &lt;em&gt;them&lt;/em&gt; to vote for Amy.)&lt;/p&gt;&lt;p&gt;So, why vote for Amy?\nQuite simply, they're running on a platform of putting the needs of\nusers first.\nDespite all the good intents and ambitions of those who have done\nfounding work in these spaces, this perspective tends to get\nincreasingly pushed to the wayside as engineers are pressured to shift\ntheir focus on the needs of their immediate employers and large\nimplementors.\nI'm not saying that's bad; sometimes this even does help advance the\ninterest of users too, but... well we all know the ways in which it\ncan end up not doing so.\nAnd I don't know about you, but the internet and the web have felt an\nawful lot at times like they've been slipping from those early ideals.\nAmy's platform shares in a growing zeitgeist (sadly, still in the\nwispiest of stages) of thinking and reframing from the perspective of\nuser empowerment, privacy, safety, agency, autonomy.\nAmy's platform reminds me of\n&lt;a href=&quot;https://tools.ietf.org/html/rfc8890&quot;&gt;RFC 8890: The Internet Is For End Users&lt;/a&gt;.\nThat's a perspective shift we desperately need right now... for the\ninternet and the web both.&lt;/p&gt;&lt;p&gt;That's all well and good for the philosophical-alignment angle.\nBut what about the &amp;quot;Technical&amp;quot; letter in TAG?\nAmy's standing there is rock-solid.\nAnd &lt;em&gt;I know&lt;/em&gt; because I've had the pleasure of working side-by-side\nwith Amy on several standards (including\n&lt;a href=&quot;https://www.w3.org/TR/activitypub/&quot;&gt;ActivityPub&lt;/a&gt;, of which we are\nco-authors.&lt;/p&gt;&lt;p&gt;Several times I watched with amazement as Amy and I talked about some\nchanges we thought were necessary and Amy just got &lt;em&gt;in the zone&lt;/em&gt;, this\nlook of intense hyperfocus (really, someone should record the Amy Spec\nEditing Zone sometime, it's quite a thing to see), and they refactored\nhuge chunks of the spec to match our discussion.\nAnd Amy knows, and deeply &lt;em&gt;cares&lt;/em&gt;, about so many aspects of the W3C's\norganization and structure.&lt;/p&gt;&lt;p&gt;So, if you can vote for, or know how to get your organization to vote\nfor, an AC rep... well, I mean do what you want I guess, but if you\nwant someone who will help... for great justice, vote Amy Guy to the\nW3C TAG!&lt;/p&gt;</summary></entry><entry><title>Identity is a Katamari, language is a Katamari explosion</title><id>https://dustycloud.org/blog/identity-is-a-katamari/</id><author><name>Christine Lemmer-Webber</name><email>cwebber@dustycloud.org</email></author><updated>2020-12-09T13:00:00Z</updated><link href=\"https://dustycloud.org/blog/identity-is-a-katamari/\" rel=\"alternate\" /><summary type=\"html\">&lt;p&gt;I said something strange this morning:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Identity is a Katamari, language is a continuous reverse engineering\neffort, and thus language is a quadratic explosion of Katamaris.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This sounds like nonsense probably, but has a lot of thought about it.\nI have spent a lot of time in the decentralized-identity community and\nthe ocap communities, both of which have spent a lot of time hemming\nand hawing about &amp;quot;What &lt;em&gt;is&lt;/em&gt; identity?&amp;quot;, &amp;quot;What is a credential or\nclaim?&amp;quot;, &amp;quot;What is authorization?&amp;quot;,\n&lt;a href=&quot;https://lists.w3.org/Archives/Public/public-credentials/2020Dec/0028.html&quot;&gt;&amp;quot;Why is it unhygienic for identity to be your authorization system?&amp;quot;&lt;/a&gt;\n(that mailing list post is the most important writing about the nature\nof computing I've ever written; I hope to have a cleaned up version of\nthe ideas out soon).&lt;/p&gt;&lt;p&gt;But that whole bit about &amp;quot;what is identity, is it different than an\nidentifier really?&amp;quot; etc etc etc...&lt;/p&gt;&lt;p&gt;Well, I've found one good explanation, but it's a bit silly.&lt;/p&gt;&lt;h1&gt;Identity is a Katamari&lt;/h1&gt;&lt;p&gt;There is a curious, surreal, delightful (and proprietary, sorry) game,\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Katamari_Damacy&quot;&gt;Katamari Damacy&lt;/a&gt;.\nIt has a silly story, but the interesting thing here is the game\nmechanic, involving rolling around a ball-like thing that picks up\nobjects and grows bigger and bigger kind of like a snowball.\nIt has to &lt;a href=&quot;https://youtu.be/FQxEitzJ-H0?t=636&quot;&gt;be seen&lt;/a&gt; or played to\nreally be understood.&lt;/p&gt;&lt;p&gt;This ball-like thing is called a &amp;quot;Katamari Damacy&amp;quot;, or &amp;quot;soul clump&amp;quot;,\nwhich is extra appropriate for our mental model.\nAs it rolls around, it picks up smaller objects and grows bigger.\nThe ball at the center is much like an identifier.\nBut over time that identifier becomes obscured, it picks up things,\nwhich in the game are physical objects, but these metaphorically map\nto &amp;quot;associations&amp;quot;.&lt;/p&gt;&lt;p&gt;Our identity-katamari changes over time.  It grows and picks up\nassociations.  Sometimes you forget something you've picked up that's\nin there, it's buried deep (but it's wiggling around in there still\nand you find out about it during some conversation with your\ntherapist).  Over time the katamari picks up enough things that it is\nobscured.  Sometimes there are collisions, you smash it into something\nand some pieces fly out.  Oh well, don't worry about it.  They\nprobably weren't meant to be.&lt;/p&gt;&lt;h1&gt;Language is reverse engineering&lt;/h1&gt;&lt;p&gt;Shout out to my friend &lt;a href=&quot;http://mumble.net/~jar/&quot;&gt;Jonathan Rees&lt;/a&gt; for\nsaying something that really stuck in my brain (okay actually most\nthings that Rees says stick in my brain):&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&amp;quot;Language is a continuous reverse engineering effort, where both\nsides are trying to figure out what the other side means.&amp;quot;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This is true, but its truth is the bane of ontologists and static\ntypists.  This doesn't mean that ontologies or static typing are\nwrong, but that the notion that they're fixed is an illusion... a\nuseful, powerful illusion (with a great set of mathematical tools\nbehind it sometimes that can be used with mathematical\nproofs... assuming you don't change the context), but an illusion\nnonetheless.  Here are some examples that might fill out what I mean:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;The classic example, loved by fuzzy typists everywhere: when is a\nperson &amp;quot;bald&amp;quot;?  Start out with a person with a &amp;quot;full head&amp;quot; of hair.\nHow many hairs must you remove for that person to be &amp;quot;bald&amp;quot;?  What\nif you start out the opposite way...  someone is bald... how many\nhairs must you add for them to become not-bald?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;We might want to construct a precise recipe for a\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Lassi#Mango_lassi&quot;&gt;mango lassi&lt;/a&gt;.\nMaybe, in fact, we believe we can create a &lt;em&gt;precise typed\ndefinition&lt;/em&gt; for a mango lassi.\nBut we might soon find ourselves running into trouble.  Can a vegan\nnon-dairy milk be used for the Lassi?  (Is vegan non-dairy milk\nactually milk?)  Is ice cream acceptable?  Is added sugar\nnecessary?  Can we use artificial mango-candy powder instead of\nmangoes?  Maybe you can hand-wave away each of these, but here's\nsomething much worse: what's a mango?  You might think that's\nobvious, a mango is the fruit of &lt;em&gt;mangifera indica&lt;/em&gt; or maybe\nif you're generous fruit of anything in the &lt;em&gt;mangifera&lt;/em&gt; genus.\nBut mangoes &lt;em&gt;evolved&lt;/em&gt; and there is some weird state where we had\nalmost-a-mango and in the future we might have some new states\nwhich are no-longer-a-mango, but more or less we're throwing darts\nat exactly where we think those are... evolution doesn't care,\nevolution just wants to keep reproducing.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Meaning changes over time, and how we categorize does too.\nOnce someone was explaining the &lt;a href=&quot;https://www.w3.org/OWL/&quot;&gt;Web Ontology Language&lt;/a&gt;\n(which got confused somewhere in its acronym ordering and is\nshortened to OWL (&lt;em&gt;update:&lt;/em&gt; it's a Winnie the Pooh update, based\non the way the Owl character spells his name... thank you Amy\nGuy for informing me of the history)).\nThey said that it was great because you could clearly define what\nis and isn't allowed and terms derived from other terms, and that\nthe simple and classic example is Gender, which is a binary choice\nof Male or Female.\nThey paused and thought for a moment.\n&amp;quot;That might not be a good example anymore.&amp;quot;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Even if you try to define things by their use or properties rather\nthan as an individual concept, this is messy too.\nA person from two centuries ago would be confused by the metal\ncube I call a &amp;quot;stove&amp;quot; today, but you could say it does the same\njob.\nNonetheless, if I asked you to &amp;quot;fetch me a stove&amp;quot;, you would probably\nnot direct me to a computer processor or a car engine, even though\nsometimes people fry an egg on both of these.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Multiple constructed languages (Esperanto most famously) have been\nmade by authors that believed that if everyone spoke the same language,\nwe would have world peace.\nThis is a beautiful idea, that conflict comes purely from\nmisunderstandings.\nI don't think it's true, especially given how many fights I've seen\nbetween people speaking the same language.\nNonetheless there's truth in that many fights are about a conflict\nof ideas.&lt;/p&gt;&lt;p&gt;If anyone was going to achieve this though, it would be the\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Lojban&quot;&gt;Lojban&lt;/a&gt; community, which\nactually does have a language which is &lt;em&gt;syntactically&lt;/em&gt; unambiguous,\nso you no longer have ambiguity such as\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Time_flies_like_an_arrow;_fruit_flies_like_a_banana&quot;&gt;&amp;quot;time flies like an arrow&amp;quot;&lt;/a&gt;.\nNonetheless, even this world can't escape the problem that some terms\njust can't be easily pinned down, and the best example is the\n&lt;a href=&quot;https://mw.lojban.org/papri/jbocre:_Bear_goo&quot;&gt;bear goo&lt;/a&gt;\ndebate.&lt;/p&gt;&lt;p&gt;Here's how it works: both of us can unambiguously construct a sentence\nreferring to a &amp;quot;bear&amp;quot;.\nBut when it is that bear no longer a bear?\nIf it is struck in the head and is killed, when in that process has it\nbecome a decompositional &amp;quot;bear goo&amp;quot; instead?\nAnd the answer is: there is no good answer.\nNonetheless many participants want there to be a pre-defined bear,\nthey want us to live in a pre-designed universe where &amp;quot;bear&amp;quot; is a clear\npredicate that can be checked against, because the universe has a\nclear definition of &amp;quot;bear&amp;quot; for us.&lt;/p&gt;&lt;p&gt;That doesn't exist, because bears evolved.  And more importantly, the\nconcept and existence a bear is &lt;em&gt;emergent&lt;/em&gt;, cut across many different\ndomains, from evolution to biology to physics to linguistics.&lt;/p&gt;&lt;p&gt;Sorry, we won't achieve perfect communication, not even in Lojban.\nBut we can get a lot better, and set up a system with fewer stumbling\nblocks for testing ideas against each other, and that is a worthwhile\ngoal.&lt;/p&gt;&lt;p&gt;Nonetheless, if you and I are camping and I shout, &amp;quot;AAH!  A bear!\nRUN!!&amp;quot;, you and I probably don't have to stop to debate bear goo.\nRees is right that language is a reverse engineering effort, but we\ntend to do a pretty good job of gaining rough consensus of what the\nother side means.  Likewise, if I ask you, &amp;quot;Where is your stove?&amp;quot;, you\nprobably won't lead me to your computer or your car.  And if you hand\nme a &amp;quot;sugar free vegan mango lassi made with artificial mango flavor&amp;quot;\nI might doubt its cultural authenticity, but if you then referred to\nthe &amp;quot;mango lassi&amp;quot; you had just handed me a moment ago, I wouldn't have\nany trouble continuing the conversation.  Because we're more or less\nbuilt to contextually construct language contexts.&lt;/p&gt;&lt;h1&gt;Language is a quadratic explosion of Katamaris&lt;/h1&gt;&lt;p&gt;Language is composed of syntax partly, but the arrangement of symbolic\nterms mostly.  Or that's another way to say that the non-syntactic\nelements of language are mostly there as identifiers substituted\nmentally for identity and all the associations therein.&lt;/p&gt;&lt;p&gt;Back to the Katamari metaphor.  What &amp;quot;language is a\nreverse-engineering effort&amp;quot; really means is that each of us are\nconstructing identities for identifiers mentally, rolling up katamaris\nfor each identifier we encounter.  But what ends up in our ball will\nvary depending on our experiences and what paths we take.&lt;/p&gt;&lt;p&gt;Which really means that if each person is rolling up a &lt;em&gt;separate,\npersonal identity-katamari&lt;/em&gt; for &lt;em&gt;each identifier&lt;/em&gt; in the system, that\nmeans that, barring passing through a singularity type event-horizon\npast which participants can do direct shared memory mapping, this is\nan O(n^2) problem!&lt;/p&gt;&lt;p&gt;But actually this is not a problem, and is kind of beautiful.  It is\namazing, given all that, just how good we are at finding shared\nmeaning.  But it also means that we should be aware of what this means\ntopologically, and that each participant in the system will have a\ndifferent set of experiences and understanding for each\nidentity-assertion made.&lt;/p&gt;&lt;p&gt;Thank you to Morgan Lemmer-Webber, Stephen Webber, Corbin Simpson,\nBaldur Jóhannsson, Joey Hess, Sam Smith, Lee Spector, and Jonathan\nRees for contributing thoughts that lead to this post (if you feel\nlike you don't belong here, do belong here, or are wondering how the\nheck you got here, feel free to contact me).  Which is not to say that\neveryone, from their respective positions, have agreement here; I know\nseveral disagree strongly with me on some points I've made.  But\neveryone did help contribute to reverse-engineering their positions\nagainst mine to help come to some level of shared understanding,\nand the giant pile of katamaris that is this blogpost.&lt;/p&gt;</summary></entry><entry><title>Spritely website launches, plus APConf video(s)!</title><id>https://dustycloud.org/blog/spritely-website-apconf-videos/</id><author><name>Christine Lemmer-Webber</name><email>cwebber@dustycloud.org</email></author><updated>2020-09-30T14:20:00Z</updated><link href=\"https://dustycloud.org/blog/spritely-website-apconf-videos/\" rel=\"alternate\" /><summary type=\"html\">&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This originally appeared\n&lt;a href=&quot;https://www.patreon.com/posts/42200964&quot;&gt;as a post on my Patreon account&lt;/a&gt;...\nthanks to all who have donated to support my work!&lt;/p&gt;&lt;p&gt;Hello, hello!  &lt;a href=&quot;https://spritelyproject.org/&quot;&gt;Spritely's website&lt;/a&gt; has\nfinally launched!  Whew... it's been a lot of work to get it to this\nstate!  Plus check out our new logo:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://spritelyproject.org/static/images/spritely-logo-transparent-500px.png&quot; alt=&quot;Spritely logo&quot; /&gt;&lt;/p&gt;&lt;p&gt;Not bad, eh?  Also with plenty of cute characters on the Spritely site\n(thank you to &lt;a href=&quot;https://www.peppercarrot.com/&quot;&gt;David Revoy&lt;/a&gt; for taking\nmy loose character sketches and making them into such beautiful\npaintings!)&lt;/p&gt;&lt;p&gt;But those cute characters are there for a reason!  Spritely is quite\nambitious and has quite a few subprojects.  Here's a\n&lt;a href=&quot;https://conf.tube/videos/watch/18aa2f92-36cc-4424-9a4f-6f2de946fbd2&quot;&gt;video that explains how they all fit together&lt;/a&gt;.\nHopefully that makes things more clear!&lt;/p&gt;&lt;p&gt;Actually that video is from &lt;a href=&quot;https://conf.activitypub.rocks/&quot;&gt;ActivityPub Conference 2020&lt;/a&gt;,\nthe &lt;a href=&quot;https://conf.activitypub.rocks/#talks&quot;&gt;talks&lt;/a&gt; of which have now\n&lt;a href=&quot;https://conf.tube/video-channels/apconf_channel/videos&quot;&gt;all have their videos live&lt;/a&gt;!\nI also moderated the &lt;a href=&quot;https://conf.tube/videos/watch/6289920f-4e35-4141-ab6f-379b357849ec&quot;&gt;intro keynote panel about ActivityPub authors/editors&lt;/a&gt;.\nPlus there's an easter egg, the &lt;a href=&quot;https://conf.tube/videos/watch/285e7580-8281-4ae4-842e-81c687237c69&quot;&gt;ActivityPub Conference Opening Song&lt;/a&gt;! :)&lt;/p&gt;&lt;p&gt;But I can't take credit for APConf 2020... organization and support are thanks to Morgan Lemmer-Webber, Sebastian Lasse, and &lt;a href=&quot;https://conf.tube/videos/watch/285e7580-8281-4ae4-842e-81c687237c69&quot;&gt;FOSSHost&lt;/a&gt; for hosting the website and BigBlueButton instance and &lt;a href=&quot;https://conf.tube/&quot;&gt;conf.tube&lt;/a&gt; for generously hosting all the videos.  There's a &lt;a href=&quot;https://conf.tube/videos/watch/87bc99dd-b1b8-4fc3-b034-dca805388179&quot;&gt;panel about the organization of APConf&lt;/a&gt; you can watch if you're interested in more of that!  (And of course, all the other great videos too!)&lt;/p&gt;&lt;p&gt;So... what about that week I was going to work on Terminal Phase?\nWell... I'm still planning on doing it but admittedly it hasn't\nhappened yet.  All of the above took more time than expected.\nHowever, today I &lt;em&gt;am&lt;/em&gt; working on my talk about Spritely Goblins for\nRacketCon, and as it turns out, extending Terminal Phase is a big part\nof that talk.  But I'll announce more soon when the Terminal Phase\nstuff happens.&lt;/p&gt;&lt;p&gt;Onwards and upwards!&lt;/p&gt;</summary></entry><entry><title>Spritely Goblins v0.7 released!</title><id>https://dustycloud.org/blog/spritely-goblins-v0/</id><author><name>Christine Lemmer-Webber</name><email>cwebber@dustycloud.org</email></author><updated>2020-09-13T17:20:00Z</updated><link href=\"https://dustycloud.org/blog/spritely-goblins-v0/\" rel=\"alternate\" /><summary type=\"html\">&lt;p&gt;I'm delighted to say that\n&lt;a href=&quot;https://docs.racket-lang.org/goblins/&quot;&gt;Spritely Goblins&lt;/a&gt;\n&lt;a href=&quot;https://gitlab.com/spritely/goblins/-/tree/v0.7&quot;&gt;v0.7&lt;/a&gt;\nhas been released!\nThis is the first release featuring\n&lt;a href=&quot;https://docs.racket-lang.org/goblins/captp.html&quot;&gt;CapTP support&lt;/a&gt;\n(ie, &amp;quot;capability-secure distributed/networked programming support&amp;quot;),\nwhich is a huge milestone for the project!&lt;/p&gt;&lt;p&gt;Okay, caveat... there are still some things missing from the CapTP\nstuff so far; you can only set up a bidirectional connection between\ntwo machines, and can't &amp;quot;introduce&amp;quot; capabilities to other machines\non the network.\nAlso setting up connections is an extremely manual process.\nBoth of those should be improved in the next release.&lt;/p&gt;&lt;p&gt;But still!\nGoblins can now be used to easily write distributed programs!\nAnd Goblins' CapTP code even includes such wild features as\n&lt;em&gt;distributed garbage collection!&lt;/em&gt;&lt;/p&gt;&lt;p&gt;As an example\n(also mentioned in a &lt;a href=&quot;/blog/if-you-cant-tell-people-anything/&quot;&gt;recent blogpost&lt;/a&gt;),\nI recently wrote a short\n&lt;a href=&quot;https://gitlab.com/spritely/goblin-chat&quot;&gt;chat program demo&lt;/a&gt;.\nBoth the client and server &amp;quot;protocol&amp;quot; code were\n&lt;a href=&quot;https://gitlab.com/spritely/goblin-chat/-/blob/master/chat-backend.rkt&quot;&gt;less than 250 lines of code&lt;/a&gt;,\ndespite having such features as authenticating users during\nsubscription to the chatroom and verifying that messages claimed by\nthe chatroom came from the users it said it did.\n(The &lt;a href=&quot;https://gitlab.com/spritely/goblin-chat/-/blob/master/goblin-chat-gui.rkt&quot;&gt;GUI code&lt;/a&gt;,\nby contrast, was a little less than 300 lines.)\nI wrote this up without writing any network code at all and then\ntested hooking together two clients over Tor Onion Services using\nGoblins' CapTP support, and it Just Worked (TM):&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://dustycloud.org/misc/goblins-chat-captp-onion-services.gif&quot; alt=&quot;Goblins chat GUI demo&quot; /&gt;&lt;/p&gt;&lt;p&gt;What's interesting here is that\n&lt;em&gt;not a single line of code was added to the backend or GUI to accomodate networking&lt;/em&gt;;\nthe &lt;a href=&quot;https://gitlab.com/spritely/goblin-chat/-/blob/master/onion-gui-server.rkt&quot;&gt;host&lt;/a&gt;\nand &lt;a href=&quot;https://gitlab.com/spritely/goblin-chat/-/blob/master/onion-gui-client.rkt&quot;&gt;guest&lt;/a&gt;\nmodules merely imported the backend and GUI files &lt;em&gt;completely unchanged&lt;/em&gt; and\ndid the network wiring there.\nYes, that's what it sounds like: in Goblins you can write distributed\nasynchronous programs&lt;/p&gt;&lt;p&gt;This is the really significant part of Goblins that's starting to\nbecome apparent, and it's all thanks to the brilliant design of\n&lt;a href=&quot;http://erights.org/elib/distrib/captp/index.html&quot;&gt;CapTP&lt;/a&gt;.\nGoblins continues to stand on the shoulders of giants; thank you to\neveryone in the ocap community, but especially in this case\nMichael FIG, Mark S. Miller, Kevin Reid, and Baldur Jóhannsson, all of\nwhom answered an enormous amount of questions (some of them very\nsilly) about CapTP.&lt;/p&gt;&lt;p&gt;There are more people to thank too (too many to list here), and you\ncan see some of them in this\n&lt;a href=&quot;https://groups.google.com/forum/#!topic/cap-talk/xWv2-J62g-I&quot;&gt;monster thread on the captp mailing list&lt;/a&gt;\nwhich started on May 18th (!!!) as I went through my journey of trying\nto understand and eventually implement CapTP.\nI actually started preparing a few weeks before which really means that\nthis journey took me about four and a half months to understand and\nimplement.\nAs it turns out, CapTP is a surprisingly simple protocol protocol\nin its coneptualization once you understand what it's doing (though\nimplementing it is a bit more complex).\nI do hope to try to build a guide for others to understand and\nimplement on their own systems... but that will probably wait until\nGoblins is ported to another language (due to the realative simplicity\nof the task due to the language similarities, the current plan is to\nport to Guile next).&lt;/p&gt;&lt;p&gt;Anyway.\nThis is a big deal, a truly exciting moment for goblinkind.\nIf you're excited yourself, maybe join the\n&lt;a href=&quot;https://webchat.freenode.net/?channels=fossandcrafts&quot;&gt;#spritely channel on irc.freenode.net&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;OH!\nAnd also, I can't believe I nearly forgot to say this, but if you want\nto hear more about Spritely in general (not just Goblins), we just\n&lt;a href=&quot;https://fossandcrafts.org/episodes/9-what-is-spritely.html&quot;&gt;released a Spritely-centric episode of FOSS and Crafts&lt;/a&gt;.\nMaybe take a listen!&lt;/p&gt;</summary></entry><entry><title>If you can't tell people anything, can you show them?</title><id>https://dustycloud.org/blog/if-you-cant-tell-people-anything/</id><author><name>Christine Lemmer-Webber</name><email>cwebber@dustycloud.org</email></author><updated>2020-08-29T12:05:00Z</updated><link href=\"https://dustycloud.org/blog/if-you-cant-tell-people-anything/\" rel=\"alternate\" /><summary type=\"html\">&lt;p&gt;The other day I made a\n&lt;a href=&quot;https://octodon.social/@cwebber/104746037303599668&quot;&gt;sadpost on the fediverse&lt;/a&gt;\nthat said: &amp;quot;simultaneously regularly feel like people don't take the\ndirections I'm trying to push seriously enough and that I'm not worth\ntaking seriously&amp;quot;.\n(Similarly, I've also joked that &amp;quot;imposter syndrome and a Cassandra\ncomplex are a hell of a combo&amp;quot; before.)\nI got a number of replies from people, both publicly and privately, and\nthe general summary of most of them are, &amp;quot;We do care!  The stuff you're\nworking on seems really cool and valuable!  I'll admit that I don't\nreally know what it is you're talking about but it sounds important!&amp;quot;\n(Okay, and I just re-read, and it was only a portion of it that even said\nthe latter part, but of course, what do I emphasize in my brain?)\nThat was nice to hear that people care and are enthusiastic, and I did\nfeel much better, but it did also kind of feel like confirmation that\nI'm not getting through to people completely either.&lt;/p&gt;&lt;p&gt;But then &lt;a href=&quot;https://mastodon.sdf.org/@jfred&quot;&gt;jfred&lt;/a&gt; made an\n&lt;a href=&quot;https://mastodon.sdf.org/@jfred/104747234928467298&quot;&gt;interesting reply&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Yeah, that feels familiar. Impostor syndrome hits hard. You're\ndefinitely worth taking seriously though, and the projects you're\nworking on are the most exciting ones I've been following.&lt;/p&gt;&lt;p&gt;As for people not taking the directions you're pushing\nseriously... I've felt the same at work, and I think part of it is\nthat there's only so much one person can do. But also part of it is:\n&lt;a href=&quot;http://habitatchronicles.com/2004/04/you-cant-tell-people-anything/&quot;&gt;http://habitatchronicles.com/2004/04/you-cant-tell-people-anything/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;...it's hard to get ideas across to someone until they can interact\nwith it themselves&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;So first of all, what a nice post!\nSecond of all, it's kind of funny that jfred replied with this because\nout of everyone, jfred is one of the people who's picked up and\nunderstood what's happening in\n&lt;a href=&quot;https://gitlab.com/spritely/goblins&quot;&gt;Spritely Goblins&lt;/a&gt;\nin particular the most, often running or creating demos of things on\ntop of it using things I haven't even documented yet (so definitely\nnot a person I would say isn't taking me seriously or getting what the\nwork is doing).&lt;/p&gt;&lt;p&gt;But third, that link to &lt;a href=&quot;http://habitatchronicles.com/&quot;&gt;Habitat Chronicles&lt;/a&gt;\nis right on point for a few reasons: first of all, Spritely is &lt;em&gt;hugely&lt;/em&gt;\ninfluenced by the various generations of Habitat, from the original\n&lt;a href=&quot;https://www.youtube.com/watch?v=VVpulhO3jyc&quot;&gt;first-ever-graphical-virtual-worlds Habitat&lt;/a&gt;\n(premiering on the Commodore 64 in the mid 1980s, of all things!)\nto &lt;a href=&quot;https://www.youtube.com/watch?v=KNiePoNiyvE&quot;&gt;Electric Communities Habitat&lt;/a&gt;,\nespecially because that's where the &lt;a href=&quot;http://erights.org/&quot;&gt;E programming language&lt;/a&gt;\ncame from, which I think it's safe to say has had a bigger influence on\n&lt;a href=&quot;https://gitlab.com/spritely/goblins&quot;&gt;Spritely Goblins&lt;/a&gt; than anything\n(except maybe\n&lt;a href=&quot;http://mumble.net/~jar/pubs/secureos/secureos.html&quot;&gt;this paper by Jonathan Rees&lt;/a&gt;,\nwhich is the first time I realized that &amp;quot;oh, object capability security\nis just normal programming flow&amp;quot;).\nBut also, that blogpost in particular was so perfect about this subject:\n&lt;a href=&quot;http://habitatchronicles.com/2004/04/you-cant-tell-people-anything/&quot;&gt;You can't tell people anything&lt;/a&gt;...!&lt;/p&gt;&lt;p&gt;In summary, the blogpost isn't saying that people aren't foolishly\nincapable of understanding things, but that people in general don't\nunderstand well by &amp;quot;being explained to&amp;quot;.\nWhat helps people understand is &lt;em&gt;experiences&lt;/em&gt;:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Eventually people can be educated, but what you have to do is find a\nway give them the experience, to put them in the\nsituation. Sometimes this can only happen by making real the thing\nyou are describing, but sometimes by dint of clever artifice you can\nsimulate it.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This really congealed for me and helped me feel justified in an\napproach I've been taking in the Spritely project.\nIn general, up until now I've spent most of my time between two\nstates: coding the backend super-engineering stuff, and coding\ndemos on top of it.\nYou might in the meanwhile see me post technobabble onto\n&lt;a href=&quot;https://octodon.social/@cwebber/&quot;&gt;my fediverse&lt;/a&gt; or\n&lt;a href=&quot;https://twitter.com/dustyweb&quot;&gt;birdsite&lt;/a&gt; accounts, but I'm not in\ngeneral trying too hard to write about the structurally interesting\nthings going on until it comes time to write documentation\n(whether it be for &lt;a href=&quot;https://docs.racket-lang.org/goblins/index.html&quot;&gt;Goblins&lt;/a&gt;,\nor the &lt;a href=&quot;https://gitlab.com/dustyweb/magenc/blob/master/magenc/scribblings/intro.org&quot;&gt;immutable storage&lt;/a&gt;\nand &lt;a href=&quot;https://gitlab.com/spritely/crystal/blob/master/crystal/scribblings/intro.org&quot;&gt;mutable storage&lt;/a&gt; writeups).\nBut in general, the way that I'm convinced people will get it is not\nby talk but by first, demonstration, and second, use.&lt;/p&gt;&lt;p&gt;Aside from the few people that have picked up and played with Goblins\nyet, I don't think I've hit a sufficient amount of &amp;quot;use&amp;quot; yet in Spritely.\nThat's ok, I'm not at that stage yet, and when I am, it'll be fairly clear.\n(ETA: one year from now.)\nSo let's talk about demonstration.&lt;/p&gt;&lt;p&gt;The first demo I wrote was the\n&lt;a href=&quot;https://gitlab.com/spritely/golem/blob/master/README.org&quot;&gt;Golem demo&lt;/a&gt;,\nthat showed roughly that distributed but encrypted storage could be\napplied to the fediverse.\nCute and cool, and that turned the heads of a few fediverse\nimplementers.&lt;/p&gt;&lt;p&gt;But let's face it, the best demo I've done yet was the\n&lt;a href=&quot;https://dustycloud.org/blog/goblins-time-travel-micropreview/&quot;&gt;Terminal Phase time travel demo&lt;/a&gt;.\nAnd it didn't hurt that it had a cool looking animated GIF to go\nwith it:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://dustycloud.org/gfx/goodies/terminal-phase-goblins-time-travel.gif&quot; alt=&quot;Time travel in Spritely Goblins shown through Terminal Phase&quot; /&gt;&lt;/p&gt;&lt;p&gt;Prior to this demo, people would ask me, &amp;quot;What's this Goblins thing?&amp;quot;\nAnd I'd try to say a number of things to them... &amp;quot;oh, its a\ndistributed, transactional, quasi-functional distributed programming\nsystem safe to run in mutually suspicious networks that follows object\ncapability security and the classic actor model in the style of the E\nprogramming language but written in Scheme!&amp;quot;\nAnd I'd watch as their eyes glaze over because\n&lt;em&gt;why wouldn't their eyes glaze over&lt;/em&gt; after a statement like that, and\nthen I'd try to explain the individual pieces but I could tell\nthat the person would be losing interest by then and\n&lt;em&gt;why wouldn't they lose interest&lt;/em&gt; but even realizing that I'd kind of\nfeel despair settling in...&lt;/p&gt;&lt;p&gt;But when you show them a pew pew space lasers game and oh wow why\nis there time travel, &lt;em&gt;how did you add time travel&lt;/em&gt;, is it using\nfunctional reactive programming or something?\n(Usually FRP systems are the only other ones where people have\nseen these kinds of time travel demos.)\nAnd I'd say nope!\nIt doesn't require that.\nMostly it looks like writing just straightahead code but you get\nthis kind of thing for free.\nAnd the person would say, wow!\nSounds really cool!  How much work does it take to add the time\ntravel into the game?\nAnd I just say: no extra work at all.\nI wrote the whole game without testing anything about time travel or\neven thinking about it, then later I just threw a few extra lines to\nwrite the UI to expose the time travel part and it just worked.  And\nthat's when I see peoples' heads explode with wonder and the\nconnections start to be made about what Goblins might be able to do.&lt;/p&gt;&lt;p&gt;But of course, that's only a partial connection for two reasons.\nOne is that the time travel demo above only shows off a small,\nminute part of the features of Goblins.\nAnd actually, the least interesting of them!\nIt doesn't show off the distributed programming or asynchronous\nprogramming parts, it doesn't show off the cool object capability\nsecurity that's safe to run in mutually suspicious networks.\nBut still: it gave a taste that something cool is happening here.\nMaybe Chris hasn't just been blowing a bunch of time since\nfinishing the &lt;a href=&quot;https://www.w3.org/TR/activitypub/&quot;&gt;ActivityPub&lt;/a&gt;\nstandardization process\n&lt;a href=&quot;https://www.w3.org/blog/news/archives/6785&quot;&gt;about two and a half years ago&lt;/a&gt;.\n(Yikes, two and a half years ago!?!)&lt;/p&gt;&lt;p&gt;To complete the rest of that demonstration of the other things\nin the system requires a different kind of demo.\nTerminal Phase was a demo to show off the synchronous half of Goblins,\nbut where Goblins really shines is in the asynchronous, distributed\nprogramming stuff.\nThat's not ready to show off yet, but I'll give you the first taste\nof what's in progress:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://dustycloud.org/misc/goblins-gui-integration.gif&quot; alt=&quot;Goblins chat GUI demo&quot; /&gt;&lt;/p&gt;&lt;p&gt;(Actually a bit more has progressed since I've recorded that GIF,\nmultiple chatrooms and etc, but not really worth bothering to show\noff quite yet.)&lt;/p&gt;&lt;p&gt;Hmm, that's not really all that thrilling.  A chatroom that looks about\nthe same level of featureful, maybe less, than IRC?\nWell, it could be more exciting if you hear that the\n&lt;a href=&quot;https://gitlab.com/spritely/goblin-chat/-/blob/94207fd0f3290f8ec6b087cde167bc78a6329560/chat-backend.rkt&quot;&gt;full chat protocol implementation&lt;/a&gt;\nis only about 250 lines of code, including authenticating users and\nposts by users.\nThat's smaller even than its\n&lt;a href=&quot;https://gitlab.com/spritely/goblin-chat/-/blob/94207fd0f3290f8ec6b087cde167bc78a6329560/goblin-chat-gui.rkt&quot;&gt;corresponding GUI code&lt;/a&gt;,\nwhich is less than 300 lines of code.\nSo the exciting thing there is how much heavy lifting Goblins takes\ncare of for you.&lt;/p&gt;&lt;p&gt;But that's hardly razzle-dazzle exciting.\nIn order for me to hint at the rest of what's happening here, we need\nto put out an asynchronous programming demo that's as or more\ninteresting than the time travel demo.\nAnd I expect to do that.\nI hope soon enough to show off stuff that will make people go,\n&amp;quot;Oh, what's &lt;em&gt;going on&lt;/em&gt; here?&amp;quot;&lt;/p&gt;&lt;p&gt;But even that doesn't complete the connection for people,\nbecause &lt;em&gt;showing&lt;/em&gt; is one thing but to complete the loop, we need\npeople to &lt;em&gt;use&lt;/em&gt; things.\nWe need to get this stuff in the hands of users to play with and\nexperiment themselves.\nI have plans to do that... and not only that, make this stuff\n&lt;em&gt;not&lt;/em&gt; intimidating for newcomers.\nWhen Spritely guides everyday people towards extending Spritely from\ninside of Spritely as it runs, that's when it'll really click.&lt;/p&gt;&lt;p&gt;And once it clicks sufficiently, it'll no longer become exciting,\nbecause people will just come to expect it.\nA good example of that comes from the aforementioned\n&lt;a href=&quot;http://habitatchronicles.com/2004/04/you-cant-tell-people-anything/&quot;&gt;You can't tell people anything&lt;/a&gt; article:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Years ago, before Lucasfilm, I worked for &lt;a href=&quot;http://xanadu.com/&quot;&gt;Project Xanadu&lt;/a&gt;\n(the original hypertext project, way before this newfangled World\nWide Web thing). One of the things I did was travel around the\ncountry trying to evangelize the idea of hypertext. People loved it,\nbut nobody got it. Nobody. We provided lots of explanation. We had\npictures. We had scenarios, little stories that told what it would\nbe like. People would ask astonishing questions, like “who’s going\nto pay to make all those links?” or “why would anyone want to put\ndocuments online?” Alas, many things really must be experienced to\nbe understood. We didn’t have much of an experience to deliver to\nthem though — after all, the whole point of all this evangelizing\nwas to get people to give us money to pay for developing the\nsoftware in the first place! But someone who’s spent even 10 minutes\nusing the Web would never think to ask some of the questions we got\nasked.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Eventually, if we succeed, the ideas in Spritely will no longer seem\nexciting... because people will have internalized and come to expect\nthem.\nJust like hyperlinks on the web today.&lt;/p&gt;&lt;p&gt;But to get there, in the meanwhile, we have to get people interested.\nTo become so successful as to be mundane, we have to first be\nrazzle-dazzle exciting.\nAnd to that end, that's why I take the demo approach to Spritely.\nBecause it's hard to tell someone something... but showing them,\nthat's another matter.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; It's also not true that people don't get what I'm doing, and\nthat's even been reflected materially.\nI've been lucky to be supported over the last few years from a\ncombination of\n&lt;a href=&quot;https://dustycloud.org/blog/samsung-stack-zero-grant/&quot;&gt;a grant from Samsung's Stack Zero&lt;/a&gt;\nand\n&lt;a href=&quot;https://dustycloud.org/blog/spritely-nlnet-grant/&quot;&gt;one from NLNet&lt;/a&gt;,\nnot to mention quite a few &lt;a href=&quot;https://www.patreon.com/cwebber&quot;&gt;donors on Patreon&lt;/a&gt;.\nI do recognize and appreciate that people are supporting me.\nIn some ways receiving this support makes me feel more seriously about the\nneed to demonstrate and prove that what I'm doing is real.\nI hope I am doing and will continue to do a sufficient job, and hope that\nthe upcoming demos contribute to that more materially!&lt;/p&gt;&lt;p&gt;&lt;strong&gt;PPS:&lt;/strong&gt; If, in the meanwhile, you're &lt;em&gt;already&lt;/em&gt; excited, check out\nthe &lt;a href=&quot;https://docs.racket-lang.org/goblins/index.html&quot;&gt;Goblins documentation&lt;/a&gt;.\nThe most exciting stuff is coming in the &lt;em&gt;next&lt;/em&gt; major release\n(which will be out soon), which is when the distributed programming\ntools will be made available to users of the system for the first time.\nBut if you want to get a head start, the code you'll be writing will\nmostly work the same between the distributed and non-distributed\n(as in, distributed across computers/processes) asynchronous stuff,\nso if you start reading the docs today, most of your code will already\njust work on the new stuff once released.\nAnd if you do start playing around, maybe drop by the\n&lt;a href=&quot;https://webchat.freenode.net/?channels=spritely&quot;&gt;#spritely channel on freenode&lt;/a&gt;\nand say hello!&lt;/p&gt;</summary></entry><entry><title>Terminal Phase in Linux Magazine (Polish edition)</title><id>https://dustycloud.org/blog/terminal-phase-in-linux-magazine-pl/</id><author><name>Christine Lemmer-Webber</name><email>cwebber@dustycloud.org</email></author><updated>2020-08-12T12:54:00Z</updated><link href=\"https://dustycloud.org/blog/terminal-phase-in-linux-magazine-pl/\" rel=\"alternate\" /><summary type=\"html\">&lt;p&gt;&lt;img src=&quot;https://dustycloud.org/misc/terminal-phase-linux-magazine-pl.jpg&quot; alt=&quot;Terminal Phase featured in Polish version of Linux Magazine&quot; /&gt;&lt;/p&gt;&lt;p&gt;Hey look at that!\nMy terminal-space-shooter-game &lt;a href=&quot;https://gitlab.com/dustyweb/terminal-phase&quot;&gt;Terminal Phase&lt;/a&gt;\nmade an appearance in the &lt;a href=&quot;https://linux-magazine.pl/&quot;&gt;Polish version of Linux Magazine&lt;/a&gt;.\nI had no idea, but &lt;a href=&quot;https://twitter.com/m_a_j_ch_rz_a_k&quot;&gt;Michal Majchrzak&lt;/a&gt;\nboth tipped me off to it and took the pictures.  (Thank you!)&lt;/p&gt;&lt;p&gt;I don't know Polish but I can see some references to Konami and SHMUP\n(shoot-em-up game).\nThe screenshot they have isn't the one I published, so I guess the\nauthor got it running too... I hope they had fun!&lt;/p&gt;&lt;p&gt;Apparently it appeared in the June 2020 edition:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://dustycloud.org/misc/linux-magazine-pl-june-2020-cropped.jpg&quot; alt=&quot;June 2020 edition of Polish Magazine&quot; /&gt;&lt;/p&gt;&lt;p&gt;I guess because print media coverage is smaller, it feels cooler to\nget covered these days in it in some way?&lt;/p&gt;&lt;p&gt;I wonder if I can find a copy somewhere!&lt;/p&gt;</summary></entry><entry><title>Announcing FOSS and Crafts</title><id>https://dustycloud.org/blog/announcing-foss-and-crafts/</id><author><name>Christine Lemmer-Webber</name><email>cwebber@dustycloud.org</email></author><updated>2020-07-14T11:20:00Z</updated><link href=\"https://dustycloud.org/blog/announcing-foss-and-crafts/\" rel=\"alternate\" /><summary type=\"html\">&lt;p&gt;I wrote recently about\n&lt;a href=&quot;https://dustycloud.org/blog/departing-libre-lounge/&quot;&gt;departing Libre Lounge&lt;/a&gt;\nbut as I said there, &amp;quot;This is probably not the end of me doing\npodcasting, but if I start something up again it'll be a bit different\nin its structure.&amp;quot;&lt;/p&gt;&lt;p&gt;Well!  Morgan and I have co-launched a new podcast called\n&lt;a href=&quot;https://fossandcrafts.org/&quot;&gt;FOSS and Crafts&lt;/a&gt;!\nAs the title implies, it's going to be a fairly interdisciplinary\npodcast... the title says it all fairly nicely I think: &amp;quot;A podcast\nabout free software, free culture, and making things together.&amp;quot;&lt;/p&gt;&lt;p&gt;We already have the &lt;a href=&quot;https://fossandcrafts.org/&quot;&gt;intro episode&lt;/a&gt; out!\nIt's fairly intro-episode'y... meet the hosts, hear about what to expect\nfrom the show, etc etc... but we do talk a bit about some background\nof the name!&lt;/p&gt;&lt;p&gt;But more substantial episodes will be out soon.\nWe have a lot of plans and ideas for the show, and I've got a pretty\ngood setup for editing/publishing now.\nSo if that sounds fun, subscribe, and more stuff should be hitting\nyour ears soon!&lt;/p&gt;&lt;p&gt;(PS: we have a nice little community growing in\n&lt;a href=&quot;https://webchat.freenode.net/?channels=fossandcrafts&quot;&gt;#fossandcrafts on irc.freenode.net&lt;/a&gt;\nif you're into that kind of thing!)&lt;/p&gt;</summary></entry><entry><title>Some updates: CapTP in progress, Datashards, chiptune experiments, etc</title><id>https://dustycloud.org/blog/mid-2020-updates/</id><author><name>Christine Lemmer-Webber</name><email>cwebber@dustycloud.org</email></author><updated>2020-06-30T19:14:00Z</updated><link href=\"https://dustycloud.org/blog/mid-2020-updates/\" rel=\"alternate\" /><summary type=\"html\">&lt;p&gt;(&lt;a href=&quot;https://www.patreon.com/posts/38809138&quot;&gt;Originally written&lt;/a&gt; as a post\n&lt;a href=&quot;https://www.patreon.com/cwebber&quot;&gt;for Patreon donors&lt;/a&gt;.)&lt;/p&gt;&lt;p&gt;Hello... just figured I'd give a fairly brief update.  Since I wrote\nmy last post I've been working hard towards the distributed\nprogramming stuff in Goblins.&lt;/p&gt;&lt;p&gt;In general, this involves implementing a protocol called\n&lt;a href=&quot;http://wiki.erights.org/wiki/CapTP&quot;&gt;CapTP&lt;/a&gt;, which\nis fairly obscure... the idea is generally to apply the same &amp;quot;object\ncapability security&amp;quot; concept that Goblins already follows but on a\nnetworked protocol level.  Probably the most prominent other\nimplementation of CapTP right now is being done by the\n&lt;a href=&quot;https://agoric.com/&quot;&gt;Agoric&lt;/a&gt; folks,\n&lt;a href=&quot;https://github.com/Agoric/agoric-sdk/blob/master/packages/captp/lib/captp.js&quot;&gt;captp.js&lt;/a&gt;.\nI've been in communication with them... could we achieve\ninteroperability between our implementations?  It could be cool, but\nit's too early to tell.  Anyway it's one of those technical areas\nthat's so obscure that I decided to\n&lt;a href=&quot;https://groups.google.com/forum/#!topic/cap-talk/xWv2-J62g-I%5B1-25%5D&quot;&gt;document my progress on the cap-talk mailing list&lt;/a&gt;,\nbut that's becoming the length of a small novel... so I guess, beware\nbefore you try to read that whole thing.  I'm far enough along where\nthe main things work, but not quite everything (CapTP supports such\nwild things as distributed garbage collection...!!!!)&lt;/p&gt;&lt;p&gt;Anyway, in general I don't think that people get too excited by\nhearing &amp;quot;backend progress is happening&amp;quot;; I believe that implementing\nCapTP is even more important than standardizing ActivityPub was in the\nlong run of my life work, but I also am well aware that in general\npeople (including myself!) understand best by seeing an interesting\ndemonstration.  So, I do plan another networked demo, akin to the\n&lt;a href=&quot;https://dustycloud.org/blog/goblins-time-travel-micropreview/&quot;&gt;time-travel Terminal Phase demo&lt;/a&gt;,\nbut I'm not sure just how fancy it will be (yet).  I think I'll have\nmore things to show on that front in 1-2 months.&lt;/p&gt;&lt;p&gt;(Speaking of Goblins and games, I'm putting together a little library\ncalled &lt;a href=&quot;https://gitlab.com/spritely/game-goblin&quot;&gt;Game Goblin&lt;/a&gt;\nto make making games on top of Goblins a bit easier; it isn't quite\nready yet but thought I'd mention it.  It's currently going through\nsome &amp;quot;user testing&amp;quot;.)&lt;/p&gt;&lt;p&gt;More work is happening on the Datashards front; Serge Wroclawski\n(project leader for Datashards; I guess you could say I'm &amp;quot;technical\nengineer&amp;quot;) and I have started assembling more documentation and have\nput together &lt;a href=&quot;https://datashards.net/&quot;&gt;some proto-standards documents&lt;/a&gt;.\n(Warning: WIP WIP WIP!!!)  We are exploring with a standards group\nwhether or not Datashards would be a good fit there, but it's too\nearly to talk about that since the standards group is still figuring\nit out themselves.  Anyway, it's taken up a good chunk of time so I\nfigured it was worth mentioning.&lt;/p&gt;&lt;p&gt;So, more to come, and hopefully demos not too far ahead.&lt;/p&gt;&lt;p&gt;But let's end on a fun note.  In-between all that (and various things\nat home, of course), I have taken a bit of what might resemble\n&amp;quot;downtime&amp;quot; and I'm learning how to make ~chiptunes / &amp;quot;tracker music&amp;quot;\nwith &lt;a href=&quot;https://milkytracker.titandemo.org/&quot;&gt;Milkytracker&lt;/a&gt;, which is\njust a lovely piece of software.  (I've also been learning more about\n&lt;a href=&quot;http://www.drpetter.se/article_sound.html&quot;&gt;sound theory&lt;/a&gt; and have\nbeen figuring out how to compose some of my own samples/&amp;quot;instruments&amp;quot;\nfrom code.)  Let me be clear, &lt;em&gt;I'm not very good at it&lt;/em&gt;, but it's fun\nto learn a new thing.  Here's a &lt;a href=&quot;https://dustycloud.org/misc/dollhouse.flac&quot;&gt;dollhouse piano thing&lt;/a&gt;\n(&lt;a href=&quot;https://dustycloud.org/misc/dollhouse.xm&quot;&gt;XM file&lt;/a&gt;), the\n&lt;a href=&quot;https://dustycloud.org/misc/ecto-house.flac&quot;&gt;start of a haunted video game level&lt;/a&gt;\n(&lt;a href=&quot;https://dustycloud.org/misc/conversations-with-a-computer.xm&quot;&gt;XM file&lt;/a&gt;),\na &lt;a href=&quot;https://dustycloud.org/misc/conversations-with-a-computer.flac&quot;&gt;sound experiment representing someone interacting with a computer&lt;/a&gt;\n(&lt;a href=&quot;https://dustycloud.org/misc/conversations-with-a-computer.xm&quot;&gt;XM file&lt;/a&gt;),\nand the\n&lt;a href=&quot;https://dustycloud.org/misc/siddy-start.xm&quot;&gt;mandatory demonstration that I've figured out how to do C64-like&lt;/a&gt;\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Phase_modulation&quot;&gt;phase modulation&lt;/a&gt; and\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Arpeggio&quot;&gt;arpeggios&lt;/a&gt; (&lt;a href=&quot;https://dustycloud.org/misc/siddy-start.xm&quot;&gt;XM file&lt;/a&gt;).\nIs any of that stuff... &amp;quot;good&amp;quot;?  Not really, all pretty amateurish,\nbut maybe in a few months of off-hour experiments it won't be... so\nmaybe some of my future demos / games won't be quite as quiet!  ;)&lt;/p&gt;&lt;p&gt;Hope everyone's doing ok out there...&lt;/p&gt;</summary></entry><entry><title>Departing Libre Lounge</title><id>https://dustycloud.org/blog/departing-libre-lounge/</id><author><name>Christine Lemmer-Webber</name><email>cwebber@dustycloud.org</email></author><updated>2020-05-13T14:13:00Z</updated><link href=\"https://dustycloud.org/blog/departing-libre-lounge/\" rel=\"alternate\" /><summary type=\"html\">&lt;p&gt;Over the last year and a half I've had a good time presenting on\n&lt;a href=&quot;https://librelounge.org/&quot;&gt;Libre Lounge&lt;/a&gt; with my co-host Serge Wroclawski.\nI'm very proud of the topics we've decided to cover, of which there\nare quite a few good ones in &lt;a href=&quot;https://librelounge.org/archive/&quot;&gt;the archive&lt;/a&gt;,\nand the audience the show has had is just the best.&lt;/p&gt;&lt;p&gt;However, I've decided to depart the show...  Serge and I continue to be\nfriends (and are still working on a number of projects together, such as\n&lt;a href=&quot;https://datashards.net/&quot;&gt;Datashards&lt;/a&gt; and the\n&lt;a href=&quot;https://dustycloud.org/blog/spritely-nlnet-grant/&quot;&gt;recently announced grant&lt;/a&gt;),\nbut in terms of the podcast I think we'd like to take things in\ndifferent creative directions.&lt;/p&gt;&lt;p&gt;This is probably not the end of me doing podcasting, but if I start\nsomething up again it'll be a bit different in its structure... and\nyou can be sure you'll hear about it here and on my\n&lt;a href=&quot;https://octodon.social/@cwebber/&quot;&gt;fediverse account&lt;/a&gt; and over at\n&lt;a href=&quot;https://twitter.com/dustyweb/&quot;&gt;the birdsite&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In the meanwhile, I look forward to continuing to tuning into Libre\nLounge, but as a listener.&lt;/p&gt;&lt;p&gt;Thanks for all the support, Libre Loungers!&lt;/p&gt;</summary></entry><entry><title>Spritely's NLNet grant: Interface Discovery for Distributed Systems</title><id>https://dustycloud.org/blog/spritely-nlnet-grant/</id><author><name>Christine Lemmer-Webber</name><email>cwebber@dustycloud.org</email></author><updated>2020-05-13T13:54:00Z</updated><link href=\"https://dustycloud.org/blog/spritely-nlnet-grant/\" rel=\"alternate\" /><summary type=\"html\">&lt;p&gt;I've been putting off making this blogpost for a while because I kept\nthinking, &amp;quot;I should wait to do it until I finish making some sort of\nwebsite for &lt;a href=&quot;https://dustycloud.org/blog/spritely/&quot;&gt;Spritely&lt;/a&gt; and make\na blogpost there!&amp;quot;\nWhich, in a sense is a completely reasonable thought because right now\nSpritely's only &amp;quot;website&amp;quot; is a\n&lt;a href=&quot;https://gitlab.com/spritely&quot;&gt;loose collection of repositories&lt;/a&gt;,\nbut I'd like something that provides a greater narrative for what\nSpritely is trying to accomplish.\nBut that also kind of feels like a distraction (or maybe I should just\nmake a very minimal website) when there's something important to\nannounce... so I'm just doing it here (where I've been making all the\nother Spritely posts so far anyway).&lt;/p&gt;&lt;p&gt;Spritely is an &lt;a href=&quot;https://nlnet.nl/&quot;&gt;NLnet&lt;/a&gt; (in conjunction with the\nEuropean Commision / Next Generation Internet initative) grant\nrecipient!\nSpecifically, we have received a grant for &amp;quot;Interface Discovery for\nDistributed Systems&amp;quot;!\nI'll be implementing the work alongside Serge Wroclawski.&lt;/p&gt;&lt;p&gt;There are two interesting sub-phrases there: &amp;quot;Interface Discovery&amp;quot;\nand &amp;quot;Distributed Systems&amp;quot;.\nRegarding &amp;quot;distributed systems&amp;quot;, we should really say &amp;quot;mutually\nsuspicious open-world distributed systems&amp;quot;.\nThose extra words change some of the requirements; we have to assume\nwe'll be told about things we don't understand, and we have to assume\nthat many objects we interact with may be opaque to us... they might\nlie about what kind of thing they are.&lt;/p&gt;&lt;p&gt;Choosing how to name interfaces then directly ties into something I\nwrote about here more recently, namely\n&lt;a href=&quot;https://dustycloud.org/blog/content-addressed-vocabulary/&quot;&gt;content addressed vocabulary&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I wrote more ideas and details about the interfaces ideas\n&lt;a href=&quot;https://groups.google.com/forum/#!topic/cap-talk/YBF3QMKgvXs&quot;&gt;email to cap-talk&lt;/a&gt;\nso you can read more there if you like... but I think more details\nabout the interfaces thoughts than that can wait until we publish\na report about it (and publishing a report is baked into the grant).&lt;/p&gt;&lt;p&gt;The other interesting bit though is the &amp;quot;distributed&amp;quot; aspect; in order\nto handle distributed computation and object interaction, we need to\ncorrectly design our protocols.\nThankfully there is a lot of good prior art to work from, usually some\nvariant of &amp;quot;&lt;a href=&quot;http://www.erights.org/elib/distrib/captp/index.html&quot;&gt;CapTP&lt;/a&gt;&amp;quot;\n(Capability Transport Protocol), as implemented in its original form by\n&lt;a href=&quot;http://www.erights.org/&quot;&gt;E&lt;/a&gt;, taking on a bit of a different form in\nthe &lt;a href=&quot;http://waterken.sourceforge.net/&quot;&gt;Waterken&lt;/a&gt; project, adapted in\n&lt;a href=&quot;https://capnproto.org/&quot;&gt;Cap'N Proto&lt;/a&gt;,\nas well as with the new work happening over at &lt;a href=&quot;https://agoric.com/&quot;&gt;Agoric&lt;/a&gt;.\nEach of these variants of the core CapTP ideas have tried to tackle some\ndifferent use cases, and &lt;a href=&quot;https://docs.racket-lang.org/goblins/index.html&quot;&gt;Goblins&lt;/a&gt;\nhas its own needs to be covered.\nIs there a possibility of convergence?\nPossibly... I am trying to understand the work of and communicate with\nthe folks over at Agoric but I think it's a bit too early to be\nconclusive about anything.\nRegardless, it'll be a major milestone once Spritely Goblins is able\nto actually live up to its promise of distributed computation, and work\non this is basically the next step to proceed on.&lt;/p&gt;&lt;p&gt;When I first &lt;a href=&quot;https://dustycloud.org/blog/spritely/&quot;&gt;announced Spritely&lt;/a&gt;\nabout a year and a half ago I included a section that said\n&amp;quot;Who's going to pay for all this?&amp;quot; to which I then said,\n&amp;quot;I don't really have a funding plan, so I guess this is kind of a\nnon-answer. However, I do have a\n&lt;a href=&quot;https://www.patreon.com/cwebber&quot;&gt;Patreon account&lt;/a&gt; you could donate to.&amp;quot;\nTo be honest, I was fairly nervous about it... so I want to express my\nsincere and direct appreciation to &lt;a href=&quot;https://nlnet.nl/&quot;&gt;NLnet&lt;/a&gt; alongside\nthe European Commission / Next Generation Internet Initiative, along with\n&lt;a href=&quot;https://samsungnext.com/whats-next/category/podcasts/decentralization-samsung-next-stack-zero-grant-recipients/&quot;&gt;Samsung Stack Zero&lt;/a&gt;,\nand all the folks donating on &lt;a href=&quot;https://www.patreon.com/cwebber&quot;&gt;Patreon&lt;/a&gt;\nand &lt;a href=&quot;https://liberapay.com/cwebber/&quot;&gt;Liberapay&lt;/a&gt;.\nWith all the above, and especially the new grant from NLnet, I\nshould have enough funding to continue working on Spritely through\na large portion of 2021.\nI am determined to make good on the support I've received, and am\nlooking forward to put out more interesting demonstrations of this\ntechnology over the next few months.&lt;/p&gt;</summary></entry><entry><title>What should fit in a FOSS license?</title><id>https://dustycloud.org/blog/what-should-fit-in-a-foss-license/</id><author><name>Christine Lemmer-Webber</name><email>cwebber@dustycloud.org</email></author><updated>2020-03-09T17:07:00Z</updated><link href=\"https://dustycloud.org/blog/what-should-fit-in-a-foss-license/\" rel=\"alternate\" /><summary type=\"html\">&lt;p&gt;&lt;em&gt;Originally sent in &lt;a href=&quot;https://lists.opensource.org/pipermail/license-discuss_lists.opensource.org/2020-March/021466.html&quot;&gt;an email to the OSI license-discuss mailing list&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;What terms belong in a free and open source software license?  There\nhas been a lot of debate about this lately, especially as many of us\nare interested in expanding the role we see that we play in terms of\nuser freedom issues.  I am amongst those people that believe that FOSS\nis a movement thats importance is best understood not on its own, but\non the effects that it (or the lack of it) has on society.  The\npurpose of all this work is to advance user freedom and human rights\nwith respect to computing.&lt;/p&gt;&lt;p&gt;I also believe there are other critical issues that FOSS has a role to\nplay in: diversity issues (both within our own movement and empowering\npeople in their everyday lives) are one, environmental issues (the\nintersection of our movement with the right-to-repair movement is a good\nexample) are another.  I also agree that the trend towards &amp;quot;cloud\ncomputing&amp;quot; companies which can more or less entrap users in their\nservices is a major concern, as are privacy concerns.&lt;/p&gt;&lt;p&gt;Given all the above, what should we do?  What kinds of terms belong in\nFOSS licenses, especially given all our goals above?&lt;/p&gt;&lt;p&gt;First, I would like to say that I think that many people in the FOSS\nworld, for good reason, spend a lot of time thinking about licenses.\nThis is good, and impressive; few other communities have as much legal\nliteracy distributed even amongst their non-lawyer population as ours.\nAnd there's no doubt that FOSS licenses play a critical role... let's\nacknowledge from the outset that a conventionally proprietary license\nhas a damning effect on the agency of users.&lt;/p&gt;&lt;p&gt;However, I also believe that user freedom can only be achieved via a\nmulti-layered approach.  We cannot provide privacy by merely adding\nprivacy-requirements terms to a license, for instance; encryption is key\nto our success.  I am also a supporter of code of conducts and believe\nthey are important/effective (I know not everyone does; I don't care for\nthis to be a CoC debate, thanks), but I believe that they've also been\nvery effective and successful checked in as CODE-OF-CONDUCT.txt\n&lt;em&gt;alongside&lt;/em&gt; the traditional COPYING.txt/LICENSE.txt.  This is a good\nexample of a multi-layered approach working, in my view.&lt;/p&gt;&lt;p&gt;So acknowledging that, which problems should we try to solve at which\nlayers?  Or, more importantly, which problems should we try to solve in\nFOSS licenses?&lt;/p&gt;&lt;p&gt;Here is my answer: the role of FOSS licenses is to undo the damage that\ncopyright, patents, and related intellectual-restriction laws have done\nwhen applied to software.  That is what should be in the scope of our\n&lt;em&gt;licenses&lt;/em&gt;.  There are other problems we need to solve too if we truly\ncare about user freedom and human rights, but for those we will need to\ntake a multi-layered approach.&lt;/p&gt;&lt;p&gt;To understand why this is, let's rewind time.  What is the &amp;quot;original\nsin&amp;quot; that lead to the rise proprietary software, and thus the need to\ndistinguish FOSS as a separate concept and entity?  In my view, it's the\ndecision to make software copyrightable... and then, adding similar\n&amp;quot;state-enforced intellectual restrictions&amp;quot; categories, such as patents\nor anti-jailbreaking or anti-reverse-engineering laws.&lt;/p&gt;&lt;p&gt;It has been traditional FOSS philosophy to emphasize these as entirely\ndifferent systems, though I think Van Lindberg put it well:&lt;/p&gt;&lt;p&gt;Even from these brief descriptions, it should be obvious that the term\n&amp;quot;intellectual property&amp;quot; encompasses a number of divergent and even\ncontradictory bodies of law.  [...] intellectual property isn't really\nanalagous to just one program.  Rather, it is more like four (or more)\nprograms all possibly acting concurrently on the same source\nmaterials.  The various IP &amp;quot;programs&amp;quot; all work differently and lead to\ndifferent conclusions.  It is more accurate, in fact, to speak of\n&amp;quot;copyright law&amp;quot; or &amp;quot;patent law&amp;quot; rather than a single overarching &amp;quot;IP\nlaw.&amp;quot;  It is only slightly tongue in cheek to say that there is an\nintellectual property &amp;quot;office suite&amp;quot; running on the &amp;quot;operating system&amp;quot;\nof US law.\n-- Van Lindberg, Intellectual Property and Open Source (p.5)&lt;/p&gt;&lt;p&gt;So then, as unfortunate as the term &amp;quot;intellectual property&amp;quot; may be, we\ndo have a suite of state-enforced intellectual restriction tools.  They\nnow apply to software... but as a thought experiment, if we could rewind\ntime and choose between a timeline where such laws did not apply to\nsoftware vs a time where they did, which would have a better effect on\nuser freedom?  Which one would most advance FOSS goals?&lt;/p&gt;&lt;p&gt;To ask the question is to know the answer.  But of course, we cannot\nreverse time, so the purpose of this thought experiment is to indicate\nthe role of FOSS licenses: to use our own powers granted under the scope\nof those licenses to undo their damage.&lt;/p&gt;&lt;p&gt;Perhaps you'll already agree with this, but you might say, &amp;quot;Well, but we\nhave all these other problems we need to solve too though... since\nsoftware is so important in our society today, trying to solve these\nother problems inside of our licenses, even if they aren't about\nreversing the power of the intellectual-restriction-office-suite, may be\neffective!&amp;quot;&lt;/p&gt;&lt;p&gt;The first objection to that would be, &amp;quot;well, but it does appear that it\nmakes us addicted in a way to that very suite of laws we are trying to\nundo the damage of.&amp;quot;  But maybe you could shrug that off... these issues\nare too important!  And I agree the issues are important, but again, I\nam arguing a multi-layered approach.&lt;/p&gt;&lt;p&gt;To better illustrate, let me propose a license.  I actually considered\ndrafting this into real license text and trying to push it all the way\nthrough the license-review process.  I thought that doing so would be an\ninteresting exercise for everyone.  Maybe I still should.  But for now,\nlet me give you the scope of the idea.  Ready?&lt;/p&gt;&lt;p&gt;&amp;quot;The Disposable Plastic Prevention Public License&amp;quot;.  This is a real\nissue I care about, a lot!  I am very afraid that there is a dramatic\nchance that life on earth will be choked out within the next number of\ndecades by just how much non-degradeable disposable plastic we are\nchurning out.  Thus it seems entirely appropriate to put it in a\nlicense, correct?  Here are some ideas for terms:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;You cannot use this license if you are responsible for a significant\nproduction of disposable plastics.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;You must make a commitment to reduction in your use of disposable\nplastics.  This includes a commitment to reductions set out by (a UN\ncommittee?  Haven't checked, I bet someone has done the research and\nset target goals).&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;If you, or a partner organization, are found to be lobbying against\nlaws to eliminate disposable plastics, your grant of this license is\nterminated.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;What do you think?  Should I submit it to license-review?  Maybe I\nshould.  Or, if someone else wants to sumbit it, I'll enthusiastically\nhelp you draft the text... I do think the discussion would be\nilluminating!&lt;/p&gt;&lt;p&gt;Personally though, I'll admit that something seems wrong about this, and\nit isn't the issue... the issue is one I actually care about &lt;em&gt;a lot&lt;/em&gt;,\none that keeps me up at night.  Does it belong in a license?  I don't\nthink that it does.  This both tries to both fix problems via the same\nstructures that we are trying to undo problems with and introduces\nlicense compatibility headaches.  It's trying to fight an important\nissue on the wrong layer.&lt;/p&gt;&lt;p&gt;It is a FOSS &lt;em&gt;issue&lt;/em&gt; though, in an intersectional sense!  And there\nare major things we can do about it.  We can support the fight of the\nright-to-repair movements (which, as it turns out, is a movement also\nhampered by these intellectual restriction laws).  We can try to design\nour software in such a way that it can run on older hardware and keep it\nuseful.  We can support projects like the MNT Reform, which aims to\nbuild a completely user-repairable laptop, and thus push back against\nplanned obsolescence.  There are things we can, and &lt;em&gt;must&lt;/em&gt;, do that are\nnot in the license itself.&lt;/p&gt;&lt;p&gt;I am not saying that the only kind of thing that can happen in a FOSS\nlicense is to simply waive all rights.  Indeed I see copyleft as a valid\nway to turn the weapons of the system against itself in many cases (and\nthere are a lot of cases, especially when I am trying to push standards\nand concepts, where I believe a more lax/permissive approach is better).\nOf course, it is possible to get addicted to those things too: if we\ncould go back in our time machine and prevent these intellectual\nrestrictions laws from taking place, source requirements in copyleft\nlicenses wouldn't be enforceable.  While I see source requirements as a\nvalid way to turn the teeth of the system against itself, in that\nhypothetical future, would I be so addicted to them that I'd prefer that\nsoftware copyright continue just so I could keep them?  No, that seems\nsilly.  But we also aren't in that universe, and are unlikely to enter\nthat universe anytime soon, so I think this is an acceptable reversal of\nthe mechanisms of destructive state-run intellectual restriction machine\nagainst itself for now.  But it also indicates maybe a kind of maxima.&lt;/p&gt;&lt;p&gt;But it's easy to get fixated on those kinds of things.  How clever can\nwe be in our licenses?  And I'd argue: minimally clever.  Because we\nhave a lot of other fights to make.&lt;/p&gt;&lt;p&gt;In my view, I see a lot of needs in this world, and the FOSS world has a\nlot of work to do... and not just in licensing, on many layers.\nEncryption for privacy, diversity initiatives like Outreachy, code of\nconducts, software that runs over peer to peer networks rather than in\nthe traditional client-server model, repairable and maintainable\nhardware, thought in terms of the environmental impact of our\nwork... all of these things are critical things in my view.&lt;/p&gt;&lt;p&gt;But FOSS licenses need not, and should not, try to take on all of them.\nFOSS licenses should do the thing they are appropriate to do: to pave a\npath for collaboration and to undo the damage of the &amp;quot;intellectual\nrestriction office suite&amp;quot;.  As for the other things, we must do them\ntoo... our work will not be done, meaningful, or sufficient if we do not\ntake them on.  But we should do them hand-in-hand, as a multi-layered\napproach.&lt;/p&gt;</summary></entry><entry><title>Terminal Phase v1.1 and Spritely Goblins v0.6 releases!</title><id>https://dustycloud.org/blog/terminal-phase-1/</id><author><name>Christine Lemmer-Webber</name><email>cwebber@dustycloud.org</email></author><updated>2020-03-05T10:50:00Z</updated><link href=\"https://dustycloud.org/blog/terminal-phase-1/\" rel=\"alternate\" /><summary type=\"html\">&lt;p&gt;Hello all!\nI just did a brand new release of both:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://gitlab.com/dustyweb/terminal-phase/-/tree/v1.1&quot;&gt;Terminal Phase v1.1!&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gitlab.com/spritely/goblins/-/tree/v0.6&quot;&gt;Goblins v0.6!&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So some highlights from each.&lt;/p&gt;&lt;h1&gt;Terminal Phase&lt;/h1&gt;&lt;p&gt;Okay, this is flashier, even if less important than Goblins.\nBut the main thing is that I added the\n&lt;a href=&quot;https://dustycloud.org/blog/goblins-time-travel-micropreview/&quot;&gt;time travel debugging&lt;/a&gt;\nfeature, which is so flashy I feel the need to show that gif again here:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://dustycloud.org/gfx/goodies/terminal-phase-goblins-time-travel.gif&quot; alt=&quot;Time travel in Spritely Goblins shown through Terminal Phase&quot; /&gt;&lt;/p&gt;&lt;p&gt;Aside from time travel, there aren't many new features, though I plan\non adding some in the next week (probably powerups or a boss fight),\nso another release should be not far away.&lt;/p&gt;&lt;p&gt;And oh yeah, since it's a new release, now is a good time to thank the\ncurrent &lt;a href=&quot;https://www.patreon.com/cwebber&quot;&gt;supporters&lt;/a&gt;:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://dustycloud.org/gfx/goodies/terminal-phase-credits-2020-03-05.gif&quot; alt=&quot;Terminal Phase Credits&quot; /&gt;&lt;/p&gt;&lt;p&gt;But yeah, the main thing that was done here is that Terminal Phase was\nupdated for the new release of\n&lt;a href=&quot;https://gitlab.com/spritely/goblins&quot;&gt;Goblins&lt;/a&gt;, so let's talk about that!&lt;/p&gt;&lt;h1&gt;Goblins&lt;/h1&gt;&lt;p&gt;For those who aren't aware, &lt;a href=&quot;https://gitlab.com/spritely/goblins&quot;&gt;Spritely Goblins&lt;/a&gt;\nis a transactional actor model library for &lt;a href=&quot;https://racket-lang.org/&quot;&gt;Racket&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;v0.6 has resulted in a number of changes in semantics.&lt;/p&gt;&lt;p&gt;But the big deal is that\n&lt;a href=&quot;https://docs.racket-lang.org/goblins/&quot;&gt;Goblins finally has decent documentation&lt;/a&gt;,\nincluding a fairly &lt;a href=&quot;https://docs.racket-lang.org/goblins/tutorial.html&quot;&gt;in-depth tutorial&lt;/a&gt;\nand &lt;a href=&quot;https://docs.racket-lang.org/goblins/api.html&quot;&gt;documentation about the API&lt;/a&gt;.\nI've even documented how you, in your own programs, can\n&lt;a href=&quot;https://docs.racket-lang.org/goblins/tutorial.html#%28part._.Time_travel__snapshotting_and_restoring%29&quot;&gt;play with Goblins' time travel features&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;So, does this mean you should start using it?\nWell, it's still in alpha, and the most exciting feature (networked,\ndistributed programming) is still on its way.\nBut I think it's quite nice to use already (and I'm using it for Terminal Phase).&lt;/p&gt;&lt;p&gt;Anyway, that's about it... I plan on having a new video explaining\nmore about how Goblins works out in the next few days, so I'll\nannounce that when it happens.&lt;/p&gt;&lt;p&gt;If you are finding this work interesting, a reminder that this work is\npowered by\n&lt;a href=&quot;https://www.patreon.com/cwebber&quot;&gt;people like you&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In the meanwhile, hope you enjoy the new releases!&lt;/p&gt;</summary></entry><entry><title>Content Addressed Vocabulary</title><id>https://dustycloud.org/blog/content-addressed-vocabulary/</id><author><name>Christine Lemmer-Webber</name><email>cwebber@dustycloud.org</email></author><updated>2020-02-26T19:23:00Z</updated><link href=\"https://dustycloud.org/blog/content-addressed-vocabulary/\" rel=\"alternate\" /><summary type=\"html\">&lt;p&gt;How can systems communicate and share meaning?\nCommunication within systems is preceded by a form of meta-communication;\nwe must have a sense that we mean the same things by the terms we use\nbefore we can even use them.&lt;/p&gt;&lt;p&gt;This is challenging enough for humans who must share meaning, but we\ncan resolve ambiguities with context clues from a surrounding narrative.\nMachines, in general, need a context more explicitly laid out for them,\nwith as little ambiguity as possible.&lt;/p&gt;&lt;p&gt;Standards authors of open-world systems have long struggled with such\nsystems and have come up with some reasonable systems; unfortunately\nthese also suffer from several pitfalls.\nWith minimal (or sometimes none at all) adjustment to our tooling,\nI propose a change in how we manage ontologies.&lt;/p&gt;&lt;h1&gt;How we deal with ambiguous terms today&lt;/h1&gt;&lt;p&gt;Consider &lt;a href=&quot;https://www.w3.org/TR/activitystreams-vocabulary/#dfn-note&quot;&gt;Note&lt;/a&gt;,\na seemingly simple term in\n&lt;a href=&quot;https://www.w3.org/TR/activitystreams-vocabulary/&quot;&gt;ActivityStreams&lt;/a&gt;,\nthe vocabulary used by &lt;a href=&quot;https://www.w3.org/TR/activitypub/&quot;&gt;ActivityPub&lt;/a&gt;.\nThe meaning of &lt;code&gt;Note&lt;/code&gt;, as described by the ActivityStreams vocabulary,\nseems simple enough:\n&lt;code&gt;Represents a short written work typically less than a single paragraph in length.&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Here is how an ActivityStreams usage of Note might look (a bit\nsimplified from what it would probably look like in practice):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  {&amp;quot;@context&amp;quot;: &amp;quot;https://www.w3.org/ns/activitystreams&amp;quot;,\n   &amp;quot;@type&amp;quot;: &amp;quot;Note&amp;quot;,\n   &amp;quot;content&amp;quot;: &amp;quot;Would you read me a bedtime story about the great ontology wars?&amp;quot;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What's that &lt;code&gt;@context&lt;/code&gt; thing?\nThis is some &lt;a href=&quot;https://www.w3.org/TR/json-ld/&quot;&gt;JSON-LD&lt;/a&gt; thing, which\ntries to be &amp;quot;more exact&amp;quot; about what &lt;code&gt;Note&lt;/code&gt; we must be talking about.\nIt does so by mapping &lt;code&gt;Note&lt;/code&gt; to &lt;code&gt;https://www.w3.org/ns/activitystreams#Note&lt;/code&gt;\nby something like the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  {&amp;quot;as&amp;quot;: &amp;quot;https://www.w3.org/ns/activitystreams#&amp;quot;,\n   &amp;quot;Note&amp;quot;: &amp;quot;as:Note&amp;quot;,\n   &amp;quot;content&amp;quot;: &amp;quot;as:content&amp;quot;,\n   ...}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The choice to use JSON-LD has been semi-controversial in ActivityPub\nland; historically there was some debate about whether or not we\nneeded to be &amp;quot;more exact&amp;quot; at all as to what terms mean.\nThis post really isn't about JSON-LD as much as it is the more general\ntopic of vocabularies and vocabulary mapping systems.\nThere are other concerns people raise about JSON-LD, usually around\nthe tooling... that's not the scope of this post.\nThis blogpost could as easily apply to XML or Turtle or whatever;\nthe protocol I've worked on just happens to use JSON-LD to do that,\nso I've used it as my illustration.&lt;/p&gt;&lt;p&gt;That said, the ActivityPub spec tries to make things as simple as\npossible for the default case of ActivityPub usage by saying that the\nActivityStreams context is implied, so that if you're not doing anything\ncomplicated, so:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  {&amp;quot;@type&amp;quot;: &amp;quot;Note&amp;quot;,\n   &amp;quot;content&amp;quot;: &amp;quot;Would you read me a bedtime story about the great ontology wars?&amp;quot;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;... is really the same as the first example.&lt;/p&gt;&lt;p&gt;So okay, probably everyone can guess what &lt;code&gt;Note&lt;/code&gt; means, but what about\n&lt;code&gt;sensitive&lt;/code&gt;?\nWhat the heck is that?\nIt doesn't appear in the ActivityStreams vocabulary; it kind of\nimplies something along the lines of content-warning type behavior, like\n&amp;quot;this content may be considered sensitive&amp;quot; by some users, but how would\nyou guess that just by the term?\nThis is an &lt;em&gt;extension&lt;/em&gt;, and it lives at &lt;code&gt;http://joinmastodon.org/ns#sensitive&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;So maybe if we were going to use it (and if we inline our context) it\nmight look like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  {&amp;quot;@context&amp;quot;: {&amp;quot;as&amp;quot;: &amp;quot;https://www.w3.org/ns/activitystreams#&amp;quot;,\n                &amp;quot;toot&amp;quot;: &amp;quot;http://joinmastodon.org/ns#&amp;quot;,\n                &amp;quot;Note&amp;quot;: &amp;quot;as:Note&amp;quot;,\n                &amp;quot;content&amp;quot;: &amp;quot;as:content&amp;quot;,\n                &amp;quot;sensitive&amp;quot;: &amp;quot;toot:sensitive&amp;quot;},\n   &amp;quot;@type&amp;quot;: &amp;quot;Note&amp;quot;,\n   &amp;quot;content&amp;quot;: &amp;quot;Would you read me a bedtime story about the great ontology wars?&amp;quot;,\n   &amp;quot;sensitive&amp;quot;: true}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(I mean, the Great Ontology Wars are a sensitive topic for some.)&lt;/p&gt;&lt;p&gt;The choice of JSON-LD in ActivityPub is controversial for various\nreasons.\nBut it turns out what isn't really controversial anymore is whether we\nneed some way of being more exact about the way we speak about terms...\nthose who used to complain about that mostly now agree (disagreements\nthen surround what tooling need to be used to do so (not in scope of this\npost), and namespace governance (in scope of this post)).&lt;/p&gt;&lt;p&gt;Maybe you feel like, having heard what &lt;code&gt;sensitive&lt;/code&gt; and &lt;code&gt;Note&lt;/code&gt; mean,\nthese are the obvious definitions.\nBut consider that &lt;code&gt;Note&lt;/code&gt; itself could have meant something very\ndifferent.\nAre we talking about a short mostly-textual post (probably on a microblog),\nas ActivityStreams does?\nAre we talking about a musical note?\nAre we instructing someone to take note of something, as an action (or\nyes, activity)?&lt;/p&gt;&lt;p&gt;So terms really are ambiguous, and in a decentralized but extensible\nsystem with\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Open-world_assumption&quot;&gt;open world assumptions&lt;/a&gt;,\nwe are eventually going to result in conflicts.\nThe choice to map our vocabulary to\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Identifier&quot;&gt;URIs&lt;/a&gt;\nis actually a very reasonable way to reduce ambiguity.\nUnfortunately, the choice to map them to namespaces and to &lt;em&gt;live&lt;/em&gt; URIs\n(a-la &lt;code&gt;http(s):&lt;/code&gt; URIs), is a mistake that will eventually bite us\n(and doubly so for JSON-LD contexts).&lt;/p&gt;&lt;h1&gt;Problems appear&lt;/h1&gt;&lt;p&gt;The first problem with choosing to put our terminology URIs at HTTP(S)\nURIs is that it assumes that those vocabularies will remain alive.\nPerhaps popular ones shall, but really the modern web rots all the time.\nSoon enough, many ontologies will eventually be replaced by Viagra ads.&lt;/p&gt;&lt;p&gt;The problem is dramatically worse for json-ld contexts (and similar\ndocuments such as XML DTDs): these are the very documents by which we\nmap terms to their fully defined meanings.\nServers get hammered by people looking up contextual mappings.\nThis is no good already.\nIt gets even worse when such documents add (or otherwise amend) their\nterminology mappings; old documents may suddenly mean different things!&lt;/p&gt;&lt;p&gt;(I'd be remiss to not note here that vocabulary namespaces and json-ld\ncontexts are frequently the same URIs and yet frequently not the same\nthing.\nStill, they share a lot of the same problems and solutions in terms of\nliveness.)&lt;/p&gt;&lt;p&gt;Furthermore, both the choice to put terms in namespaces and the choice\nto have common contextual URIs that can change creates governance\nproblems.&lt;/p&gt;&lt;p&gt;I know this from personal experience (and by that I mean many painful\nhours of my life wasted that I can never get back).\nConsider &lt;code&gt;sensitive&lt;/code&gt; above.\nThe Mastodon folks created their own namespace, as previously mentioned,\nbut they didn't really &lt;em&gt;want to&lt;/em&gt;.\nThe good news was that the\n&lt;a href=&quot;https://www.w3.org/wiki/SocialCG&quot;&gt;Social Web Community Group&lt;/a&gt;\nwas given permission to both extend the ActivityStreams vocabulary and\nthe official ActivityStreams context.&lt;/p&gt;&lt;p&gt;Despite the entire group agreeing that it made sense to make &lt;code&gt;sensitive&lt;/code&gt;\nofficial in some way (which does not mean everyone agreed that it was a\ngood term, just that it was in enough usage that we should make it more\neasily widely available), the SocialCG got tied up for months and months\nin meetings being unable to make progress about &lt;em&gt;how&lt;/em&gt; to do so:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Should we add &lt;code&gt;sensitive&lt;/code&gt; to the ActivityStreams namespace, or leave\nit in the old namespace but &amp;quot;officially sanction&amp;quot; it?&lt;/li&gt;&lt;li&gt;What is the migration path for software using the previous term URI?&lt;/li&gt;&lt;li&gt;How often should we do this?  What is the governance process for\nincubating a &lt;em&gt;new&lt;/em&gt; term?  Should it happen in a separate namespace\nfirst and then get &amp;quot;pulled in&amp;quot; later?&lt;/li&gt;&lt;li&gt;What would happen if we didn't for terms like these, and the sites\nwent down?&lt;/li&gt;&lt;li&gt;If we also update the json-ld context, what happens for documents\nthat already had &lt;code&gt;sensitive&lt;/code&gt; in them meaning either the old\nURI or a new one?  This can have significant impact on normalization\nfor signature verification.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The group met for months about all the topics above and came to no\nconclusions.\nEventually we decided that no consensus could be reached, so instead\nno action was taken at all.\nWhat a disappointment.&lt;/p&gt;&lt;p&gt;In general, this seems to be common.\nIronically, it leads to otherwise nice decentralized designs for\nvocabularies eventually ending up centralized in something like\n&lt;a href=&quot;https://schema.org/&quot;&gt;schema.org&lt;/a&gt; anyway.&lt;/p&gt;&lt;h1&gt;Content addressed vocabularies (and contexts) are the answer&lt;/h1&gt;&lt;p&gt;My friend Sandro Hawke offered a solution, which I initially rejected\nas terrible, decided upon further consideration was brilliant, and\nfully embraced.\nThen Sandro explained to me that I had totally misunderstood him,\nand that he meant &lt;a href=&quot;https://sandhawke.github.io/mov/&quot;&gt;something different&lt;/a&gt;.\nIt turns out that I actually think my initial misunderstanding was the\nright answer.&lt;/p&gt;&lt;p&gt;Here's what I understood Sandro to say:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The name we choose for a term doesn't matter that much.\nWhat really matters is the paragraph or so of specification language\nthat describes the term.\nIf two implementations refer to the same specification text, they\nmean the same thing.\nSo just use that as the description.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Once I (incorrectly) came to realize that this could mean naming via\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Content-addressable_storage&quot;&gt;content addressing&lt;/a&gt;,\nI latched onto the idea.\nOf course!\nWe had merely selected the wrong edge of\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Zooko%27s_triangle&quot;&gt;Zooko's triangle&lt;/a&gt;.\nBut we know how to fix that sort of thing.&lt;/p&gt;&lt;p&gt;Here's how it works.\nLet's remember the specification text for Note above:\n&lt;code&gt;Represents a short written work typically less than a single paragraph in length.&lt;/code&gt;\nLet's hash that (along with a &amp;quot;recommendation&amp;quot; prefix that a user might choose\nto bind this to the term &lt;code&gt;Note&lt;/code&gt;, though this is just a recommendation):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ echo &amp;quot;Note: Represents a short written work typically less than a single paragraph in length.&amp;quot; | sha256sum\n3e1de3b56d2dc1bee7313963462691f9a8f46b068557b75e0e0d14c0994eddc6&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So if we were defining &lt;code&gt;Note&lt;/code&gt; via content-addressing, we instead would\nhave defined it as\n&lt;code&gt;urn:sha256:3e1de3b56d2dc1bee7313963462691f9a8f46b068557b75e0e0d14c0994eddc6&lt;/code&gt;.\nThis is unambiguous enough to avoid collisions with other uses of the\nword &amp;quot;Note&amp;quot;.\nBut note that it doesn't require any servers staying up.\nIt also doesn't have any namespace governance quagmire, because there\nis no namespace.\nUpdates can be handled the usual way, via errata (translations can be\nhandled similarly), and standards organizations can still publish such\nthings... but it is important that the original term remain content-addressed\nand immutable.\n(Hash migration is left as an exercise for the user, with a hint that\nthe solution is similar to that with errata.)&lt;/p&gt;&lt;p&gt;Anyway, our post might end up looking in the end like this instead:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  {&amp;quot;@context&amp;quot;: {&amp;quot;Note&amp;quot;: &amp;quot;urn:sha256:3e1de3b56d2dc1bee7313963462691f9a8f46b068557b75e0e0d14c0994eddc6&amp;quot;,\n                &amp;quot;content&amp;quot;: &amp;quot;urn:sha256:57dc44a1cdcbb7aa976a65a858b4d349ad6110d58d9d546650ce2b0e2b1048e4&amp;quot;,\n                &amp;quot;sensitive&amp;quot;: &amp;quot;urn:sha256:81d98cf83fcf733400ad5d2a25495feeea47f287193a53a9722f4cb025da88f1&amp;quot;},\n   &amp;quot;@type&amp;quot;: &amp;quot;Note&amp;quot;,\n   &amp;quot;content&amp;quot;: &amp;quot;Would you read me a bedtime story about the great ontology wars?&amp;quot;,\n   &amp;quot;sensitive&amp;quot;: true}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I'll note very briefly that content-addressing is also the answer for\nJSON-LD contexts.\nIf something like &lt;a href=&quot;https://datashards.net/&quot;&gt;Datashards&lt;/a&gt; or\n&lt;a href=&quot;https://ipfs.io/&quot;&gt;IPFS&lt;/a&gt; were used to host json-ld contexts, each post\ncould link to the exact immutable content-addressed context it was\nintended to be used with.\nServers that use such contexts can &amp;quot;pin&amp;quot; them to keep them available,\navoiding a single point of failure (or bandwidth bottleneck).&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  {&amp;quot;@context&amp;quot;: &amp;quot;idsc:p0.JLnUcJN4R1KNvSXm9Ut3Tmg7WfXAKEOx47p01Pk_Htw.2_rCdtnEha1RpD_qyzxhFIjUvLj7crIbzpmzWei5xRk&amp;quot;,\n   &amp;quot;@type&amp;quot;: &amp;quot;Note&amp;quot;,\n   &amp;quot;content&amp;quot;: &amp;quot;Would you read me a bedtime story about the great ontology wars?&amp;quot;,\n   &amp;quot;sensitive&amp;quot;: true}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As one other side-note, I'll also observe that even though the fully\nexpanded version of the above message is:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;  {&amp;quot;@type&amp;quot;: &amp;quot;urn:sha256:3e1de3b56d2dc1bee7313963462691f9a8f46b068557b75e0e0d14c0994eddc6&amp;quot;,\n   &amp;quot;urn:sha256:57dc44a1cdcbb7aa976a65a858b4d349ad6110d58d9d546650ce2b0e2b1048e4&amp;quot;: &amp;quot;Would you read me a bedtime story about the great ontology wars?&amp;quot;,\n   &amp;quot;urn:sha256:81d98cf83fcf733400ad5d2a25495feeea47f287193a53a9722f4cb025da88f1&amp;quot;: true}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;... we never needed to look at it that way because json-ld contexts\n(and systems like them) are actually\n&lt;a href=&quot;https://github.com/cwebber/rebooting-the-web-of-trust-spring2018/blob/petnames/draft-documents/petnames.md&quot;&gt;petname systems&lt;/a&gt;.&lt;/p&gt;&lt;h1&gt;Conclusions (and non-conclusions)&lt;/h1&gt;&lt;p&gt;Let me clarify a claim I'm not making: we don't need to throw away the\nold terms for systems like ActivityStreams that are already well\nunderstood.\nHowever, going forward I do think that using content-addressing of new\nterms is a good idea.\nAnd in the long run, I think content-addressing of json-ld contexts\nand any documents like them is an absolute must (when they aren't\ninlined, anyway... but inlining is expensive).&lt;/p&gt;&lt;p&gt;If we adopted Content Addressed Vocabularies, working on vocabulary\nextensions to ActivityPub could be a different story.\nImagine a git repository that communities can fork to work on new terms.\nWe could have a &lt;code&gt;drafts&lt;/code&gt; directory where people hammer out common\nextension terms, and when they're ready, we simply move them to the\n&lt;code&gt;extensions&lt;/code&gt; directory.\nSince the names are merely hashes of the contents of that directory,\nstatically generating a webpage that lists all current known and\nrecommended extensions would be trivial.\nEverything could be handled in issues and PRs, and even if terms\naren't merged into the main repo, that's merely a matter of lower\nterm discoverability rather than a hinderance of application itself.&lt;/p&gt;&lt;p&gt;If we moved to content addressed vocabulary, we'd be more free from\nthe perils of downtime and general web bitrot, freer from gatekeeping\nand governance challenges, but just as free (I'd argue even freer) to\ncollaborate.\nMoving forward, I intend to ake content addressed approaches to terms\nI define in my systems, and I encourage you to do the same.&lt;/p&gt;</summary></entry><entry><title>Vats and Propagators: towards a global brain</title><id>https://dustycloud.org/blog/vats-and-propagators/</id><author><name>Christine Lemmer-Webber</name><email>cwebber@dustycloud.org</email></author><updated>2020-02-16T15:25:00Z</updated><link href=\"https://dustycloud.org/blog/vats-and-propagators/\" rel=\"alternate\" /><summary type=\"html\">&lt;p&gt;(This is a writeup for future exploration; I will be exploring a small\namount of this soon as a side effect of some UI building I am doing,\nbut not a full system.  A full system will come later, maybe even by\nyears.  Consider this a desiderata document.  Also a forewarning that\nthis document was originally written for an ocap-oriented audience,\nand some terms are left unexpanded; for instance, &amp;quot;vat&amp;quot; really just\nmeans a one-turn-at-a-time single-threaded event loop that a bunch of\nactors live in.)&lt;/p&gt;&lt;p&gt;We have been living the last couple of decades with networks that are\ncapable of communicating ideas.  However, by and large it is left to the\nhumans to reason about these ideas that are propagated.  Most machines\nthat operate on the network merely execute the will of humans that have\ncarefully constructed them.  Recently neural network based machine\nlearning has gotten much better, but merely resembles intuition, not\nreasoning.  (The human brain succeeds by combining both, and a\nsuccessful system likely will too.)  Could we ever achieve a network\nthat itself reasons?  And can it be secure enough not to tear itself\napart?&lt;/p&gt;&lt;h1&gt;Near-term background&lt;/h1&gt;&lt;p&gt;In working towards building out a demonstration of petname systems in\naction in a social network, I ran into the issue of changes to a petname\ndatabase automatically being reflected through the UI.  This lead me\nback down a rabbit hole of exploring reactive UI patterns, and also lead\nme back to exploring that section, and the following propagator section,\nof SICP again.  This also lead me to rewatch one of my favorite talks:\n&lt;a href=&quot;https://www.youtube.com/watch?v=Rk76BurH384&quot;&gt;We Don't Really Know How to Compute!&lt;/a&gt;\nby Gerald Sussman.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://youtu.be/Rk76BurH384?t=1494&quot;&gt;At 24:54&lt;/a&gt; Sussman sets up an\nexample problem: specifically, an expert in electrical systems having\na sense of how to be able to handle and solve an electrical wiring\ndiagram.  (The kind of steps explained are not dissimilar to the kind\nof steps that programmers go through while reasoning about debugging a\ncoding problem.)  Sussman then launches into an exploration of\npropagators, and how they can solve the problem.  Sussman's\nexplanation is better than mine would be, so I'll leave you to watch\nthe video to see how it's used to solve various problems.&lt;/p&gt;&lt;h1&gt;Okay, a short explanation of propagators&lt;/h1&gt;&lt;p&gt;Well, I guess I'll give a little introduction to propagators and why I\nthink they're interesting.&lt;/p&gt;&lt;p&gt;Propagators have gone through some revisions since the &lt;a href=&quot;https://sarabander.github.io/sicp/html/3_002e3.xhtml#g_t3_002e3_002e5&quot;&gt;SICP days&lt;/a&gt;;\nrelevant reading are the\n&lt;a href=&quot;https://groups.csail.mit.edu/mac/users/gjs/propagators/revised-html.html&quot;&gt;Revised Report on the Propagator Model&lt;/a&gt;,\n&lt;a href=&quot;https://dspace.mit.edu/handle/1721.1/44215&quot;&gt;The Art of the Propagator&lt;/a&gt;,\nand to really get into depth with the ideas,\n&lt;a href=&quot;https://dspace.mit.edu/handle/1721.1/54635&quot;&gt;Propagation networks: a flexible and expressive substrate for computation&lt;/a&gt;\n(Radul's PhD thesis).&lt;/p&gt;&lt;p&gt;In summary, a propagator model has the following properties:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;There are cells with accumulate information about a value.  &lt;strong&gt;Note!\nThis is a big change from previous propagator versions!&lt;/strong&gt; In the modern\nversion of a propagator model, a cell doesn't hold a value, it accrues\ninformation about a value which must be non-contradictory.&lt;/li&gt;&lt;li&gt;Such cell information may be complete (the number 42 is all there is\nto know), whereas some other information may be a range of\npossibilities (hm, could be anywhere between -5 to 45...).  As more\ninformation is made available, we can &amp;quot;narrow down&amp;quot; what we know.&lt;/li&gt;&lt;li&gt;Cells are connected together with propagators.&lt;/li&gt;&lt;li&gt;Information is (usually) bidirectional.  For example, with the slope\nformula of y = (m * x) + b, we don't need to just solve for y... we\ncould solve for m, x, or b given the other information.  Similarly,\npartial information can propagate.&lt;/li&gt;&lt;li&gt;Contradictions are not allowed.  Attempting to introduce\ncontradictory information into the network will throw an exception.&lt;/li&gt;&lt;li&gt;We can &amp;quot;play with&amp;quot; different ideas via a Truth Maintenance System.\nWhat do we believe?  Changes in our beliefs can result in changes\nto the generated topology of the network.&lt;/li&gt;&lt;li&gt;Debugging is quite possible.  One of the goals of propagator networks\nis that you should be able to investigate and determine blame for a\nresult.  Relationships are clear and well defined.  As Sussman says\n(roughly paraphrased), &amp;quot;if an autonomous car drives off the car of\nthe road, I could sue the car manufacturer, but I'd rather sue the\ncar... I want to hold it accountable for its decision making&amp;quot;.  The\nability to hold accountability and determine blame stands in contrast\nto squishier systems like neural nets, genetic programs, etc (which\nare still useful, but not as easy to interrogate).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There are a lot of things that can be built with propagators as the\ngeneral case of constraint solving and reasoning; functional reactive\nUIs, type checkers, etc etc.&lt;/p&gt;&lt;h1&gt;Bridging vats and propagators&lt;/h1&gt;&lt;p&gt;The prototype implementations are written in Scheme.  The good news is,\nthis means we could implement propagators on top of something like\n&lt;a href=&quot;https://gitlab.com/spritely/goblins&quot;&gt;Spritely Goblins&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;However (and, granted, I haven't completed it) I think there is one\nthing that is inaccurately described in Radul's thesis and Sussman's\nexplanations, but which I think actually is no problem at all if we\napply the vat model of computation (as in E, Agoric, Goblins): how\ndistributed can these cells and propagators be?  Section 2.1 of Radul's\nthesis explains propagators as asynchronous and completely autonomous,\nas if cells and their propagators could live anywhere on the computer\nnetwork with no change in effectiveness.  I think this is only partially\ntrue.  The reference implementation actually does not fully explore this\nbecause it uses a single-threaded event loop that processes events until\nthere are no more to process, during which it may encounter a\ncontradiction and raise it.  However I believe that the ability to &amp;quot;stop\nthe presses&amp;quot; as it were is one of the nicest features of propagators and\nactually should not be lost... if we introduced asynchronous events\ncoming in, there may be multiple events that come in at the same time\nand which try making changes to the propagator network in parallel.\nThankfully a nice answer comes in form of a the vat model: it should be\npossible to have a propagator network within a single vat.\n&lt;a href=&quot;https://dustycloud.org/blog/goblins-time-travel-micropreview/&quot;&gt;Spritely Goblins' implementation of the vat model is transactional&lt;/a&gt;,\nso this means that if we try to introduce a contradiction, we could\nroll back immediately.  This is the right behavior.  As it turns out,\nthis is very close to the propagator system in the way it's\nimplemented in the reference implementation... I think the reference\nimplementation did something more or less right while trying to do the\nsimplest thing.  Combined with a proper ocap vat model this should\nwork great.&lt;/p&gt;&lt;p&gt;Thus, I believe that a propagator system (here I mean a propagator\nnetwork, meaning a network of propagator-connected cells) should\nactually be vat-local.  But wait, we talked about network (as in\ninternet) based reasoning, and here I am advocating locality!  What\ngives?&lt;/p&gt;&lt;p&gt;The right answer seems to me that propagator networks should be able to\nbe hooked together, but a change to a vat-contained propagator system\ncan trigger message passing to another vat-contained propagator system,\nwhich can even happen over a computer network such as the internet.  We\nwill have to treat propagator systems and changes to them as vat-local,\nbut they can still communicate with other propagator systems.  (This is a\ngood idea anyway; if you communicate an idea with me and it's\ninconsistent with my worldview, it should be important for me to be able\nto realize that and use that as an opportunity to correct our\nmisunderstandings between each other.)&lt;/p&gt;&lt;p&gt;However, cells are still objects with classic object references.  This\nmeans it is possible to hold onto one and use it as either a local or\nnetworked capability.  Attenuation also composes nicely; it should be\npossible to produce a facet of a cell that only allows read access or\nonly allows adding information.  It's clear and easily demonstrated that\nocaps can be the right security model for the propagator model simply by\nrealizing that both the propagator prototype system is written in\nscheme, and so is\n&lt;a href=&quot;http://mumble.net/~jar/pubs/secureos/secureos.html&quot;&gt;Jonathan Rees' W7 security kernel&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This is all to say, if we built the propagator model &lt;em&gt;on top of&lt;/em&gt;\nan ocap-powered vat model, we'd already have a good network\ncommunication model, a good security model, and a transactional model.\nSounds great to me.&lt;/p&gt;&lt;p&gt;Best of all, a propagator system can live alongside normal actors.  We\ndon't have to choose one or the other... a multi-paradigm approach can\nwork great.&lt;/p&gt;&lt;h1&gt;Speaking the same language&lt;/h1&gt;&lt;p&gt;One of the most important things in a system that communicates is that\nideas should be able to be expressed and considered in such a way that\nboth parties understand.  Of course, humans do this, and we call it\n&amp;quot;language&amp;quot;.&lt;/p&gt;&lt;p&gt;Certain primitives exist in our system already; for optimization\nreasons, we are unlikely to want to build numbers out of mere tallying\nof numbers (such as in Peano arithmetic); we instead build in primitives\nfor integers and a means of combination for them.  So we will of course\nwant to have several primitive data types.&lt;/p&gt;&lt;p&gt;But at some point we will want to talk about concepts that are not\nencoded in the system.  If I would like to tell you about a beautiful\nred bird I saw, where would I even begin?  Well obviously at minimum, we\nwill have to have ways of communicating ideas such as &amp;quot;red&amp;quot; and &amp;quot;bird&amp;quot;.\nWe will have to build a vocabulary together.&lt;/p&gt;&lt;p&gt;Natural language vocabulary has a way of becoming ambiguous fast.  A\n&amp;quot;note&amp;quot; passed in class versus a &amp;quot;note&amp;quot; in a musical score versus that I\nwould like to &amp;quot;note&amp;quot; a topic of interest to you are all different things.&lt;/p&gt;&lt;p&gt;Linked data (formerly &amp;quot;semantic web&amp;quot;) folks have tried to use full URIs\nas a way to get around this problem.  For instance, two ActivityPub\nservers which are communicating are very likely speaking about the same\nthing if they both use &amp;quot;https://www.w3.org/ns/activitystreams#Note&amp;quot;,\nwhich is to say they are talking about some written note-like message\n(probably a (micro)blog post).  This is not a guarantee; vocabulary\ndrift is still possible, but it is much less likely.&lt;/p&gt;&lt;p&gt;Unfortunately, http(s) based URIs are a poor choice for hosting\nvocabulary.  Domains expire, websites go down, and choosing whether to\nextend a vocabulary in some namespace is (in the author's experience) a\ngovernance nightmare.  A better option is &amp;quot;content-addressed\nvocabulary&amp;quot;; instead of &amp;quot;https://www.w3.org/ns/activitystreams#Note&amp;quot;\nwe could instead simply take the text from the standard:&lt;/p&gt;&lt;p&gt;&amp;quot;Represents a short written work typically less than a single\nparagraph in length.&amp;quot;&lt;/p&gt;&lt;p&gt;Hash that and you get\n&amp;quot;urn:sha256:54c14cbd844dc9ae3fa5f5f7b8c1255ee32f55b8afaba88ce983a489155ac398&amp;quot;.\nNo governance or liveness issues required.  (Hashing mechanism upgrades,\nhowever, do pose some challenge; mapping old hashes to new ones for\nequivalence can be a partial solution.)&lt;/p&gt;&lt;p&gt;This seems sufficient to me; groups can collaborate somewhere to hammer\nout the definition of some term, simply hash the definition of it, and\nuse that as the terminology URI.  This also avoids hazards from choosing\na different edge of Zooko's Triangle for vocabulary.&lt;/p&gt;&lt;p&gt;Now that we have this, we can express advanced new ideas across the\nnetwork and experiment with new terms.  Better yet, we might be even\nable to use our propagator networks to associate ideas with them.  I\nthink in many systems, content-addressed-vocabulary could be a good way\nto describe beliefs that could be considered, accepted, rejected in\ntruth maintenance systems.&lt;/p&gt;&lt;h1&gt;Cerealize me, cap'n!&lt;/h1&gt;&lt;p&gt;One observation from Agoric is that it is possible to treat systems that\ndo not resemble traditional live actor'y vats still as vats (and\n&amp;quot;machines&amp;quot;) and develop semantics for message passing between them (and\nperforming promise resolution) nonetheless, for instance blockchains.&lt;/p&gt;&lt;p&gt;Similarly, above we have observed that propagator systems can be built\non top of actors; I believe it is also possible to describe propagator\nnetworks in terms of pure data.  It should be possible to describe\nchanges to a propagator network as a standard serialized ledger that can\nbe transferred from place to place or reproduced.&lt;/p&gt;&lt;p&gt;However, the fact that interoperability with actors is possible is good,\ndesirable, and thankfully a nice transitional place for experimentation\n(porting propagator model semantics to Spritely Goblins should not be\nhard).&lt;/p&gt;&lt;h1&gt;Where to from here?&lt;/h1&gt;&lt;p&gt;That's a lot of ideas above, but how likely is any of this stuff to be\nusable soon?  I'm not anticipating dropping any current work to try to\nmake this happen, but I probably will be experimenting in my upcoming UI\nwork to try to have the UI powered by a propagator system (possibly even\na stripped down version) so that the experimental seeds are in place to\nsee if such a system can be grown.  But I am not anticipating that we'll\nsee anything like a fully distributed propagator system doing something\ninteresting from my own network soon... but sometimes I end up\nsurprised.&lt;/p&gt;&lt;h1&gt;Closing the loop&lt;/h1&gt;&lt;p&gt;I mentioned before that human brains are a combination of faster\nintuitive methods (resembling current work on neural nets) and slower,\nmore calculating reasoning systems (resembling propagators or some logic\nprogramming languages).  That's also to say nothing about the giant\nemotional soup that a mind/body tends to live in.&lt;/p&gt;&lt;p&gt;Realistically the emergence of a fully sapient system won't involve any\nof these systems independently, but rather a networked interconnection\nof many of them.  I think the vat model of execution is a nice glue\nsystem for it; pulling propagators into the system could bring us one\nstep closer, maybe.&lt;/p&gt;&lt;p&gt;Or maybe it's all just fantastical dreaming!  Who knows.  But it could\nbe interesting to play and find out at some point... perhaps some day we\ncan indeed get a proper brain into a vat.&lt;/p&gt;</summary></entry><entry><title>State of Spritely for February 2020</title><id>https://dustycloud.org/blog/state-of-spritely-2020-02/</id><author><name>Christine Lemmer-Webber</name><email>cwebber@dustycloud.org</email></author><updated>2020-02-10T15:30:00Z</updated><link href=\"https://dustycloud.org/blog/state-of-spritely-2020-02/\" rel=\"alternate\" /><summary type=\"html\">&lt;p&gt;We are now approximately 50% of the way through the\n&lt;a href=&quot;/blog/samsung-stack-zero-grant/&quot;&gt;Samsung Stack Zero grant&lt;/a&gt; for Spritely,\nand only a few months more since I\n&lt;a href=&quot;https://dustycloud.org/blog/spritely/&quot;&gt;announced the Spritely project&lt;/a&gt;\nat all.\nI thought this would be a good opportunity to review what has happened\nso far and what's on the way.&lt;/p&gt;&lt;p&gt;In my view, quite a lot has happened over the course of the last year:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://datashards.net/&quot;&gt;Datashards&lt;/a&gt; grew out of two Spritely\nprojects, &lt;a href=&quot;https://gitlab.com/dustyweb/magenc/blob/master/magenc/scribblings/intro.org&quot;&gt;Magenc&lt;/a&gt;\nand &lt;a href=&quot;https://gitlab.com/spritely/crystal/blob/master/crystal/scribblings/intro.org&quot;&gt;Crystal&lt;/a&gt;.\nThis provides the &amp;quot;secure storage layer&amp;quot; for the system, and by\nmoving into Datashards has even become its own project (now mostly\nunder the maintainership of Serge Wroclawski, who as it turns out is\nalso co-host with me of &lt;a href=&quot;https://librelounge.org/&quot;&gt;Libre Lounge&lt;/a&gt;.\nThere's external interest in this from the rest of the federated\nsocial web, and it was a topic of discussion in\n&lt;a href=&quot;https://socialhub.activitypub.rocks/t/2-8-socialcg-telecon/507&quot;&gt;the last meeting&lt;/a&gt;\nof the &lt;a href=&quot;https://www.w3.org/wiki/SocialCG&quot;&gt;SocialCG&lt;/a&gt;.\nWhile not as publicly visible recently, the project is indeed\nactive; I am currently helping advise and assist Serge with some of\nthe ongoing work on optimizations for smaller files, fixing the\nmanifest format to permit larger files, and a more robust HTTP API\nfor stores/registries.\n(Thank you Serge also for taking on a large portion of this work\nand responsibility!)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://gitlab.com/spritely/goblins&quot;&gt;Spritely Goblins&lt;/a&gt;, the actor\nmodel layer of Spritely, continues its development.\nWe are now up to release &lt;a href=&quot;https://gitlab.com/spritely/goblins/commit/9deede936e97ae7eeaa614e05071e7bd2de446c0&quot;&gt;v0.5&lt;/a&gt;.\nI don't consider the API to be stable, but it is stabilizing.\nIn particular, the object/update model, the synchronous\ncommunication layer, and the transactional update support are\nall very close to stable.\nAsynchronous programming mostly works but has a few bugs I need\nto work out, and the distributed programming environment design\nis coming together enough where I expect to be able to demo it soon.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;In addition, I have finally started to\n&lt;a href=&quot;https://dustycloud.org/tmp/goblins-draft.html&quot;&gt;write docs for Spritely Goblins&lt;/a&gt;.\nI think the tutorial above is fairly nice, and I've had a good amount\nof review from various parties, and those who have tried it seem to think\nit is fairly nice.\n(Please be advised that it requires working with the\n&lt;a href=&quot;https://gitlab.com/spritely/goblins/-/tree/dev&quot;&gt;dev branch of Goblins&lt;/a&gt;\nat the time of writing.)\nv0.6 should the first release to have documentation after the major\noverhaul I did last summer (effectively an entire rewrite of the system,\nincluding many changes to the design after doing\n&lt;a href=&quot;http://www.erights.org/talks/thesis/&quot;&gt;research into ocap practices&lt;/a&gt;).\nI cannot recommend that anyone else write production-level code using the\nsystem yet, but I hope that by the summer things will have congealed\nenough that this will change.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;I have made a couple of publicly visible demos of Goblins' design.\nWeirdly enough all of these have involved ascii art.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;The proto-version was the\n&lt;a href=&quot;http://dustycloud.org/blog/lets-just-be-weird-together/&quot;&gt;Let's Just Be Weird Together&lt;/a&gt;\ndemo.\nActually it's a bit strange to say this because the LJBWT demo didn't\nuse Goblins, it used a library called &lt;a href=&quot;https://gitlab.com/dustyweb/dos-hurd&quot;&gt;DOS/HURD&lt;/a&gt;.\nHowever, writing this library (and adapting it from &lt;a href=&quot;https://docs.racket-lang.org/dos/win.html&quot;&gt;DOS/Win&lt;/a&gt;)\ndirectly informed the\n&lt;a href=&quot;https://gitlab.com/spritely/goblinoid&quot;&gt;rewrite of Goblins, Goblinoid&lt;/a&gt;\nwhich eventually became Goblins itself, replacing all the old code.\nThis is why I advocate demo-driven-development: the right design\nof an architecture flows out of a demo of it.\n(Oh yeah, and uh, it also allowed me to make a present for my 10th wedding\nanniversary, too.)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Continuing in a similar vein, I made the\n&lt;a href=&quot;https://dustycloud.org/blog/conservancy-card/&quot;&gt;&amp;quot;Season's Greetings&amp;quot; postcard&lt;/a&gt;,\nwhich &lt;a href=&quot;https://sfconservancy.org/&quot;&gt;Software Freedom Conservancy&lt;/a&gt;\nactually used in their funding campaign this year.\nThis snowy scene used the new rewrite of Goblins and allowed me\nto try to push the new &amp;quot;become&amp;quot; feature of Goblins to its limit\n(the third principle of &lt;a href=&quot;https://en.wikipedia.org/wiki/Actor_model#Fundamental_concepts&quot;&gt;actor model semantics&lt;/a&gt;,\ntaken very literally).\nIt wasn't really obvious to anyone else that this was using Goblins\nin any interesting way, but I'll say that writing this really allowed\nme to congeal many things about the update layer and it also lead to\nuncovering a performance problem, leading to a 10x speedup.\nHaving written this demo, I was starting to get the hang of\nthings in the Goblins synchronous layer.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Finally there was the\n&lt;a href=&quot;https://gitlab.com/dustyweb/terminal-phase&quot;&gt;Terminal Phase demo&lt;/a&gt;.\n(See the &lt;a href=&quot;/blog/terminal-phase-prototype/&quot;&gt;prototype announcement blogpost&lt;/a&gt; and\nthe &lt;a href=&quot;/blog/terminal-phase-1.0/&quot;&gt;1.0 announcement&lt;/a&gt;.)\nThis was originally designed as a\n&lt;a href=&quot;https://www.patreon.com/posts/terminal-phase-31308473&quot;&gt;reward for donors for hitting $500/mo&lt;/a&gt;\non\n&lt;a href=&quot;https://www.patreon.com/cwebber&quot;&gt;my Patreon account&lt;/a&gt;\n(you can still\n&lt;a href=&quot;https://dustycloud.org/gfx/goodies/terminal-phase-credits-2020-01-19.gif&quot;&gt;show up in the credits&lt;/a&gt;\nby donating!),\nthough once 1.0 made it out the door it seems like it raised considerable\nexcitement\n&lt;a href=&quot;https://www.reddit.com/r/linux/comments/erh851/i_made_a_space_shooter_that_runs_in_your_terminal/&quot;&gt;on the r/linux subreddit&lt;/a&gt;\nand\n&lt;a href=&quot;https://news.ycombinator.com/item?id=22095092&quot;&gt;on Hacker News&lt;/a&gt;,\nwhich was nice to see.\nTerminal Phase helped me finish testing and gaining confidence in the\ntransactional object-update and synchronous call semantics of Spritely Goblins,\nand I now have no doubt that this layer has a good design.\nBut I think Terminal Phase was the first time that &lt;em&gt;other people&lt;/em&gt; could\nsee why Spritely Goblins was exciting, especially once I showed off the\n&lt;a href=&quot;https://dustycloud.org/blog/goblins-time-travel-micropreview/&quot;&gt;time travel debugging in Terminal Phase demo&lt;/a&gt;.\nThat last post lead people to finally start pinging me asking\n&amp;quot;when can I use Spritely Goblins&amp;quot;?\nThat's good... I'm glad it's obvious now that Goblins is doing something\ninteresting (though the most interesting things are yet to be demo'ed).&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;I participated in, keynoted, and drummed up enthusiasm for\n&lt;a href=&quot;/blog/activitypub-conf-2019/&quot;&gt;ActivityPub Conference 2019&lt;/a&gt;.\n(I didn't organize though, that was\n&lt;a href=&quot;https://mlemmer.org&quot;&gt;Morgan Lemmer-Webber&lt;/a&gt;'s doing,\nalongside &lt;a href=&quot;https://mastodon.social/@sl007&quot;&gt;Sebastian Lasse&lt;/a&gt; and with\n&lt;a href=&quot;https://mastodon.social/@chillicampari&quot;&gt;DeeAnn Little&lt;/a&gt; organizing the\nvideo recording.)\nWe had a great &lt;a href=&quot;http://dustycloud.org/blog/activitypub-conf-2019-speakers/&quot;&gt;speaker list&lt;/a&gt;\nand even got &lt;a href=&quot;http://dustycloud.org/blog/mark-miller-at-apconf-2019/&quot;&gt;Mark S. Miller to keynote&lt;/a&gt;.\n&lt;a href=&quot;https://conf.tube/video-channels/apconf_channel/videos&quot;&gt;Videos of the event&lt;/a&gt;\nare also available.\nWhile that event was obviously much bigger than Spritely, the engagement\nof the ActivityPub community is obviously important for its success.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Relatedly, I continue to co-chair &lt;a href=&quot;https://www.w3.org/wiki/SocialCG&quot;&gt;the SocialCG&lt;/a&gt;\nbut &lt;a href=&quot;https://cybre.space/@nightpool&quot;&gt;Nightpool&lt;/a&gt; has joined as co-chair\nwhich should relieve some pressure there, as I was a bit too overloaded\nto be able to handle this all on my own.\nThe addition of the &lt;a href=&quot;https://socialhub.activitypub.rocks/&quot;&gt;SocialHub community forum&lt;/a&gt;\nhas also allowed the ActivityPub community to be able to coordinate in a way\nthat does not rely on me being a blocker.\nAgain, not Spritely related directly, but the health of the\nActivityPub community is important to Spritely's success.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;At Rebooting Web of Trust I coordinated with a number of contributors\n(including Mark Miller) on sketching out plans for\n&lt;a href=&quot;https://github.com/cwebber/rwot9-prague/blob/secure-uis/draft-documents/secure-user-interfaces.md&quot;&gt;secure UI designs&lt;/a&gt;.\nSadly the paper is incomplete but has given me the framework for\nunderstanding the necessary UI components for when we get to the\nsocial network layer of Spritely.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Further along the lines of sketching out the desiderata of\nfederated social networks, I have written a nearly-complete\n&lt;a href=&quot;https://gitlab.com/spritely/ocappub/blob/master/README.org&quot;&gt;OcapPub: towards networks of consent&lt;/a&gt;.\nHowever, there are still some details to be figured out; I have\nbeen hammering them out on the &lt;a href=&quot;https://groups.google.com/forum/#!forum/cap-talk&quot;&gt;cap-talk mailing list&lt;/a&gt;\n(see &lt;a href=&quot;https://groups.google.com/forum/#!topic/cap-talk/icey8aO5ABo&quot;&gt;this post laying out a very ocappub-like design&lt;/a&gt;\nwith some known problems, and then\n&lt;a href=&quot;https://groups.google.com/d/msg/cap-talk/5Q8BM3aW0Gw/lHzTgXaQAgAJ&quot;&gt;this analysis&lt;/a&gt;).\nThe ocap community has thankfully been very willing to participate\nin working with me to hammer out the right security foundations,\nand I think we're close to the right design details.\nOf course, the proof of the pudding is in the demo, which has yet\nto be written.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Okay, so I hope I've convinced you that a lot has happened, and\nhopefully you feel that I am using my time reasonably well.\nBut there is much, much, much ahead for Spritely to succeed in its goals.\nSo, what's next?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;I need to finish cleaning up the Goblins documentation and do a\nv0.6 release with it included.\nAt that point I can start recommending some brave souls to use it for\nsome simple applications.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A demo of Spritely Goblins working in a primarily asynchronous\nenvironment.\nThis might simply be a port of &lt;a href=&quot;https://notabug.org/cwebber/mudsync/&quot;&gt;mudsync&lt;/a&gt;\nas a first step.\n(&lt;a href=&quot;https://archive.org/details/feb_2017-live_network_coding_8sync&quot;&gt;Recorded demo of mudsync&lt;/a&gt;\nfrom a few years ago.)\nI'm not actually sure.\nThe goal of this isn't to be the &amp;quot;right&amp;quot; social network design (not\nfull OcapPub), just to test the async behaviors of Spritely Goblins.\nLike the synchronous demos that have already been done, the purpose of\nthis is to congeal and ensure the quality of the async primitives.\nI expect this and the previous bullet point to be done within the next\ncouple of months, so hopefully by the end of April.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Distributed networked programming in Goblins, and associated demo.\nMay expand on the previous demo.\nProbably will come out about two months later, so end of June.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Prototype of the secure UI concepts from the forementioned secure\nUIs paper.\nI expect/hope this to be usable by end of third quarter 2020.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Somewhere in-between all this, I'd like to add a demo of being able\nto securely run untrusted code from third parties, maybe in the MUD\ndemo.\nNot sure when yet.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;All along, I continue to expect to push out new updates to Terminal\nPhase with more fun enemies and powerups to continue to reward donors\nto the &lt;a href=&quot;https://www.patreon.com/cwebber&quot;&gt;Patreon campaign&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This will probably take most of this year.\nWhat you will notice is that this does not explicitly state a tie-in\nwith the ActivityPub network.\nThis is intentional, because the main goal of all the above demos are to\nprove more foundational concepts before they are all fully integrated.\nI think we'll see the full integration and it coming together with the\nexisting fediverse beginning in early 2021.&lt;/p&gt;&lt;p&gt;Anyway, that's a lot of stuff ahead.\nI haven't even mentioned my involvement in\n&lt;a href=&quot;https://librelounge.org/&quot;&gt;Libre Lounge&lt;/a&gt;, which I've been on hiatus\nfrom due to a health issue that has made recording difficult, and from\nbeing busy trying to deliver on these foundations, but I expect to be\ncoming back to LL shortly.&lt;/p&gt;&lt;p&gt;I hope I have instilled you with some confidence that I am moving\nsteadily along the abstract Spritely roadmap.\n(Gosh, I ought to finally put together a website for Spritely, huh?)\nThings are happening, and interesting ones I think.&lt;/p&gt;&lt;p&gt;But how do you think things are going?\nMaybe you would like to leave me feedback.\nIf so, feel free to &lt;a href=&quot;/contact/&quot;&gt;reach out&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Until next time...&lt;/p&gt;</summary></entry></feed>"], ["updated_at", "2022-07-10 07:07:43.064657"], ["id", 1]]
D, [2022-07-10T03:07:43.130454 #3248059] DEBUG -- :   TRANSACTION (16.3ms)  commit transaction
[debug] feed_xml:
[debug] <?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>Dustycloud Brainstorms</title><id>https://dustycloud.org//blog/index.xml</id><subtitle>Recent Posts</subtitle><updated>2022-07-09T18:40:19Z</updated><link href="dustycloud.org//blog/index.xml" rel="self" /><link hr
[info] Before parsing feed >dustycloud<...
[debug] using stdlib rss/0.2.9
[debug] Parsing feed in xml...
[debug]   feed.class=RSS::Atom::Feed
[debug]   atom | feed.title.content[0..30] (type=><)  >Dustycloud Brainstorms< : String
[debug]   atom | feed.id.content  >https://dustycloud.org//blog/index.xml< : String
[debug]   atom | feed.link[1]  rel=>self< : String type=>< href=>dustycloud.org//blog/index.xml<
[debug]   atom | feed.link[2]  rel=>< : NilClass type=>< href=>dustycloud.org<
[debug]   atom | feed.link[1]  rel=>self< : String type=>< href=>dustycloud.org//blog/index.xml<
[debug]   atom | feed.link[2]  rel=>< : NilClass type=>< href=>dustycloud.org<
[debug]   atom | feed.updated.content  >2022-07-09T18:40:19Z< : Time
[debug]   atom | feed.subtitle => summary.content[0..30] (type=><)  >Recent Posts< : String
[debug]   atom | item.title.content[0..30] (type=><)  >Guile Steel: a proposal for a s< : String
[debug]   atom | item.link.href  >https://dustycloud.org/blog/guile-steel-proposal/< : String
[debug]   atom | item.updated.content  >2022-07-09T11:26:00Z< : Time
[debug]   atom | item.id.content  >https://dustycloud.org/blog/guile-steel-proposal/< : String
[debug]   atom | item.summary.content[0..30] (type=>html<)  ><p>Before we get into this kind< : String
[debug]   atom | item.title.content[0..30] (type=><)  >Site converted to Haunt< : String
[debug]   atom | item.link.href  >https://dustycloud.org/blog/site-converted-to-haunt/< : String
[debug]   atom | item.updated.content  >2022-07-05T13:20:00Z< : Time
[debug]   atom | item.id.content  >https://dustycloud.org/blog/site-converted-to-haunt/< : String
[debug]   atom | item.summary.content[0..30] (type=>html<)  ><p>Lo and behold, I've converte< : String
[debug]   atom | item.title.content[0..30] (type=><)  >Hello, I'm Chris Lemmer-Webber,< : String
[debug]   atom | item.link.href  >https://dustycloud.org/blog/nonbinary-trans-femme/< : String
[debug]   atom | item.updated.content  >2021-06-28T18:13:00Z< : Time
[debug]   atom | item.id.content  >https://dustycloud.org/blog/nonbinary-trans-femme/< : String
[debug]   atom | item.summary.content[0..30] (type=>html<)  ><p><img src="https://dustycloud< : String
[debug]   atom | item.title.content[0..30] (type=><)  >Beyond the shouting match: what< : String
[debug]   atom | item.link.href  >https://dustycloud.org/blog/what-is-a-blockchain-really/< : String
[debug]   atom | item.updated.content  >2021-04-24T15:30:00Z< : Time
[debug]   atom | item.id.content  >https://dustycloud.org/blog/what-is-a-blockchain-really/< : String
[debug]   atom | item.summary.content[0..30] (type=>html<)  ><p>If there's one thing that's < : String
[debug]   atom | item.title.content[0..30] (type=><)  >The hurt of this moment, hopes < : String
[debug]   atom | item.link.href  >https://dustycloud.org/blog/hurt-and-hopes/< : String
[debug]   atom | item.updated.content  >2021-03-31T13:42:00Z< : Time
[debug]   atom | item.id.content  >https://dustycloud.org/blog/hurt-and-hopes/< : String
[debug]   atom | item.summary.content[0..30] (type=>html<)  ><p>Of the deeper thoughts I mig< : String
[debug]   atom | item.title.content[0..30] (type=><)  >Vote for Amy Guy on the W3C TAG< : String
[debug]   atom | item.link.href  >https://dustycloud.org/blog/vote-for-amy-guy/< : String
[debug]   atom | item.updated.content  >2020-12-21T15:07:00Z< : Time
[debug]   atom | item.id.content  >https://dustycloud.org/blog/vote-for-amy-guy/< : String
[debug]   atom | item.summary.content[0..30] (type=>html<)  ><p>My friend <a href="https://r< : String
[debug]   atom | item.title.content[0..30] (type=><)  >Identity is a Katamari, languag< : String
[debug]   atom | item.link.href  >https://dustycloud.org/blog/identity-is-a-katamari/< : String
[debug]   atom | item.updated.content  >2020-12-09T13:00:00Z< : Time
[debug]   atom | item.id.content  >https://dustycloud.org/blog/identity-is-a-katamari/< : String
[debug]   atom | item.summary.content[0..30] (type=>html<)  ><p>I said something strange thi< : String
[debug]   atom | item.title.content[0..30] (type=><)  >Spritely website launches, plus< : String
[debug]   atom | item.link.href  >https://dustycloud.org/blog/spritely-website-apconf-videos/< : String
[debug]   atom | item.updated.content  >2020-09-30T14:20:00Z< : Time
[debug]   atom | item.id.content  >https://dustycloud.org/blog/spritely-website-apconf-videos/< : String
[debug]   atom | item.summary.content[0..30] (type=>html<)  ><p><strong>Note:</strong> This < : String
[debug]   atom | item.title.content[0..30] (type=><)  >Spritely Goblins v0.7 released!< : String
[debug]   atom | item.link.href  >https://dustycloud.org/blog/spritely-goblins-v0/< : String
[debug]   atom | item.updated.content  >2020-09-13T17:20:00Z< : Time
[debug]   atom | item.id.content  >https://dustycloud.org/blog/spritely-goblins-v0/< : String
[debug]   atom | item.summary.content[0..30] (type=>html<)  ><p>I'm delighted to say that
<a< : String
[debug]   atom | item.title.content[0..30] (type=><)  >If you can't tell people anythi< : String
[debug]   atom | item.link.href  >https://dustycloud.org/blog/if-you-cant-tell-people-anything/< : String
[debug]   atom | item.updated.content  >2020-08-29T12:05:00Z< : Time
[debug]   atom | item.id.content  >https://dustycloud.org/blog/if-you-cant-tell-people-anything/< : String
[debug]   atom | item.summary.content[0..30] (type=>html<)  ><p>The other day I made a
<a hr< : String
[debug]   atom | item.title.content[0..30] (type=><)  >Terminal Phase in Linux Magazin< : String
[debug]   atom | item.link.href  >https://dustycloud.org/blog/terminal-phase-in-linux-magazine-pl/< : String
[debug]   atom | item.updated.content  >2020-08-12T12:54:00Z< : Time
[debug]   atom | item.id.content  >https://dustycloud.org/blog/terminal-phase-in-linux-magazine-pl/< : String
[debug]   atom | item.summary.content[0..30] (type=>html<)  ><p><img src="https://dustycloud< : String
[debug]   atom | item.title.content[0..30] (type=><)  >Announcing FOSS and Crafts< : String
[debug]   atom | item.link.href  >https://dustycloud.org/blog/announcing-foss-and-crafts/< : String
[debug]   atom | item.updated.content  >2020-07-14T11:20:00Z< : Time
[debug]   atom | item.id.content  >https://dustycloud.org/blog/announcing-foss-and-crafts/< : String
[debug]   atom | item.summary.content[0..30] (type=>html<)  ><p>I wrote recently about
<a hr< : String
[debug]   atom | item.title.content[0..30] (type=><)  >Some updates: CapTP in progress< : String
[debug]   atom | item.link.href  >https://dustycloud.org/blog/mid-2020-updates/< : String
[debug]   atom | item.updated.content  >2020-06-30T19:14:00Z< : Time
[debug]   atom | item.id.content  >https://dustycloud.org/blog/mid-2020-updates/< : String
[debug]   atom | item.summary.content[0..30] (type=>html<)  ><p>(<a href="https://www.patreo< : String
[debug]   atom | item.title.content[0..30] (type=><)  >Departing Libre Lounge< : String
[debug]   atom | item.link.href  >https://dustycloud.org/blog/departing-libre-lounge/< : String
[debug]   atom | item.updated.content  >2020-05-13T14:13:00Z< : Time
[debug]   atom | item.id.content  >https://dustycloud.org/blog/departing-libre-lounge/< : String
[debug]   atom | item.summary.content[0..30] (type=>html<)  ><p>Over the last year and a hal< : String
[debug]   atom | item.title.content[0..30] (type=><)  >Spritely's NLNet grant: Interfa< : String
[debug]   atom | item.link.href  >https://dustycloud.org/blog/spritely-nlnet-grant/< : String
[debug]   atom | item.updated.content  >2020-05-13T13:54:00Z< : Time
[debug]   atom | item.id.content  >https://dustycloud.org/blog/spritely-nlnet-grant/< : String
[debug]   atom | item.summary.content[0..30] (type=>html<)  ><p>I've been putting off making< : String
[debug]   atom | item.title.content[0..30] (type=><)  >What should fit in a FOSS licen< : String
[debug]   atom | item.link.href  >https://dustycloud.org/blog/what-should-fit-in-a-foss-license/< : String
[debug]   atom | item.updated.content  >2020-03-09T17:07:00Z< : Time
[debug]   atom | item.id.content  >https://dustycloud.org/blog/what-should-fit-in-a-foss-license/< : String
[debug]   atom | item.summary.content[0..30] (type=>html<)  ><p><em>Originally sent in <a hr< : String
[debug]   atom | item.title.content[0..30] (type=><)  >Terminal Phase v1.1 and Spritel< : String
[debug]   atom | item.link.href  >https://dustycloud.org/blog/terminal-phase-1/< : String
[debug]   atom | item.updated.content  >2020-03-05T10:50:00Z< : Time
[debug]   atom | item.id.content  >https://dustycloud.org/blog/terminal-phase-1/< : String
[debug]   atom | item.summary.content[0..30] (type=>html<)  ><p>Hello all!
I just did a bran< : String
[debug]   atom | item.title.content[0..30] (type=><)  >Content Addressed Vocabulary< : String
[debug]   atom | item.link.href  >https://dustycloud.org/blog/content-addressed-vocabulary/< : String
[debug]   atom | item.updated.content  >2020-02-26T19:23:00Z< : Time
[debug]   atom | item.id.content  >https://dustycloud.org/blog/content-addressed-vocabulary/< : String
[debug]   atom | item.summary.content[0..30] (type=>html<)  ><p>How can systems communicate < : String
[debug]   atom | item.title.content[0..30] (type=><)  >Vats and Propagators: towards a< : String
[debug]   atom | item.link.href  >https://dustycloud.org/blog/vats-and-propagators/< : String
[debug]   atom | item.updated.content  >2020-02-16T15:25:00Z< : Time
[debug]   atom | item.id.content  >https://dustycloud.org/blog/vats-and-propagators/< : String
[debug]   atom | item.summary.content[0..30] (type=>html<)  ><p>(This is a writeup for futur< : String
[debug]   atom | item.title.content[0..30] (type=><)  >State of Spritely for February < : String
[debug]   atom | item.link.href  >https://dustycloud.org/blog/state-of-spritely-2020-02/< : String
[debug]   atom | item.updated.content  >2020-02-10T15:30:00Z< : Time
[debug]   atom | item.id.content  >https://dustycloud.org/blog/state-of-spritely-2020-02/< : String
[debug]   atom | item.summary.content[0..30] (type=>html<)  ><p>We are now approximately 50%< : String
[debug] == atom / Dustycloud Brainstorms ==
D, [2022-07-10T03:07:43.322758 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.3ms)  SELECT "items".* FROM "items" WHERE "items"."guid" = ? LIMIT ?  [["guid", "https://dustycloud.org/blog/guile-steel-proposal/"], ["LIMIT", 1]]
[info] ** NEW | Guile Steel: a proposal for a systems lisp
[debug]   add ads filter feedburner
[debug] skipping comment line
[debug] skipping comment line
[debug] skipping comment line
[debug] skipping comment line
[debug] skipping comment line
[debug] skipping comment line
[debug] skipping comment line
[debug] skipping comment line
[debug] skipping comment line
[debug] skipping comment line
[debug] block separator
[debug]   add ads filter feedflare
[debug] skipping comment line
[debug] skipping comment line
[debug] block separator
[debug] *** dump item_attribs w/ class types:
[debug]   guid: >https://dustycloud.org/blog/guile-steel-proposal/< : String
[debug]   title: >Guile Steel: a proposal for a systems lisp< : String
[debug]   url: >https://dustycloud.org/blog/guile-steel-proposal/< : String
[debug]   updated: >2022-07-09 11:26:00 UTC< : Time
[debug]   published: >< : NilClass
D, [2022-07-10T03:07:43.335271 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:43.336761 #3248059] DEBUG -- :   Pluto::Model::Item Create (0.7ms)  INSERT INTO "items" ("guid", "url", "title", "summary", "updated", "feed_id", "fetched", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [["guid", "https://dustycloud.org/blog/guile-steel-proposal/"], ["url", "https://dustycloud.org/blog/guile-steel-proposal/"], ["title", "Guile Steel: a proposal for a systems lisp"], ["summary", "<p>Before we get into this kind of stream-of-consciousness outline, I'd\nlike to note that very topically to this, over at the\n<a href=\"https://spritely.institute/\">Spritely Institute</a> (where I'm CTO, did\nI mention on here yet that I'm the CTO of a nonprofit to improve\nnetworked communication on the internet on this blog?  because I don't\nthink I did) we\n<a href=\"https://spritely.institute/news/the-spritely-institute-publishes-a-scheme-primer.html\">published</a>\na <a href=\"https://spritely.institute/static/papers/scheme-primer.html\">Scheme Primer</a>,\nand the feedback to it has been just lovely.\nThis post isn't a Spritely Institute thing (at least, not yet, though\nif its ideas manifested it could be possible we might use some of the\ntech), but since it's about Scheme, I thought I'd mention that.</p><p>This blogpost outlines something I've had kicking around in my head\nfor a while: the desire for a modern &quot;systems lisp&quot;, you know, kind of\nlike Rust, except hopefully much better than Rust, and in Lisp.  (And,\nif it turns out to be for not other reason, it might simply be better\nby <em>being</em> written in a Lisp.)  But let's be clear: I haven't written\nanything, this blogpost is a ramble, it's just kind of a set of\n<em>feelings</em> about what I'd like, what I think is possible.</p><p>Let's open by saying that there's no real definition of what a\n&quot;systems language&quot; is... but more or less what people mean is,\n&quot;something like C&quot;.  In other words, what people nowadays consider a\nlow-level language, even though C used to be considered a high level\nlanguage.  And what people <em>really</em> mean is: it's fast, it's\nstatically typed, and it's really for the bit-fiddling types of speed\ndemons out there.</p><p>Actually, let's put down a few asides for a moment.  People have\nconflated two <em>different</em> benefits fo &quot;statically typed&quot; languages\nbecause they've mostly been seen together:</p><ul><li>Static typing for ahead-of-time more-correct programs</li><li>Static typing for faster or leaner programs (which subdivides in\nterms of memory and CPU benefits, more or less)</li></ul><p>In the recent <a href=\"https://fossandcrafts.org\">FOSS &amp; Crafts</a> episode\n<a href=\"https://fossandcrafts.org/episodes/47-what-is-lisp.html\">What is Lisp?</a>\nwe talk a bit about how the assumptions that dynamically typed\nlanguages are &quot;slow&quot; is really due to lack of hardware support,\nand that lisp machines actually had hardware support directly (tagged\nmemory architecture and hardware garbage collection) and even wrote\nlow-level parts of their systems like the &quot;graphics drivers&quot; directly\nin lisp, and it was plenty fast, and that it would even be possible to\nhave co-processors on which dynamic code (not just lisp) ran at\n&quot;native speed&quot; (this is what the\n<a href=\"https://en.wikipedia.org/wiki/Symbolics#Ivory_and_Open_Genera\">MacIvory</a>\ndid), but this is all somewhat of an aside because that's not the\nworld we live in.  So as much as I,\nChristine, would love to have tagged architecture (co-)processors, they\nprobably won't happen, except there's some\n<a href=\"https://lowrisc.org/docs/tagged-memory-v0.1/\">RISC-V tagged</a>\n<a href=\"https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_10-3_Weiser_paper.pdf\">architecture</a>\nthings but I don't think they've gotten very far and they seem mostly\nmotivated by a security model that doesn't make any sense to me.\nBut I'd love to be wrong on this!  I would like tagged RISC-V to\nsucceed!  But still, there's the problem of memory management, and\nI don't think anyone's been working on a hardware garbage collector\nor if that would really be a better thing anyway.</p><p>The fact is, there's been a reinforcing effect over the last several\ndecades since the death of the lisp machine: CPUs are optimized for C,\nand C is optimized for CPUs, and both of them try to optimize for each\nother.  So &quot;systems programming&quot; really means &quot;something like C&quot;\nbecause that's what our CPUs like because that's what our languages\nlike and these are pretty much re-inforcing.</p><p>And besides, C is basically the lingua franca of programming\nlanguages, right?  If you want to make something widely portable,\nyou target the C ABI, because pretty much all programming languages\nhave some sort of C FFI toolkit thing or just make C bindings, and\neveryone is happy.  Except, oh wait,\n<a href=\"https://gankra.github.io/blah/c-isnt-a-language/#c-doesnt-actually-have-an-abi\">C doesn't actually have an ABI</a>!\nWell, okay, I guess not, but it doesn't matter because the C ABI\ntriples, that's what the world works with.</p><p>Well also, you gotta target the web, right?  And actually the story\nthere is a bit nicer because <a href=\"https://webassembly.org/\">WebAssembly</a>\nis actually kinda awesome, and the hope and dream is that all\nprogramming languages in some way or another target WebAssembly, and\nthen &quot;you gotta write your thing in Javascript because it's the\nlanguage of the web!!!&quot; is no longer a thing I have to hear anymore.\n(Yes, all my friends who work on Javascript, I appreciate you for\nmaking it the one programming language which has <em>mostly</em> gotten\nbetter over time... hopefully it\n<a href=\"https://scribe.rip/the-tragedy-of-the-common-lisp-why-large-languages-explode-4e83096239b9\">stays that way</a>,\nand best of luck.)\nBut the point is, any interesting programming language these days\nshould be targeting Webassembly, and hopefully not just via\n<a href=\"https://emscripten.org/\">Emscripten</a>, but hopefully via actually\ntargeting Webassembly directly.</p><p>So okay, we have at least two targets for our &quot;system language&quot;: C, or\nsomething that is C-compatible, and Webassembly.\nAnd static type analysis in terms of preventing errors, that's also a\nuseful thing, I won't deny it.  (I think the division of &quot;statically\ntyped&quot; and &quot;dynamically typed&quot; languages is probably more of a false\none than we tend to think, but that's a future blogpost, to be\nwritten.)  And these days, it's <em>also</em> how you get speed while also\nbeing maximally bit-twiddly fast, because that's how our machines\n(including the abstract one in Webassembly) are designed.  So okay,\ngrumbling about conflating two things aside, let's run with that.</p><p>So anyway, I promised to write about this &quot;Guile Steel&quot; thing I've\nbeen musing about, and we've gotten this far in the article, and I\nhaven't yet.  So, this is, more than a concrete proposal, a call to\narms to implement just such a systems language for Guile.  I might\nmake a prototype at some point, but you, dear reader, are free to take\nthe idea of &quot;Guile Steel&quot; and run with it.  In fact, please do.</p><p>So anyway.  First, about the name.  It's probably pretty obvious based\non the name that I'm suggesting this be a language for\n<a href=\"https://www.gnu.org/software/guile/\">Guile</a> Scheme.  And &quot;Guile&quot; as a\nname itself is both a continuation of the kind of playfully\nmischevious names in the Scheme family and its predecessors, but also\na pun on co-founder of the Scheme language, Guy L. Steele.  So &quot;Guile\nSteele&quot; kinda brings that pun home, and &quot;Steel&quot; sounds low-level,\nclose to the metal.</p><p>But also, Guile has a lovely\n<a href=\"https://www.gnu.org/software/guile/manual/html_node/Compiler-Tower.html\">compiler tower</a>.\nIt would be nice to put some more lovely things on it!  Why not a\nsystems language?</p><p>There's some precedent here.  The lovely\n<a href=\"https://www.s48.org/\">Scheme 48</a>'s lowest levels of code\n(including its garbage collector) are written in an interesting\nlanguage called\n<a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.3.4031\">PreScheme</a>\n(<a href=\"https://thintz.com/resources/prescheme-documentation\">more on PreScheme</a>),\nwhich is something that's kind of like Scheme, but not really.\nIt doesn't do automatic garbage collection itself, and I think\nRust has shown that this area could be improved for a more modern\nPreScheme system.\nBut you <em>can</em> hack on it at the REPL, and then it can compile to\nC, and it also has an implementation on Common Lisp, so you can\nbootstrap it a few different ways.\nPreScheme uses a\n<a href=\"https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system\">Hindley-Milner type system</a>;\nI suspect we can do even better with\n<a href=\"https://www.youtube.com/watch?v=jI8gA68OXLM\">a propagator approach</a>\nbut that's untested.\nAnyway, starting by porting PreScheme from Scheme48 to Guile directly\nwould be a good way to get going.</p><p>Guile also has some pretty good reasons to want something like this.\nFor one thing, if you're a\n<a href=\"https://www.gnu.org/software/guile/\">Guile</a>\nperson, then by gosh you're probably\n<a href=\"https://guix.gnu.org/\">a Guix person</a>.\nAnd Rust, it's real popular these days, and for good reasons, we're\nall better of with less memory vulnerabilities in our lives, but you\nknow... it's kind of a pain, packaging wise, I hear?  Actually\nI've never tried packaging anything in Rust but\n<a href=\"https://www.youtube.com/watch?v=ehghWzMXUts\">Efraim certainly has</a>\nand when your presentation starts with the slide &quot;Packaging Rust\ncrates in GNU Guix: How hard could it possibly be?&quot; I guess the\nanswer is going to be that it's a bit of a headache.  So maybe\nit's not the end of the world, but I think it might be nice if on\nthat ground we had our own alternative, but that's just a minor thing.</p><p>And I don't think there's anything wrong with Rust, but I'd love to\nsee... can we do better?  I feel like it could be hackable,\naccessible, and it also could, probably, be a lot of fun?  That's a\ngood reason, I know I'd like something like this myself, I'd like to\nplay with it, I'd like to be able to use it.</p><p>But maybe also... well, let's not beat around the bush, a whole lot\nof Guile is written in C, and our dear wonderful\n<a href=\"https://wingolog.org/\">Andy Wingo</a> has done a lot of lovely things\nto make us less dependent on C, some\n<a href=\"https://wingolog.org/archives/2016/01/11/the-half-strap-self-hosting-and-guile\">half-straps</a>\nand some\n<a href=\"https://wingolog.org/archives/2020/06/03/a-baseline-compiler-for-guile\">baseline compilers</a>\nand just rewriting a lot of stuff in Scheme and so on and so forth but\nit would be nice if we had something we could officially rally around\nas &quot;hey this is the thing we're going to start rewriting things in&quot;,\nbecause you know, C really is kind of a hard world to trust, and I'd\nlike the programming language environment I rely on to not be so\nheavily built on it.</p><p>And at this point in the article, I have to say that\n<a href=\"https://fedi.xerz.one/users/xerz\">Xerz!</a> pointed out that there\nis a thing called <a href=\"https://github.com/carp-lang/Carp\">Carp</a> which\nis indeed a lisp that compiles to C and you know what, I'm pretty\nembarassed for having not paid attention to it... I certainly saw\nit linked at one point but didn't pay enough attention, and... maybe\nit needs a closer look.  Heck, it's written in Haskell, which is a\npretty cool choice.</p><p>But hey, the Guile community still deserves a thing of its own, right?\nWhat do we have that <a href=\"https://www.gnu.org/software/guile/manual/html_node/Compiler-Tower.html\">compiler tower</a>\nfor if we're not going to add some cool things to it?\nAnd... gosh, I'd really like to get Guile in the browser, and there\nare some various paths, and\n<a href=\"https://archive.fosdem.org/2021/schedule/event/webassembly/\">Wingo gave a fun presentation on compiling to Webassembly</a>\nlast year, but wouldn't it be nice if just our whole language stack\nwas written in something designed to compile to either something\nC-like or... something?</p><p>I might do some weekend fiddling towards this direction, but sadly\nthis can't be my main project.  As a call to arms, maybe it inspires\nsomeone to take it up as theirs though.  I will say that if you work\non it, I promise to spend some time using whatever you build and\ntrying it out and sending patches.  So that's it, that's my\nstream-of-consciousness post on Guile Steel: currently an idea...\nmaybe eventually a reality?</p>"], ["updated", "2022-07-09 11:26:00"], ["feed_id", 1], ["fetched", "2022-07-10 07:07:43.060469"], ["created_at", "2022-07-10 07:07:43.334503"], ["updated_at", "2022-07-10 07:07:43.334503"]]
D, [2022-07-10T03:07:43.351158 #3248059] DEBUG -- :   TRANSACTION (13.8ms)  commit transaction
D, [2022-07-10T03:07:43.351963 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.2ms)  SELECT "items".* FROM "items" WHERE "items"."guid" = ? LIMIT ?  [["guid", "https://dustycloud.org/blog/site-converted-to-haunt/"], ["LIMIT", 1]]
[info] ** NEW | Site converted to Haunt
[debug] *** dump item_attribs w/ class types:
[debug]   guid: >https://dustycloud.org/blog/site-converted-to-haunt/< : String
[debug]   title: >Site converted to Haunt< : String
[debug]   url: >https://dustycloud.org/blog/site-converted-to-haunt/< : String
[debug]   updated: >2022-07-05 13:20:00 UTC< : Time
[debug]   published: >< : NilClass
D, [2022-07-10T03:07:43.354101 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:43.355173 #3248059] DEBUG -- :   Pluto::Model::Item Create (0.4ms)  INSERT INTO "items" ("guid", "url", "title", "summary", "updated", "feed_id", "fetched", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [["guid", "https://dustycloud.org/blog/site-converted-to-haunt/"], ["url", "https://dustycloud.org/blog/site-converted-to-haunt/"], ["title", "Site converted to Haunt"], ["summary", "<p>Lo and behold, I've converted the last of the sites I've been managing\nfor ages to <a href=\"https://dthompson.us/projects/haunt.html\">Haunt</a>.</p><p>Haunt isn't well known.  Apparently I am responsible for, er, many of\nthe sites listed on\n<a href=\"https://awesome.haunt.page/\">awesome.haunt.page</a>.\nBut you know what?\nI've been making website things for a long time, and Haunt is honestly\nthe only static site generator I've worked with (and I've worked with\nquite a few) that's actually truly customizable and programmable and\npleasant to work with.\nAnd hackable!</p><p>This site has seen quite a few iterations... some custom code when I\n<a href=\"/blog/new-site-new-blog/\">first launched it</a>\nsome time ago, <a href=\"/blog/switched-blog-to-zine/\">then I used Zine</a>,\n<a href=\"/blog/switched-blog-to-pyblosxom/\">then I used PyBlosxom</a>,\nand for quite a few years\n<a href=\"/blog/switched-blog-to-pyblosxom/\">everything was running on Pelican</a>.\nBut I never liked hacking on any of those... I always kind of\nbegrudgingly opened up the codebase and regretted having to change\nanything.\nBut Haunt?\nHaunt's a dream, it's all there and ready for you, and I've even\ngotten some patches upstream.\n(Actually I owe Dave a few more, heh.)</p><p>Everything is Scheme in Haunt, which means, for instance, that this\npage needed an <a href=\"/archive/\">archive page</a> for ages that actually worked\nand was sensible and I just didn't ever feel like doing it.  But in\nHaunt, it's just delicious <a href=\"https://www.gnu.org/software/guile/\">Guile</a>\nflavored <a href=\"https://en.wikipedia.org/wiki/Scheme_(programming_language)\">Scheme</a>:</p><pre><code><span class=\"syntax-open\">(</span><span class=\"syntax-special\">define</span> <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">archive-tmpl</span> <span class=\"syntax-symbol\">site</span> <span class=\"syntax-symbol\">posts</span><span class=\"syntax-close\">)</span>\n  <span class=\"syntax-comment\">;; build a map of (year -&gt; posts)\n</span>  <span class=\"syntax-open\">(</span><span class=\"syntax-special\">define</span> <span class=\"syntax-symbol\">posts-by-year</span>\n    <span class=\"syntax-open\">(</span><span class=\"syntax-special\">let</span> <span class=\"syntax-open\">(</span><span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">ht</span> <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">make-hash-table</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span>      <span class=\"syntax-comment\">; hash table we're building up\n</span>      <span class=\"syntax-open\">(</span><span class=\"syntax-special\">do</span> <span class=\"syntax-open\">(</span><span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">posts</span> <span class=\"syntax-symbol\">posts</span> <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">cdr</span> <span class=\"syntax-symbol\">posts</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span>  <span class=\"syntax-comment\">; iterate over all posts\n</span>          <span class=\"syntax-open\">(</span><span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">null?</span> <span class=\"syntax-symbol\">posts</span><span class=\"syntax-close\">)</span> <span class=\"syntax-symbol\">ht</span><span class=\"syntax-close\">)</span>           <span class=\"syntax-comment\">; until we're out of posts\n</span>        <span class=\"syntax-open\">(</span><span class=\"syntax-special\">let*</span> <span class=\"syntax-open\">(</span><span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">post</span> <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">car</span> <span class=\"syntax-symbol\">posts</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span>                   <span class=\"syntax-comment\">; put this post in year bucket\n</span>               <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">year</span> <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">date-year</span> <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">post-date</span> <span class=\"syntax-symbol\">post</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span>\n               <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">year-entries</span> <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">hash-ref</span> <span class=\"syntax-symbol\">ht</span> <span class=\"syntax-symbol\">year</span> <span class=\"syntax-symbol\">'</span><span class=\"syntax-open\">(</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span>\n          <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">hash-set!</span> <span class=\"syntax-symbol\">ht</span> <span class=\"syntax-symbol\">year</span> <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">cons</span> <span class=\"syntax-symbol\">post</span> <span class=\"syntax-symbol\">year-entries</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span>\n  <span class=\"syntax-comment\">;; sort all the years\n</span>  <span class=\"syntax-open\">(</span><span class=\"syntax-special\">define</span> <span class=\"syntax-symbol\">sorted-years</span>\n    <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">sort</span> <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">hash-map-&gt;list</span> <span class=\"syntax-open\">(</span><span class=\"syntax-special\">lambda</span> <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">k</span> <span class=\"syntax-symbol\">v</span><span class=\"syntax-close\">)</span> <span class=\"syntax-symbol\">k</span><span class=\"syntax-close\">)</span> <span class=\"syntax-symbol\">posts-by-year</span><span class=\"syntax-close\">)</span> <span class=\"syntax-symbol\">&gt;</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span>\n  <span class=\"syntax-comment\">;; rendering for one year\n</span>  <span class=\"syntax-open\">(</span><span class=\"syntax-special\">define</span> <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">year-content</span> <span class=\"syntax-symbol\">year</span><span class=\"syntax-close\">)</span>\n    <span class=\"syntax-symbol\">`</span><span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">div</span> <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">@</span> <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">style</span> <span class=\"syntax-string\">&quot;margin-bottom: 10px;&quot;</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span>\n          <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">h3</span> <span class=\"syntax-symbol\">,year</span><span class=\"syntax-close\">)</span>\n          <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">ul</span> <span class=\"syntax-symbol\">,@</span><span class=\"syntax-open\">(</span><span class=\"syntax-special\">map</span> <span class=\"syntax-symbol\">post-content</span>\n                     <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">posts/reverse-chronological</span>\n                      <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">hash-ref</span> <span class=\"syntax-symbol\">posts-by-year</span> <span class=\"syntax-symbol\">year</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span>\n  <span class=\"syntax-comment\">;; rendering for one post within a year\n</span>  <span class=\"syntax-open\">(</span><span class=\"syntax-special\">define</span> <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">post-content</span> <span class=\"syntax-symbol\">post</span><span class=\"syntax-close\">)</span>\n    <span class=\"syntax-symbol\">`</span><span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">li</span>\n      <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">a</span> <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">@</span> <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">href</span> <span class=\"syntax-symbol\">,</span><span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">post-uri</span> <span class=\"syntax-symbol\">site</span> <span class=\"syntax-symbol\">post</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span>\n         <span class=\"syntax-symbol\">,</span><span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">post-ref</span> <span class=\"syntax-symbol\">post</span> <span class=\"syntax-symbol\">'title</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span>\n  <span class=\"syntax-comment\">;; the whole page\n</span>  <span class=\"syntax-open\">(</span><span class=\"syntax-special\">define</span> <span class=\"syntax-symbol\">content</span>\n    <span class=\"syntax-symbol\">`</span><span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">div</span> <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">@</span> <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">class</span> <span class=\"syntax-string\">&quot;entry&quot;</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span>\n          <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">h2</span> <span class=\"syntax-string\">&quot;Blog archive (by year)&quot;</span><span class=\"syntax-close\">)</span>\n          <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">ul</span> <span class=\"syntax-symbol\">,@</span><span class=\"syntax-open\">(</span><span class=\"syntax-special\">map</span> <span class=\"syntax-symbol\">year-content</span> <span class=\"syntax-symbol\">sorted-years</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span>\n  <span class=\"syntax-comment\">;; render within base template\n</span>  <span class=\"syntax-open\">(</span><span class=\"syntax-symbol\">base-tmpl</span> <span class=\"syntax-symbol\">site</span> <span class=\"syntax-symbol\">content</span><span class=\"syntax-close\">)</span><span class=\"syntax-close\">)</span></code></pre><p><a href=\"https://en.wikisource.org/wiki/Lambda_Papers\">Lambda, the ultimate</a>\nstatic site generator!</p><p>At any rate, I expect some things are broken, to be fixed, etc.\n<a href=\"/contact/\">Let me know</a> if you see 'em.\nHeck, you can <a href=\"https://gitlab.com/dustyweb/dustycloud.org\">browse the site contents</a>\nshould you be so curious!</p><p>But is there really anything more boring than a meta &quot;updated my\nwebsite code&quot; post like this?\nAnyway, in the meanwhile I've corrected straggling instances of my\ndeadname which were sitting around.\nThe last post I made was me\n<a href=\"https://dustycloud.org/blog/nonbinary-trans-femme/\">coming out as trans</a>,\nand... well a lot has changed since then.\nSo I guess I've got some more things to write.\nAnd also this whole theme... well I like some of it but I threw it\ntogether when I was but a wee web developer, back before CSS was actually\nnice to write, etc.\nSo maybe I need to overhaul the look and feel too.\nAnd I always meant to put in that project directory, and ooh maybe an\nart gallery, and so on and so on...</p><p>But hey, I like updating my website again!  So maybe I actually will!</p>"], ["updated", "2022-07-05 13:20:00"], ["feed_id", 1], ["fetched", "2022-07-10 07:07:43.060469"], ["created_at", "2022-07-10 07:07:43.353314"], ["updated_at", "2022-07-10 07:07:43.353314"]]
D, [2022-07-10T03:07:43.371287 #3248059] DEBUG -- :   TRANSACTION (15.6ms)  commit transaction
D, [2022-07-10T03:07:43.372449 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.2ms)  SELECT "items".* FROM "items" WHERE "items"."guid" = ? LIMIT ?  [["guid", "https://dustycloud.org/blog/nonbinary-trans-femme/"], ["LIMIT", 1]]
[info] ** NEW | Hello, I'm Chris Lemmer-Webber, and I'm nonbinary trans-femme
[debug] *** dump item_attribs w/ class types:
[debug]   guid: >https://dustycloud.org/blog/nonbinary-trans-femme/< : String
[debug]   title: >Hello, I'm Chris Lemmer-Webber, and I'm nonbinary trans-femme< : String
[debug]   url: >https://dustycloud.org/blog/nonbinary-trans-femme/< : String
[debug]   updated: >2021-06-28 18:13:00 UTC< : Time
[debug]   published: >< : NilClass
D, [2022-07-10T03:07:43.374404 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:43.375697 #3248059] DEBUG -- :   Pluto::Model::Item Create (0.7ms)  INSERT INTO "items" ("guid", "url", "title", "summary", "updated", "feed_id", "fetched", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [["guid", "https://dustycloud.org/blog/nonbinary-trans-femme/"], ["url", "https://dustycloud.org/blog/nonbinary-trans-femme/"], ["title", "Hello, I'm Chris Lemmer-Webber, and I'm nonbinary trans-femme"], ["summary", "<p><img src=\"https://dustycloud.org/gfx/goodies/chris-and-morgan-2021-06-27.jpg\" alt=\"A picture of Chris and Morgan together\" /></p><p>I recently came out as nonbinary trans-femme.\nThat's a picture of me on the left, with my spouse Morgan Lemmer-Webber\non the right.</p><p>In a sense, not much has changed, and so much has changed.\nI've dropped the &quot;-topher&quot; from my name, and given the common tendency\nto apply gender to pronouns in English, please either use nonbinary\npronouns or feminine pronouns to apply to me.\nOther changes are happening as I wander through this space, from\nappearance to other things.\n(Probably the biggest change is finally achieving something resembling\nself-acceptance, however.)</p><p>If you want to know more,\n<a href=\"https://fossandcrafts.org/episodes/30-gender-sexuality-personal-perspective.html\">Morgan and I did a podcast episode</a>\nwhich explains more from my present standing, and also explains Morgan's\nexperiences with being demisexual, which not many people know about!\n(Morgan has been incredible through this whole process, by the way.)</p><p>But things may change further.\nMaybe a year from now those changes may be even more drastic, or maybe\nnot.\nWe'll see.\nI am wandering, and I don't know where I will land, but it won't be\nback to where I was.</p><p>At any rate, I've spent much of my life not being able to stand myself\nfor how I look and feel.\nFor most of my life, I have not been able to look at myself in a mirror\nfor more than a second or two due to the revulsion I felt at the person\nI saw staring back at me.\nThe last few weeks have been a shift change for me in that regard...\nit's a very new experience to feel so happy with myself.</p><p>I'm only at the beginning of this journey.\nI'd appreciate your support... people have been incredibly kind to me\nby and large so far but like everyone who goes through a process like this,\nit's very hard in those experiences where people aren't.\nThank you to everyone who has been there for me so far.</p>"], ["updated", "2021-06-28 18:13:00"], ["feed_id", 1], ["fetched", "2022-07-10 07:07:43.060469"], ["created_at", "2022-07-10 07:07:43.373531"], ["updated_at", "2022-07-10 07:07:43.373531"]]
D, [2022-07-10T03:07:43.390883 #3248059] DEBUG -- :   TRANSACTION (14.6ms)  commit transaction
D, [2022-07-10T03:07:43.391769 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.2ms)  SELECT "items".* FROM "items" WHERE "items"."guid" = ? LIMIT ?  [["guid", "https://dustycloud.org/blog/what-is-a-blockchain-really/"], ["LIMIT", 1]]
[info] ** NEW | Beyond the shouting match: what is a blockchain, really?
[debug] *** dump item_attribs w/ class types:
[debug]   guid: >https://dustycloud.org/blog/what-is-a-blockchain-really/< : String
[debug]   title: >Beyond the shouting match: what is a blockchain, really?< : String
[debug]   url: >https://dustycloud.org/blog/what-is-a-blockchain-really/< : String
[debug]   updated: >2021-04-24 15:30:00 UTC< : Time
[debug]   published: >< : NilClass
D, [2022-07-10T03:07:43.394186 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:43.397152 #3248059] DEBUG -- :   Pluto::Model::Item Create (0.7ms)  INSERT INTO "items" ("guid", "url", "title", "summary", "updated", "feed_id", "fetched", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [["guid", "https://dustycloud.org/blog/what-is-a-blockchain-really/"], ["url", "https://dustycloud.org/blog/what-is-a-blockchain-really/"], ["title", "Beyond the shouting match: what is a blockchain, really?"], ["summary", "<p>If there's one thing that's true about the word &quot;blockchain&quot;, it's that\nthese days people have strong opinions about it.\nOpen your social media feed and you'll see people either heaping praises\non blockchains, calling them the saviors of humanity, or condemning them\nas destroying and burning down the planet and making the rich richer\nand the poor poorer and generally all the other kinds of fights that\npeople like to have about capitalism (also a quasi-vague word\noccupying some hotly contested mental real estate).</p><p>There are good reasons to hold opinions about various aspects of what\nare called &quot;blockchains&quot;, and I too have some pretty strong opinions\nI'll be getting into in a followup article.\nThe followup article will be about &quot;cryptocurrencies&quot;, which many people\nalso seem to think of as synonymous with &quot;blockchains&quot;, but this isn't\nparticularly true either, but we'll deal with that one then.</p><p>In the meanwhile, some of the fighting on the internet is kind of\nconfusing, but even more importantly, kind of confused.\nSome of it might be what I call &quot;sportsballing&quot;: for whatever reason,\nfor or against blockchains has become part of your local sportsball\nteam, and we've all got to be team players or we're gonna let the local\nteam down already, right?\nAnd the thing about sportsballing is that it's kind of arbitrary and\nit kind of isn't, because you might pick a sportsball team because you\ndid all your research or you might have picked it because that just\nhappens to be the team in your area or the team your friends like, but\ngod almighty once you've picked your sportsball team let's actually not\ntalk against it because that might be giving in to the other side.\nBut sportsballing kind of <em>isn't</em> arbitrary either because it tends to\nbe initially connected to real communities of real human beings and\nthere's usually a deeper cultural web than appears at surface level,\nso when you're poking at it, it appears surface-level shallow but\nthere are some real intricacies beneath the surface.  (But anyway, go\nsportsball team.)</p><p>But I digress.\nThere are important issues to discuss, yet people aren't really\ndiscussing them, partly because <em>people mean different things</em>.\n&quot;Blockchain&quot; is a strange term that encompasses a wide idea space,\nand what people consider or assume essential to it vary just as\nwidely, and thus when two people are arguing they might not even be\narguing about the same thing.\nSo let's get to unpacking.</p><h2>&quot;Blockchain&quot; as handwaving towards decentralized networks in general</h2><p>Years ago I was at a conference about decentralized networked\ntechnology, and I was having a conversation with someone I had just met.\nThis person was telling me how excited they were about\nblockchains... finally we have decentralized network designs, and so\nthis seems really useful for society!</p><p>I paused for a moment and said yes, blockchains can be useful for some\nthings, though they tend to have significant costs or at least\ntradeoffs.  It's good that we also have other decentralized network\ntechnology; for example, the <a href=\"https://www.w3.org/TR/activitypub/\">ActivityPub</a>\nstandard I was involved in had no blockchains but did rely on the\nmuch older &quot;classic actor model.&quot;</p><p>&quot;Oh,&quot; the other person said, &quot;I didn't know there were other kinds of\ndecentralized network designs.  I thought that 'blockchain' just meant\n'decentralized network technology'.&quot;</p><p>It was as if a light had turned on and illuminated the room for me.  Oh!\nThis explained so many conversations I had been having over the years.\nOf course... for many people, blockchains like Bitcoin were the first\never exposure they had (aside from email, which maybe they never gave\nmuch thought to as being decentralized) of something that involved\na decentralized protocol.  So for many people, &quot;blockchain&quot; and\n&quot;decentralized technology&quot; are synonyms, if not in technical design,\nbut in terms of understanding of a space.</p><p>Mark S. Miller, who was standing next to me, smiled and gave a very\ninteresting followup: &quot;There is only one case in which you need a\nblockchain, and that is in a decentralized system which needs to\nconverge on a single order of events, such as a public ledger\ndealing with the\n<a href=\"https://en.wikipedia.org/wiki/Double-spending#Decentralized_currencies\">double spending problem</a>.&quot;</p><p>Two revelations at once.  It was a good conversation... it was a good\nstart.\nBut I think there's more.</p><h2>Blockchains are the &quot;cloud&quot; of merkle trees</h2><p>As time has gone on, the discourse over blockchains has gotten more\ndramatic.  This is partly because what a &quot;blockchain&quot; is hasn't been\nwell defined.</p><p>All terminology exists on an ever-present battle between\n<a href=\"https://fossandcrafts.org/episodes/23-nerdout-fuzzy-and-crisp.html\">fuzziness and crispness</a>,\nwith some terms being much clearer than others.\nThe term &quot;boolean&quot; has a fairly crisp definition in computer science,\nbut if I ask you to show me your &quot;stove&quot;, the device you show me today\nmay be incomprehensible to someone's definition a few centuries ago,\nparticularly in that today it might not involve fire.\nTrying to define as in terms of its functionality can also cause\nconfusion: if I asked you to show me a stove, and you showed me a\ncomputer processor or a car engine, I might be fairly confused, even\nthough technically people enjoy showing off that they can cook eggs on\nboth of these devices when they get hot enough.\n(See also: <a href=\"https://dustycloud.org/blog/identity-is-a-katamari/\">Identity is a Katamari, language is a Katamari explosion</a>.)</p><p>Still, some terms are fuzzier than others, and as far as terms go,\n&quot;blockchain&quot; is quite fuzzy.\nHence my joke: &quot;Blockchains are the 'cloud' of merkle trees.&quot;</p><p>This ~joke tends to get a lot of laughs out of a particular kind of\naudience, and confused looks from others, so let me explain.\nThe one thing everyone seems to agree on is that it's a &quot;chain of\nblocks&quot;, but all that really seems to mean is that it's a\n<a href=\"https://en.wikipedia.org/wiki/Merkle_tree\">merkle tree</a>... really,\njust an immutable datastructure where one node points at the parent node\nwhich points at the parent node all the way up.\nThe joke then is not that this merkle tree runs <em>on</em> a cloud, but that\n&quot;cloud computing&quot; means approximately nothing: it's marketing speak for\nsome vague handwavey set of &quot;other peoples' computers are doing\ncomputation somewhere, possibly on your behalf sometimes.&quot;\nTherefore, &quot;cloud of merkle trees&quot; refers to the vagueness of the\nsituation.\n(As everyone knows, jokes are funnier when fully explained, so I'll\nturn on my &quot;STUDIO LAUGHTER&quot; sign here.)</p><p>So, a blockchain is a chain of blocks, ie a merkle tree, and I mean,\ntechnically speaking, that means that <a href=\"https://git-scm.com/\">Git</a> is a\nblockchain (especially if the commits are signed), but when you see\nsomeone arguing on the internet about whether or not blockchains are\n&quot;good&quot; or &quot;bad&quot;, they probably weren't thinking about git, which aside\nfrom having a high barrier of entry in its interface and some concerns\nabout the hashing algorithm used, isn't really something likely to\ndrag you into an internet flamewar.</p><h2>&quot;Blockchain&quot; is to &quot;Bitcoin&quot; what &quot;Roguelike&quot; is to &quot;Rogue&quot;</h2><p>These days it's common to see people either heaping praises on\nblockchains or criticizing them, and those people tend to be shouting\npast one another.\nI'll save unpacking that for another post.\nIn the meanwhile though, it's worth noting that people might not be\ntalking about the same things.</p><p>What isn't in doubt is whether or not\n<a href=\"https://en.wikipedia.org/wiki/Bitcoin\">Bitcoin</a>\nis a blockchain... trying to understand and then explore the problem\nspace around Bitcoin is what <em>created</em> the term &quot;blockchain&quot;.\nIt's a bit like the video game genre of\n<a href=\"https://en.wikipedia.org/wiki/Roguelike\">roguelikes</a>,\nwhich started with the game\n<a href=\"https://en.wikipedia.org/wiki/Rogue_%28video_game%29\">Rogue</a>,\nparticularly explored and expanded upon in\n<a href=\"https://en.wikipedia.org/wiki/NetHack\">NetHack</a>,\nand then suddenly exploding into the indie game scene as a &quot;genre&quot;\nof its own.\nExcept the genre has become fuzzier and fuzzier as people have explored\nthe surrounding space.\nWhat is essential?\nIs a grid based layout essential?\nIs a <a href=\"http://roguetemple.com/z/hyper/\">non-euclidean grid</a> acceptable?\nDo you have to provide an ascii or ansi art interface so people can play\nin their terminals?\nDare we allow unicode characters?\nWhat if we throw out terminals altogether and just play on a grid\nof 2d pixelart?\nWhat about 3d art?\nWhat about permadeath?\nWhat about the fantasy theme?\nWhat about random level generation?\nWhat are the <a href=\"https://en.wikipedia.org/wiki/Roguelike#Key_features\">key features</a>\nof a roguelike?</p><p>Well now we're at the point where I pick up a game like\n<a href=\"https://blazingbeaks.fandom.com/wiki/Blazing_Beaks_Wiki\">Blazing Beaks</a>\nand it calls itself a\n<a href=\"https://en.wikipedia.org/wiki/Roguelike#Rogue-lites_and_procedural_death_labyrinths\">&quot;roguelite&quot;</a>,\nwhich I guess is embracing the point that terminology has gotten extremely\nfuzzy... this game feels more like\n<a href=\"https://en.wikipedia.org/wiki/Robotron\">Robotron</a>\nthan <a href=\"https://en.wikipedia.org/wiki/Rogue_%28video_game%29\">Rogue</a>.</p><p>So... if &quot;blockchain&quot; is to Bitcoin what &quot;roguelike&quot; is to Rogue, then\nwhat's essential to a blockchain?\nDoes the blockchain have to be applied to a financial instrument, or\ncan it be used to store updateable information about eg identity?\nIs global consensus required?\nOr what about a &quot;trusted quorum&quot; of nodes, such as in Hyperledger?\nIs &quot;mining&quot; some kind of asset a key part of the system?\nIs proof of work acceptable, or is proof of stake okay?\nWhat about proof of space, proof of space-time, proof of pudding?</p><p>On top of all this, some of the terms <em>around</em> blockchains have been\nabsorbed as if into them.\nFor instance, I think to many people, &quot;smart contract&quot; means something\nlike &quot;code which runs on a blockchain&quot; thanks to Ethereum's major\nadoption of the term, but the\n<a href=\"http://www.erights.org/\">E programming language</a>\ndescribed &quot;smart contracts&quot; as the &quot;likely killer app of distributed\ncapabilities&quot; all the way\n<a href=\"https://web.archive.org/web/19990125095122/http://www.erights.org/\">back in 1999</a>,\nand was\n<a href=\"https://web.archive.org/web/19990209105758/http://www.best.com/%7Eszabo/smart_contracts_idea.html\">borrowing the term</a>\nfrom\n<a href=\"https://web.archive.org/web/19990128165611/http://www.best.com/%7Eszabo/\">Nick Szabo</a>,\nbut really the same folks working on E had described many of those same\nideas in the <a href=\"https://agoric.com/papers/\">Agoric Papers</a> back in 1988.\nBitcoin wasn't even a thing at all until at least 2008, so depending on\nhow you look at it, &quot;smart contracts&quot; precede &quot;blockchains&quot; by one or\ntwo decades.\nSo &quot;blockchain&quot; has somehow even rolled up terms <em>outside</em> of its space\nas if within it.\n(By the way, I don't think anyone has given a good and crisp definition\nfor &quot;smart contract&quot; either despite some of these people trying to give\nme one, so let me give you one that I think is better and embraces its\nfuzziness: &quot;Smart contracts allow you to do the kinds of things you\nmight do with legal contracts, but relying on networked computation\ninstead of a traditional state-based legal system.&quot;\nIt's too bad more people also don't know about the huge role that Mark\nMiller's &quot;split contracts&quot; idea plays into this space because that's\nwhat makes the idea finally makes sense... but that's a conversation\nfor another time.)\n(<strong>EDIT:</strong> Well, after I wrote this, Kate Sills lent me her\ndefinition, which I think is the best one: &quot;Smart contracts are\ncredible commitments using technology, and outside a state-provided\nlegal system.&quot;  I like it!)</p><p>So anyway, the point of this whole section is to say that kind of like\nroguelike, people are thinking of different things as essential to\nblockchains.\nEveryone roughly agrees on the jumping-off point of ideas but since\nnot everyone agrees from there, it's good to check in when we're having\nthe conversation.\nWait, you do/don't like this game because it's a roguelike?\nMaybe we should check in on what features you mean.\nLikewise for blockchains.\nBecause if you're blaming blockchains for burning down the planet, more\nthan likely you're not condemning signed git repositories (or at least,\nif you're condemning them, you're probably doing so about it from an\naspect that isn't the fundamental datastructure... probably).</p><p>This is an &quot;easier said than done&quot; kind of thing though, because of\ncourse, I'm kind of getting into some &quot;in the weeds&quot; level of details\nhere... but it's the &quot;in the weeds&quot; where all the substance of the\ndisagreements really are.\nThe person you are talking with might not actually even know or consider\nthe same aspects to be essential that you consider essential though,\nso taking some time to ask which things we mean can help us lead to a\nmore productive conversation sooner.</p><h2>&quot;Blockchain&quot; as an identity signal</h2><p>First, a digression.\nOne thing that's kind of curious about the term\n<a href=\"https://en.wikipedia.org/wiki/Virtue_signaling\">&quot;virtue signal&quot;</a>\nis that in general it tends to be used as a kind of virtue signal.\nIt's kind of like the word\n<a href=\"https://en.wikipedia.org/wiki/Hipster_%28contemporary_subculture%29\">hipster</a>\nin the previous decade, which weirdly seemed to be obsessively and\npejoratively used by people who resembled hipsters than anyone else.\nHence I used to make a joke called &quot;hipster recursion&quot;, which is that\nsince hipsters seem more obsessesed with pejorative labeling of\nhipsterism than anyone else, there's no way to call someone a &quot;hipster&quot;\nwithout yourself taking on hipster-like traits, and so inevitably\neven this conversation is N-levels deep into hipster recursion\nfor some numerical value of N.</p><p>&quot;Virtue signaling&quot; appears similar, but <em>even more</em> ironically so\n(which is a pretty amazing feat given how much of hipsterdom seems to\nsurround a kind of inauthentic irony).\nWhen I hear someone say &quot;virtue signaling&quot; with a kind of sneer, part\nof that seems to be acknowledging that other people are sending signals\nmerely to impress others that they are some kind of the same group but\nit seems as if it's being raised as in a\nyou-know-and-I-know-that-by-me-acknowledging-this-I'm-above-virtue-signaling\nkind of way.\nExcept that by any possible definition of virtue signaling, the above\nappears to be a kind of virtue signaling, so now we're into virtue\nsignaling recursion.</p><p>Well, one way to claw our way out of the rabbithole of all this is to\ndrop the pejorative aspect of it and just acknowledge that signaling\nis something that everyone does.\nHence me saying &quot;identity signaling&quot; here.\nYou can't really escape identity signaling, or even sportsballing, but\nyou can acknowledge that it's a thing that we all do, and there's a\nreason for it: people only have so much time to find out information\nabout each other, so they're searching for clues that they might align\nand that, if they introduce you to their peer group, that you might\nalign with them as well, without access to a god-like view of the\nuniverse where they know <em>exactly</em> what you think and <em>exactly</em> what\nkinds of things you've done and <em>exactly</em> what way you'll behave in\nthe future or whether or not you share the same values.\n(After all, what else is\n<a href=\"https://en.wikipedia.org/wiki/Virtue_ethics\">virtue ethics</a>\nbut an ethical framework that takes this in its most condensed form as\nits foundation?)\nBut it's true that at its worst, this seems to result in shallow, quick,\njudgmental behavior, usually based on stereotypes of the other side...\nwhich can be unfortunate or unfair to whomever is being talked about.\nBut also on the flip side, people also do identity signal to each other\nbecause they <em>want</em> to create a sense of community and bonding.\nThat's what a lot of culture <em>is</em>.\nIt's worth acknowledging then that this occurs, recognizing its use and\nlimitations, without pretending that we are above it.</p><p>So wow, that's quite a major digression, so now let's get back to\n&quot;identity signaling&quot;.\nThere is definitely a <em>lot</em> of identity signaling that tends to happen\naround the word &quot;blockchain&quot;, for or against.\nAround the critiques of the worst of this, I tend to agree: I find much\nof the machismo hyper-white-male-privilege that surrounds some of the\n&quot;blockchain&quot; space uncomfortable or cringey.</p><p>But I also have some close friends who are not male and/or are people\nof color and those ones tend to actually <em>suffer the worst of it</em> from\nthese communities internally, but also seem to find things of value in\nthem, but particularly seem to feel squeezed externally when the field\nis <em>reduced to</em> these kinds of (anti?-)patterns.\nThere's something sad about that, where I see on the one hand friends\ncomplaining about blockchain from the outside on behalf of people who\non the inside seem to be both struggling internally but then kind of\ncrushed by being lumped into the same identified problems externally.\nThis is hardly a unique problem but it's worth highlighting for a moment\nI think.</p><p>But anyway, I've taken a bunch of time on this, more than I care to,\nmaybe because (irony again?) I feel that too much of public conversation\nis also hyperfocusing on this aspect... whether there's a subculture\naround blockchain, whether or not that subculture is good or bad, etc.\nThere's a lot worthwhile in unpacking this discourse-wise, but some of\nthe criticisms of blockchains as a <em>technology</em> (to the extent it even\nis coherently one) seem to get lumped up into all of this.\nIt's good to provide thoughtful cultural critique, particularly one\nwhich encourages healthy social change.\nAnd we can't escape identity signaling.\nBut as someone who's trying to figure out what properties of networked\nsystems we do and don't want, I feel like I'm trying to navigate the\nmachine and for whatever reason, my foot keeps getting caught in the\ngears here.\nWell, maybe that itself is pointing to some architectural mistakes,\nbut socially architectural ones.\nBut it's useful to also be able to draw boundaries around it so that\nwe know where this part of the conversation begins and ends.</p><h2>&quot;Blockchain&quot; as &quot;decentralized centralization&quot; (or &quot;decentralized convergence&quot;)</h2><p>One of the weird things about people having the idea of &quot;blockchains&quot; as\nbeing synonymous with &quot;decentralization&quot; is that it's kind of both very\ntrue and very <em>untrue</em>, depending on what abstraction layer you're\nlooking at.</p><p>For a moment, I'm going to frame this in harsh terms: blockchains are\ndecentralized centralization.</p><p>What?\nHow dare I!\nYou'll notice that this section is in harsh contrast to the\n&quot;blockchain as handwaving towards decentralized networks in general&quot;\nsection... well, I <em>am</em> acknowledging the decentralized aspect of it,\nbut the weird thing about a blockchain is that it's a decentralized\nset of nodes <em>converging on</em> (creating a centrality of!) a single\nabstract machine.</p><p>Contrast with\n<a href=\"https://en.wikipedia.org/wiki/Actor_model#Fundamental_concepts\">classic actor model</a>\nsystems like\n<a href=\"http://erights.org/elib/distrib/captp/index.html\">CapTP</a>\nin <a href=\"https://spritelyproject.org/#goblins\">Spritely Goblins</a>,\nor as less good examples\n(because they aren't quite as behavior-oriented as they are\ncorrespondence-oriented, usually)\n<a href=\"https://www.w3.org/TR/activitypub/\">ActivityPub</a>\nor\n<a href=\"https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol\">SMTP</a>\n(ie, email).\nAll of these systems involve decentralized computation and collaboration\nstemming from sending messages to actors (aka &quot;distributed objects&quot;).\nOf CapTP this is especially clear and extreme: computations happen in\nparallel across many collaborating machines (and even better, many\ncollaborating objects on many collaborating machines), and the behavior\nof other machines and their objects is often even opaque to you.\n(CapTP survives this in a beautiful way, being able to do well on\nanonymous, peer to peer, &quot;mutually suspicious&quot; networks.\nBut maybe read my\n<a href=\"https://spritelyproject.org/news/what-is-captp.html\">rambling thoughts about CapTP</a>\nelsewhere.)</p><p>While to some degree there are some very\n<a href=\"https://en.wikipedia.org/wiki/Homomorphic_encryption\">clever</a>\n<a href=\"https://en.wikipedia.org/wiki/Zero-knowledge_proof\">tricks</a>\nin the world of cryptography where you may be able to get back some of\nthe opacity, this tends to be very expensive, adding an expensive\ncomponent to the already inescapable additional expenses of a\nblockchain.\nA multi-party blockchain with some kind of consensus\n<em>will always, by definition</em> be slower than a single machine operating\nalone.</p><p>If you are irritated by this framing: good.\nIt's probably good to be irritated by it at least once, if you can\nrecognize the portion of truth in it.\nBut maybe that needs some unpacking to get there.\nIt might be better to say &quot;blockchains are decentralized <em>convergence</em>&quot;,\nbut I have some other phrasing that might be helpful.</p><h2>&quot;Blockchain&quot; as &quot;a single machine that many people run&quot;</h2><p>There's value in having a single abstract machine that many people run.\nThe most famous source of value is in the &quot;double spending problem&quot;.\nHow do we make sure that when someone has money, they don't spend that\nmoney twice?</p><p>Traditional accounting solves this with a linear, sequential ledger,\nand it turns out that the right solution boils down to the same thing\nin computers.\nEmphasis on <em>sequential</em>: in order to make sure money balances out\nright, we really do have to be able to order things.</p><p>Here's the thing though: the double spending problem was in a sense\nsolved in terms of single-computers a long time ago in the object\ncapability security community.\n<a href=\"http://erights.org/elib/capability/ode/index.html\">Capability-based Financial Instruments</a>\nwas written about a <em>decade</em> before blockchains even existed and\nshowed off how to make a &quot;mint&quot; (kind of like a fiat-currency bank)\nthat can be implemented in about 25 lines of code in the right\narchitecture (I've <a href=\"https://gitlab.com/spritely/goblins/-/blob/4f664218c87fa96432a04d0a107618ec36ab9310/goblins/actor-lib/simple-mint.rkt#L13\">ported it to Goblins</a>,\nfor instance) and yet has both distributed accounts and is robust\nagainst corruption on errors.</p><p>However, this seems to be running on a &quot;single-computer based\nmachine&quot;, and again operates like a fiat currency.\nAnyone can create their own fiat currency like this, and they are\ncheap, cheap, cheap (and fast!) to make.\nBut it does rely on sequentiality to some degree to operate correctly\n(avoiding a class of attacks called &quot;re-entrancy attacks&quot;).</p><p>But this &quot;single-computer based machine&quot; might bother you for a couple\nreasons:</p><ul><li><p>We might be afraid the server might crash and service will be\ninterrupted, or worse yet, we will no longer be able to access our\naccounts.</p></li><li><p>Or, even if we could trade these on an open market, and maybe\ndiversify our portfolio, maybe we don't want to <em>have to</em> trust a\nsingle operator or even some appointed team of operators... maybe we\nhave a lot of money in one of these systems and we want to be sure\nthat it won't suddenly vanish due to corruption.</p></li></ul><p>Well, if our code operates deterministically, then what if from the\nsame initial conditions (or saved snapshot of the system) we replay\nall input messages to the machine?\nFunctional programmers know: we'll end up with the same result.</p><p>So okay, we might want to be sure this doesn't accidentally get\ncorrupted, maybe for backup reasons.\nSo maybe we submit the input messages to <em>two</em> computers, and then\nif one crashes, we just continue on with the second one until the\nother comes up, and then we can restore the first one from the\nprogress the second machine made while the first one was down.</p><p>Oh hey, this is already technically a blockchain.\nExcept our trust model is that we implicitly trust <em>both</em> machines.</p><p>Hm.\nMaybe we're now worried that we might have top-down government\npressure to coerce some behavior on one of our nodes, or maybe we're\nworried that someone at a local datacenter is going to flip some bits\nto make themselves rich.\nSo we actually want to spread this abstract machine out over three\ncountries.\nSo okay, we do that, and now we set a rule agreeing on what all the\nseries of input messages are... if two of three nodes agree, that's\ngood enough.\nOh hey look, we've just invented the &quot;small-quorum-style&quot;\nblockchain/ledger!</p><p>(And yes, you can wire up <a href=\"https://docs.racket-lang.org/goblins/index.html\">Goblins</a>\nto do just this; a hint as to how is seen in the\n<a href=\"https://dustycloud.org/blog/goblins-time-travel-micropreview/\">Terminal Phase time travel demo</a>.\nActually, let's come back to that later.)</p><p>Well, okay.\nThis is probably good enough for a private financial asset, but what\nabout if we want to make something more... global?\nWhere nobody is in charge!</p><p>Well, we could do that too.\nHere's what we do.</p><ul><li><p>First, we need to prevent a &quot;swarming attack&quot; (okay, this is\ngenerally called a &quot;sybil attack&quot; in the literature, but for a\nmultitude of reasons I won't get into, I don't like that term).\nIf a global set of peers are running this single abstract machine,\nwe need to make sure there aren't invocations filling up the system\nwith garbage, since we all basically have to keep that information\naround.\nWell... this is exactly where those proof-of-foo systems come in\nthe first time; in fact Proof of Work's origin is in something\ncalled <a href=\"https://en.wikipedia.org/wiki/Hashcash\">Hashcash</a> which\nwas designed to add &quot;friction&quot; to disincentivize spam for email-like\nsystems.\nIf we don't do something friction-oriented in this category, our\nledger is going to be too easily filled with garbage too fast.\nWe also need to agree on what the <em>order</em> of messages is, so we\ncan use this mechanism in conjuction with a consensus algorithm.</p></li><li><p>When are new units of currency issued?\nWell, in our original mint example, the person who set up the mint\nwas the one given the authority to make new money out of thin air\n(and they can hand out attenuated versions of that authority to\nothers as they see fit).\nBut what if instead of handing this capability out to <em>individuals</em>\nwe handed it out to <em>anyone who can meet an abstract requirement</em>?\nFor instance, in <a href=\"https://w3c-ccg.github.io/zcap-ld/\">zcap-ld</a>\nan invoker can be any kind of entity which is specified with\n<a href=\"https://w3c-ccg.github.io/ld-proofs/\">linked data proofs</a>,\nmeaning those entities can be something other than a single key...\nfor instance, what if we delegated to an abstract invoker that was\nspecified as being &quot;whoever can solve the state of the machine's current\nproof-of-work puzzle&quot;?\nOh my gosh!\nWe just took our 25-line mint and extended it for mining-style\nblockchains.\nAnd the fundamental design still applies!</p></li></ul><p>With these two adjustments, we've created a &quot;public blockchain&quot; akin\nto bitcoin.\nAnd we don't need to use proof-of-work for either technically...\nwe could swap in different mechanisms of friction / qualification.</p><p>If the set of inputs are stored as a merkle tree, then all of the\nsystem types we just looked at are technically blockchains:</p><ul><li><p>A second machine as failover in a trusted environment</p></li><li><p>Three semi-trusted machines with small-scale private consensus</p></li><li><p>A public blockchain without global trust, with swarming-attack\nresistance and an interesting abstract capability accessible\nto anyone who can meet the abstract requirement (in this case,\nto issue some new currency).</p></li></ul><p>The difference for choosing any of the above is really a question of:\n&quot;what is your trust/failover requirements?&quot;</p><h2>Blockchains as time travel plus convergent inputs</h2><p>If this doesn't sound believable to you, that you could create\nsomething like a &quot;public blockchain&quot; on top of something like Goblins\nso easily, consider how we might extend\n<a href=\"https://dustycloud.org/blog/goblins-time-travel-micropreview/\">time travel in Terminal Phase</a>\nto add multiplayer.\nAs a reminder, here's an image:</p><p><img src=\"https://dustycloud.org/gfx/goodies/terminal-phase-goblins-time-travel.gif\" alt=\"Time travel in Spritely Goblins shown through Terminal Phase\" /></p><p>Now, a secret thing about Terminal Phase is that the gameplay is\ndeterministic (the random starfield in the background is not, but the\ngameplay is) and runs on a fixed frame-rate.\nThis means that given the same set of keyboard inputs, the game will\nalways play the same, every time.</p><p>Okay, well let's say we wanted to hand some way for someone to replay\nour last game.\nChess games can be fully replayed with a very\n<a href=\"https://en.wikipedia.org/wiki/Algebraic_notation_(chess)\">condensed syntax</a>,\nmeaning that merely handing someone a short list of codes they can\n<em>precisely</em> replay the same game, every time, deterministically.</p><p>Well okay, as a first attempt at thinking this through, what if for\nsome game of Terminal Phase I played we wrote down each keystroke I\nentered on my keyboard, on every tick of the game?\nTerminal Phase runs at 30 ticks per second.\nSo okay, if you replay these, each one at 30 ticks per second, then\nyeah, you'd end up with the same gameplay every time.</p><p>It would be simple enough for me to encode these as a linked list\n(cons, cons, cons!) and hand them to you.\nYou could descend all the way to the root of the list and start\nplaying them back up (ie, play the list in reverse order) and you'd\nget the same result as I did.\nI could even stream new events to you by giving you new items to\ntack onto the front of the list, and you could &quot;watch&quot; a game I\nwas playing live.</p><p>So now imagine that you and I want to play Terminal Phase together\nnow, over the network.\nLet's imagine there are two ships, and for simplicity, we're playing\ncooperatively.\n(The same ideas\n<a href=\"https://en.wikipedia.org/wiki/Lockstep_protocol\">can be extended to competitive</a>,\nbut for narrating how real-time games work it's easier to to start\nwith a cooperative assumption.)</p><p>We could start out by wiring things up on the network so that I am\nallowed to press certain keys for player 1 and you are allowed to\npress certain keys for player 2.\n(Now it's worth noting that a better way to do this doesn't involve\n<em>keys on the keyboard</em> but <em>capability references</em>, and really that's\nhow we'd do things if we were to bring this multiplayer idea live, but\nI'm trying to provide a metaphor that's easy to think about without\nintroducing the complicated sounding kinds of terms like &quot;c-lists&quot; and\n&quot;vat turns&quot; that we ocap people seem to like.)\nSo, as a first attempt, maybe if we were playing on a local area\nnetwork or something, we could synchronize at every game tick: I share\nmy input with you and you share yours, and then and only then do both\nof our systems actually input them into that game-tick's inputs.\nWe'll have achieved a kind of &quot;convergence&quot; as to the current game state\non every tick.\n(<strong>EDIT:</strong> I wrote &quot;a kind of <em>consensus</em>&quot; instead of &quot;a kind of\n<em>convergence</em>&quot; originally, and that was an error, because it misleads\non what consensus algorithms tend to do.)</p><p>Except this wouldn't work very well if you and I were living far away\nfrom each other and playing over the internet... the lag time for\ndoing this for every game tick might slow the system to a crawl...\nour computers wouldn't get each others' inputs as fast as the game was\nmoving along, and would have to pause until we received each others'\nmoves.</p><p>So okay, here's what we'll do.\nRemember the time-travel GUI above?\nAs you can see, we're effectively restoring from an old snapshot.\nOh!  So okay.\nWe could save a snapshot of the game every second, and then both get\neach other our inputs to each other as fast as we can, but knowing\nit'll lag.\nSo, without having seen your inputs yet, I could move my ship up and\nto the right and fire (and send that I did that to you).\nMy game would be in a &quot;dirty state&quot;... I haven't actually seen what\nyou've done yet.\nNow suddenly I get the last set of moves you did over the network...\nin the last five frames, you move down and to the left and fire.\nNow we've got each others' inputs... what our systems can do is\n<em>secretly time travel behind the scenes to the last snapshot</em>, then\n<em>fast forward</em>, replaying both of our inputs on each tick up until the\nlatest state where we've both seen each others' moves (but we wouldn't\n<em>show</em> the fast forward process, we'd just show the result with the\nfast forward having been applied).\nThis can happen fast enough that I might see your ship jump forward\na little, and maybe your bullet will kill the enemy instead of mine\nand the scores shift so that you actually got some points that\nfor a moment I thought I had, but this can all happen in realtime\nand we don't need to slow down the game at all to do it.</p><p>Again, all the above can be done, but with actual wiring of\ncapabilities instead of the keystroke metaphor... and actually, the\nsame set of ideas can be done with <em>any</em> kind of system, not just\na game.</p><p>And oh hey, technically, technically, <em>technically</em> if we both hashed\neach of our previous messages in the linked list and signed each one,\nthen this would qualify as a merkle tree and then this would also\nqualify as a blockchain... but wait, this doesn't have anything to do\nwith cryptocurrencies!\nSo is it really a blockchain?</p><h2>&quot;Blockchain&quot; as synonym for &quot;cryptocurrency&quot; but this is wrong and don't do this one</h2><p>By now you've probably gotten the sense that I really was annoyed with\nthe first section of &quot;blockchain&quot; as a synonym for &quot;decentralization&quot;\n(especially because blockchains are decentralized centralization/convergence)\nand that is completely true.\nBut even more annoying to me is the synonym of &quot;blockchain&quot; with\n&quot;cryptocurrency&quot;.</p><p>&quot;Cryptocurrency&quot; means &quot;cryptographically based currency&quot; and it is\nNOT synonymous with blockchains.\n<a href=\"https://en.wikipedia.org/wiki/DigiCash\">Digicash</a> precedes blockchains\nby a dramatic amount, but it is a cryptocurrency.\nThe &quot;simple mint&quot; type system also precedes blockchains and while it\ncan be run on a blockchain, it can also run on a solo\ncomputer/machine.</p><p>But as we saw, we could perceive multiplayer Terminal Phase as\ntechnically, technically a blockchain, even though it has <em>nothing to do with</em>\ncurrencies whatsoever.</p><p>So again a blockchain is just a single, abstract, sequential machine,\nrun by multiple parties.\nThat's it.\nIt's more general than cryptocurrencies, and it's not exclusive to\nimplementing them either.\nOne is a kind of programming-plus-cryptography-use-case\n(cryptocurrencies), the other one is a kind of abstracted machine\n(blockchains).</p><p>So please.\nThey are frequently combined, but don't treat them as the same thing.</p><h2>Blockchains as single abstract machines on a wider network</h2><p>One of my favorite talks is Mark Miller's\n<a href=\"https://www.youtube.com/watch?v=YXUqfgdDbr8\">Programming Secure Smart Contracts</a>\ntalk.\nAdmittedly, I like it partly because it well illustrates some of the\nlow-level problems I've been working on, and that might not be as\nuseful to everyone else.\nBut it has this lovely diagram in it:</p><p><img src=\"/etc/images/blog/markm-agoric-layers.png\" alt=\"Machines / Vats / Ocaps / Erights layers of abstractions\" /></p><p>This is better understood by watching the video, but the abstraction\nlayers described here are basically as follows:</p><ul><li><p>&quot;Machines&quot; are the lowest layer of abstraction on the network, but\nthere a variety of kinds of machines.\nPublic blockchains are one, quorum blockchains are another, solo\ncomputer machines yet another (and the simplest case, too).\nWhat's interesting then is that we can see public chains and quorums\nabstractly demonstrated as machines in and of themselves... even though\nthey are run by many parties.</p></li><li><p>Vats are the next layer of abstraction, these are basically the\n&quot;communicating event loops&quot;... actors/objects live inside them,\nand more or less these things run sequentially.</p></li><li><p>Replace &quot;JS ocaps&quot; with &quot;language ocaps&quot; and you can see actors/objects\nin both Javascript and Spritely living here.</p></li><li><p>Finally, at the top are &quot;erights&quot; and &quot;smart contracts&quot;, which feed\ninto each other... &quot;erights&quot; are &quot;exclusive electronic rights&quot;, and\n&quot;smart contracts&quot; are generally patterns of cooperation involving\nachieving mutual goals despite suspicion, generally involving the\ntrading of these erights things (but not necessarily).</p></li></ul><p>Okay, well cool!\nThis finally explains the worldview I see blockchains on.\nAnd we can see a few curious things:</p><ul><li><p>The &quot;public chain&quot; and &quot;quorum&quot; kinds of machines still boil down\nto a single, sequential abstract machine.</p></li><li><p>Object connections exist between the machines... ocap security.\nNo matter whether it's run by a single computer or multiple.</p></li><li><p>Public blockchains, quorum blockchains, solo-computer machines\nall talk to each other, and communicate between object references\non each other.</p></li></ul><p>Blockchains are not magical things.\nThey are abstracted machines on the network.\nSome of them have special rules that let whoever can prove they qualify\nfor them access some well-known capabilities, but really they're just\nabstracted machines.</p><p>And here's an observation: you aren't ever going to move all\ncomputation to a single blockchain.\nAgoric's CEO, Dean Tribble,\n<a href=\"https://youtu.be/WeRbY6tiAio?t=712\">explained beautifully why on a recent podcast</a>:</p><blockquote><p>One of the problems with Ethereum is it is as tightly coupled as\npossible.\nThe entire world is a single sequence of actions that runs on a\ncomputer with about the power of a cell phone.\nNow, that's obviously hugely valuable to be able to do commerce in a\nhigh-integrity fashion, even if you can only share a cell phone's\nworth of compute power with the entire rest of the world.\nBut that's clearly gonna hit a brick wall.\nAnd we've done lots of large-scale distributed systems whether\npayments or cyberspace or coordination, and the fundamental model\nthat covers all of those is\n<em>islands of sequential programming in a sea of asynchronous communication</em>.\nThat is what the internet is about, that's what the interchain is about,\nthat's what <em>physics</em> requires you to do if you want a system to scale.</p></blockquote><p>Put this way, it should be obvious: are we going to replace the entire\ninternet with something that has the power of a cell phone?\nTo ask the question is to know the answer: of course not.\nEven when we do admit blockchain'y systems into our system, we're going\nto have to have many of them communicating with each other.</p><p>Blockchains are just machines that many people/agents run.\nThat's it.</p><p>Some of these are encoded with some nice default programming to do\nsome useful things, but all of them can be done in non-blockchain\nsystems because\n<em>communicating islands of sequential processes is the generalization</em>.\nYou might still want a blockchain, ie you might want multiple parties\nrunning one of those machines as a shared abstract machine, but\nhow you configure that blockchain from there might depend on your\ntrust and integrity requirements.</p><h2>What do I think of blockchains?</h2><p>I've covered a wide variety of perspectives of &quot;what is a blockchain&quot;\nin this article.</p><p>On the worse end of things are the parts involving hand-wavey\nconfusion about decentralization, mistaken ideas of them being tied to\ncryptocurrencies, marketing hype, cultural assumptions, and some real,\nbut not intrinsic, cultural problems.</p><p>In the middle, I am particularly keen on highlighting the similarity\nbetween the term &quot;blockchain&quot; and the term &quot;roguelike&quot;, how both of\nthem might boil down to some key ideas or not, but more importantly\nthey're both a rough family of ideas that diverge from one highly\ninfluential source (Bitcoin and Rogue respectively).\nThis is also the source of much of the &quot;shouting past each other&quot;,\nbecause many people are referring to different components that they\nview as essential or inessential.\nMany of these pieces may be useful or harmful in isolation, in small\namounts, in large amounts, but much of the arguing (and posturing)\ninvolves highlighting different things.</p><p>On the better end of things is a revelation, that blockchains are just\nanother way of abstracting a computer so that multiple parties can run\nit.\nThe particular decisions and use cases layered on top of this\nfundamental design are highly variant.</p><p>Having made the waters clear again, we could muddy them.\nA friend once tried to convince me that <em>all</em> computers are\ntechnically blockchains, that blockchains are the generalization of\ncomputing, and the case of a solo computer is merely one where a\nblockchain is run only by one party and no transaction history or old\nstate is kept around.\nMaybe, but I don't think this is very useful.\nYou can go in either direction, and I think the time travel and\nTerminal Phase section maybe makes that clear to me, but I'm not so\nsure how it lands with others I suppose.\nBut a term tends to be useful in terms of what it <em>introduces</em>, and\ncalling everything a blockchain seems to make the term even less\nuseful than it already is.\nWhile a blockchain could be one or more parties running a sequential\nmachine as the generalization, I suggest we stick to two or more.</p><p>Blockchains are not magic pixie dust, putting something on a\nblockchain does not make it work better or more\ndecentralized... indeed, what a blockchain really does is converging\n(or re-centralizing) a machine from a decentralized set of computers.\nAnd it always does so with some cost, some set of overhead...\nbut what those costs and overhead <em>are</em> varies depending on what the\nconfiguration decisions are.\nThose decisions <em>should</em> always stem from some careful thinking about\nwhat those trust and integrity needs are... one of the more\nfrustrating things about blockchains being a technology of great\nhype and low understanding is that such care is much less common than\nit should be.</p><p>Having a blockchain, as a convergent machine, can be useful.\nBut how that abstracted convergent machine is arranged can diverge\ndramatically; if we aren't talking about the same choices, we might\nshout past each other.\nStill, it may be an unfair ask to request that those without a deep\ntechnical background go into technical specifics, and I recognize\nthat, and in a sense there can be some amount gained from speaking\ntowards broad-sweeping, fuzzy sets and the patterns they seem to be\ncarrying.\nA gut-sense assertion from a set of loosely observed behaviors can be\na useful starting point.\nBut to get at the root of what those gut senses actually map to, we\nwill have to be specific, and we should encourage that specificity\nwhere we can (without being rude about it) and help others see those\ncomponents as well.</p><p>But ultimately, as convergent machines, blockchains will not operate\nalone.\nI think the system that will hook them all together\n<a href=\"https://spritelyproject.org/news/what-is-captp.html\">should be CapTP</a>.\nBut no matter the underlying protocol abstraction, blockchains\nare just abstract machines on the network.</p><p>Having finally disentangled what <em>blockchains</em> are, I think soon I\nwould like to move onto what <em>cryptocurrencies</em> are.\nKnowing that they are <em>not necessarily tied to blockchains</em> opens us\nup to considering an ecosystem, even an interoperable and exchangeable\none, of varying cryptographically based financial instruments, and\nthe different roles and uses they might play.\nBut that is another post of its own, for whenever I can get to it,\nI suppose.</p><p><strong>ADDENDUM:</strong> After writing this post, I had several conversations\nwith several blockchain-oriented people.\nEach of them roughly seemed to agree that Bitcoin was roughly the\nprototypical &quot;blockchain&quot;, but each of them also seemed to highlight\ndifferent things they thought were &quot;essential&quot; to what a &quot;blockchain&quot;\nis: some kinds of consensus algorithms being better than others, that\nkinds of social arrangements are enabled, whether transferrable\nassets are encoded on the chain, etc.\nTo start with, I feel like this does confirm some\nof the premise of this post, that Bitcoin is the starting point, but\nlike Rogue and &quot;roguelikes&quot;, &quot;blockchains&quot; are an exploration space\nstemming from a particular influential technical piece.</p><p>However my friend Kate Sills (who also gave me a much better\ndefinition for &quot;smart contracts&quot;, added above) highlighted something\nthat I hadn't talked about much in my article so far, which I do agree\ndeserves expansion.\nKate said: &quot;I do think there is something huge missing from your\npiece.  Bitcoin is amazing because it aligns incentives among actors\nwho otherwise have no goals in common.&quot;</p><p>I agree that there's something important here, and this definition of\n&quot;blockchain&quot; maybe does explain why while from a computer science\nperspective, perhaps signed git trees do resemble blockchains, they\ndon't seem to fit within the realm of what most people are thinking\nabout... while git might be a tool used by several people with aligned\nincentives, it is not generally itself the layer of\nincentive-alignment.</p>"], ["updated", "2021-04-24 15:30:00"], ["feed_id", 1], ["fetched", "2022-07-10 07:07:43.060469"], ["created_at", "2022-07-10 07:07:43.393148"], ["updated_at", "2022-07-10 07:07:43.393148"]]
D, [2022-07-10T03:07:43.412060 #3248059] DEBUG -- :   TRANSACTION (13.9ms)  commit transaction
D, [2022-07-10T03:07:43.412883 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.2ms)  SELECT "items".* FROM "items" WHERE "items"."guid" = ? LIMIT ?  [["guid", "https://dustycloud.org/blog/hurt-and-hopes/"], ["LIMIT", 1]]
[info] ** NEW | The hurt of this moment, hopes for the future
[debug] *** dump item_attribs w/ class types:
[debug]   guid: >https://dustycloud.org/blog/hurt-and-hopes/< : String
[debug]   title: >The hurt of this moment, hopes for the future< : String
[debug]   url: >https://dustycloud.org/blog/hurt-and-hopes/< : String
[debug]   updated: >2021-03-31 13:42:00 UTC< : Time
[debug]   published: >< : NilClass
D, [2022-07-10T03:07:43.414731 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:43.415908 #3248059] DEBUG -- :   Pluto::Model::Item Create (0.6ms)  INSERT INTO "items" ("guid", "url", "title", "summary", "updated", "feed_id", "fetched", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [["guid", "https://dustycloud.org/blog/hurt-and-hopes/"], ["url", "https://dustycloud.org/blog/hurt-and-hopes/"], ["title", "The hurt of this moment, hopes for the future"], ["summary", "<p>Of the deeper thoughts I might give to this moment, I have <a href=\"https://fossandcrafts.org/episodes/25-governance-leadership-founders-syndrome.html\">given them elsewhere</a>.  For this blogpost, I just want to speak of feelings... feelings of hurt and hope.</p><p>I am reaching out, collecting the feelings of those I see around me, writing them in my mind's journal.  Though I hold clear positions in this moment, there are few roots of feeling and emotion about the moment I feel I haven't steeped in myself at some time.  Sometimes I tell this to friends, and they think maybe I am drifting from a mutual position, and this is painful for them.  Perhaps they fear this could constitute or signal some kind of betrayal.  I don't know what to say: I've been here too long to feel just one thing, even if I can commit to one position.</p><p>So I open my journal of feelings, and here I share some of the pages collecting the pain I see around me:</p><p>The irony of a movement wanting to be so logical and above feelings being drowned in them.</p><p>The feelings of those who found a comfortable and welcoming home in a world of loneliness, and the split between despondence and outrage for that unraveling.</p><p>The feelings of those who wanted to join that home too, but did not feel welcome.</p><p>The pent up feelings of those unheard for so long, uncorked and flowing.</p><p>The weight and shadow of a central person who seems to feel things so strongly but cannot, and does not care to learn to, understand the feelings of those around them.</p><p>I flip a few pages ahead.  The pages are blank, and I interpret this as new chapters for us to write, together.</p><p>I hope we might re-discover the heart of our movement.</p><p>I hope we can find a place past the pain of the present, healing to build the future.</p><p>I hope we can build a new home, strong enough to serve us and keep us safe, but without the walls, moat, and throne of a fortress.</p><p>I hope we can be a movement that lives up to our claims: of justice, of freedom, of human rights, to bring these to everyone, especially those we haven't reached.</p>"], ["updated", "2021-03-31 13:42:00"], ["feed_id", 1], ["fetched", "2022-07-10 07:07:43.060469"], ["created_at", "2022-07-10 07:07:43.413834"], ["updated_at", "2022-07-10 07:07:43.413834"]]
D, [2022-07-10T03:07:43.429903 #3248059] DEBUG -- :   TRANSACTION (13.5ms)  commit transaction
D, [2022-07-10T03:07:43.430719 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.2ms)  SELECT "items".* FROM "items" WHERE "items"."guid" = ? LIMIT ?  [["guid", "https://dustycloud.org/blog/vote-for-amy-guy/"], ["LIMIT", 1]]
[info] ** NEW | Vote for Amy Guy on the W3C TAG (if you can)
[debug] *** dump item_attribs w/ class types:
[debug]   guid: >https://dustycloud.org/blog/vote-for-amy-guy/< : String
[debug]   title: >Vote for Amy Guy on the W3C TAG (if you can)< : String
[debug]   url: >https://dustycloud.org/blog/vote-for-amy-guy/< : String
[debug]   updated: >2020-12-21 15:07:00 UTC< : Time
[debug]   published: >< : NilClass
D, [2022-07-10T03:07:43.432733 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:43.434145 #3248059] DEBUG -- :   Pluto::Model::Item Create (0.7ms)  INSERT INTO "items" ("guid", "url", "title", "summary", "updated", "feed_id", "fetched", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [["guid", "https://dustycloud.org/blog/vote-for-amy-guy/"], ["url", "https://dustycloud.org/blog/vote-for-amy-guy/"], ["title", "Vote for Amy Guy on the W3C TAG (if you can)"], ["summary", "<p>My friend <a href=\"https://rhiaro.co.uk/\">Amy Guy</a> is\n<a href=\"https://rhiaro.co.uk/2020/11/tag-statement\">running for election</a>\non the <a href=\"https://www.w3.org/2001/tag/\">W3C TAG</a>\n(Technical Architecture Group).\nThe TAG is an unusual group that sets a lot of the direction of the\nfuture of standards that you and I use everyday on the web.\n<a href=\"https://rhiaro.co.uk/2020/11/tag-statement\">Read their statement on running</a>,\nand if you can, ie if you're one of those unusual people labeled\nas &quot;AC Representative&quot;, please consider\n<a href=\"https://www.w3.org/2002/09/wbs/33280/tagelect-2020/\">voting for them</a>.\n(Due to the nature of the W3C's organizational and funding structure,\nonly paying W3C Members tend to qualify... if you know you're working\nfor an organization that has paying membership to the W3C, find out\nwho the AC rep is and strongly encourage <em>them</em> to vote for Amy.)</p><p>So, why vote for Amy?\nQuite simply, they're running on a platform of putting the needs of\nusers first.\nDespite all the good intents and ambitions of those who have done\nfounding work in these spaces, this perspective tends to get\nincreasingly pushed to the wayside as engineers are pressured to shift\ntheir focus on the needs of their immediate employers and large\nimplementors.\nI'm not saying that's bad; sometimes this even does help advance the\ninterest of users too, but... well we all know the ways in which it\ncan end up not doing so.\nAnd I don't know about you, but the internet and the web have felt an\nawful lot at times like they've been slipping from those early ideals.\nAmy's platform shares in a growing zeitgeist (sadly, still in the\nwispiest of stages) of thinking and reframing from the perspective of\nuser empowerment, privacy, safety, agency, autonomy.\nAmy's platform reminds me of\n<a href=\"https://tools.ietf.org/html/rfc8890\">RFC 8890: The Internet Is For End Users</a>.\nThat's a perspective shift we desperately need right now... for the\ninternet and the web both.</p><p>That's all well and good for the philosophical-alignment angle.\nBut what about the &quot;Technical&quot; letter in TAG?\nAmy's standing there is rock-solid.\nAnd <em>I know</em> because I've had the pleasure of working side-by-side\nwith Amy on several standards (including\n<a href=\"https://www.w3.org/TR/activitypub/\">ActivityPub</a>, of which we are\nco-authors.</p><p>Several times I watched with amazement as Amy and I talked about some\nchanges we thought were necessary and Amy just got <em>in the zone</em>, this\nlook of intense hyperfocus (really, someone should record the Amy Spec\nEditing Zone sometime, it's quite a thing to see), and they refactored\nhuge chunks of the spec to match our discussion.\nAnd Amy knows, and deeply <em>cares</em>, about so many aspects of the W3C's\norganization and structure.</p><p>So, if you can vote for, or know how to get your organization to vote\nfor, an AC rep... well, I mean do what you want I guess, but if you\nwant someone who will help... for great justice, vote Amy Guy to the\nW3C TAG!</p>"], ["updated", "2020-12-21 15:07:00"], ["feed_id", 1], ["fetched", "2022-07-10 07:07:43.060469"], ["created_at", "2022-07-10 07:07:43.431827"], ["updated_at", "2022-07-10 07:07:43.431827"]]
D, [2022-07-10T03:07:43.448756 #3248059] DEBUG -- :   TRANSACTION (14.0ms)  commit transaction
D, [2022-07-10T03:07:43.449747 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.2ms)  SELECT "items".* FROM "items" WHERE "items"."guid" = ? LIMIT ?  [["guid", "https://dustycloud.org/blog/identity-is-a-katamari/"], ["LIMIT", 1]]
[info] ** NEW | Identity is a Katamari, language is a Katamari explosion
[debug] *** dump item_attribs w/ class types:
[debug]   guid: >https://dustycloud.org/blog/identity-is-a-katamari/< : String
[debug]   title: >Identity is a Katamari, language is a Katamari explosion< : String
[debug]   url: >https://dustycloud.org/blog/identity-is-a-katamari/< : String
[debug]   updated: >2020-12-09 13:00:00 UTC< : Time
[debug]   published: >< : NilClass
D, [2022-07-10T03:07:43.453153 #3248059] DEBUG -- :   TRANSACTION (0.2ms)  begin transaction
D, [2022-07-10T03:07:43.455391 #3248059] DEBUG -- :   Pluto::Model::Item Create (0.9ms)  INSERT INTO "items" ("guid", "url", "title", "summary", "updated", "feed_id", "fetched", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [["guid", "https://dustycloud.org/blog/identity-is-a-katamari/"], ["url", "https://dustycloud.org/blog/identity-is-a-katamari/"], ["title", "Identity is a Katamari, language is a Katamari explosion"], ["summary", "<p>I said something strange this morning:</p><blockquote><p>Identity is a Katamari, language is a continuous reverse engineering\neffort, and thus language is a quadratic explosion of Katamaris.</p></blockquote><p>This sounds like nonsense probably, but has a lot of thought about it.\nI have spent a lot of time in the decentralized-identity community and\nthe ocap communities, both of which have spent a lot of time hemming\nand hawing about &quot;What <em>is</em> identity?&quot;, &quot;What is a credential or\nclaim?&quot;, &quot;What is authorization?&quot;,\n<a href=\"https://lists.w3.org/Archives/Public/public-credentials/2020Dec/0028.html\">&quot;Why is it unhygienic for identity to be your authorization system?&quot;</a>\n(that mailing list post is the most important writing about the nature\nof computing I've ever written; I hope to have a cleaned up version of\nthe ideas out soon).</p><p>But that whole bit about &quot;what is identity, is it different than an\nidentifier really?&quot; etc etc etc...</p><p>Well, I've found one good explanation, but it's a bit silly.</p><h1>Identity is a Katamari</h1><p>There is a curious, surreal, delightful (and proprietary, sorry) game,\n<a href=\"https://en.wikipedia.org/wiki/Katamari_Damacy\">Katamari Damacy</a>.\nIt has a silly story, but the interesting thing here is the game\nmechanic, involving rolling around a ball-like thing that picks up\nobjects and grows bigger and bigger kind of like a snowball.\nIt has to <a href=\"https://youtu.be/FQxEitzJ-H0?t=636\">be seen</a> or played to\nreally be understood.</p><p>This ball-like thing is called a &quot;Katamari Damacy&quot;, or &quot;soul clump&quot;,\nwhich is extra appropriate for our mental model.\nAs it rolls around, it picks up smaller objects and grows bigger.\nThe ball at the center is much like an identifier.\nBut over time that identifier becomes obscured, it picks up things,\nwhich in the game are physical objects, but these metaphorically map\nto &quot;associations&quot;.</p><p>Our identity-katamari changes over time.  It grows and picks up\nassociations.  Sometimes you forget something you've picked up that's\nin there, it's buried deep (but it's wiggling around in there still\nand you find out about it during some conversation with your\ntherapist).  Over time the katamari picks up enough things that it is\nobscured.  Sometimes there are collisions, you smash it into something\nand some pieces fly out.  Oh well, don't worry about it.  They\nprobably weren't meant to be.</p><h1>Language is reverse engineering</h1><p>Shout out to my friend <a href=\"http://mumble.net/~jar/\">Jonathan Rees</a> for\nsaying something that really stuck in my brain (okay actually most\nthings that Rees says stick in my brain):</p><blockquote><p>&quot;Language is a continuous reverse engineering effort, where both\nsides are trying to figure out what the other side means.&quot;</p></blockquote><p>This is true, but its truth is the bane of ontologists and static\ntypists.  This doesn't mean that ontologies or static typing are\nwrong, but that the notion that they're fixed is an illusion... a\nuseful, powerful illusion (with a great set of mathematical tools\nbehind it sometimes that can be used with mathematical\nproofs... assuming you don't change the context), but an illusion\nnonetheless.  Here are some examples that might fill out what I mean:</p><ul><li><p>The classic example, loved by fuzzy typists everywhere: when is a\nperson &quot;bald&quot;?  Start out with a person with a &quot;full head&quot; of hair.\nHow many hairs must you remove for that person to be &quot;bald&quot;?  What\nif you start out the opposite way...  someone is bald... how many\nhairs must you add for them to become not-bald?</p></li><li><p>We might want to construct a precise recipe for a\n<a href=\"https://en.wikipedia.org/wiki/Lassi#Mango_lassi\">mango lassi</a>.\nMaybe, in fact, we believe we can create a <em>precise typed\ndefinition</em> for a mango lassi.\nBut we might soon find ourselves running into trouble.  Can a vegan\nnon-dairy milk be used for the Lassi?  (Is vegan non-dairy milk\nactually milk?)  Is ice cream acceptable?  Is added sugar\nnecessary?  Can we use artificial mango-candy powder instead of\nmangoes?  Maybe you can hand-wave away each of these, but here's\nsomething much worse: what's a mango?  You might think that's\nobvious, a mango is the fruit of <em>mangifera indica</em> or maybe\nif you're generous fruit of anything in the <em>mangifera</em> genus.\nBut mangoes <em>evolved</em> and there is some weird state where we had\nalmost-a-mango and in the future we might have some new states\nwhich are no-longer-a-mango, but more or less we're throwing darts\nat exactly where we think those are... evolution doesn't care,\nevolution just wants to keep reproducing.</p></li><li><p>Meaning changes over time, and how we categorize does too.\nOnce someone was explaining the <a href=\"https://www.w3.org/OWL/\">Web Ontology Language</a>\n(which got confused somewhere in its acronym ordering and is\nshortened to OWL (<em>update:</em> it's a Winnie the Pooh update, based\non the way the Owl character spells his name... thank you Amy\nGuy for informing me of the history)).\nThey said that it was great because you could clearly define what\nis and isn't allowed and terms derived from other terms, and that\nthe simple and classic example is Gender, which is a binary choice\nof Male or Female.\nThey paused and thought for a moment.\n&quot;That might not be a good example anymore.&quot;</p></li><li><p>Even if you try to define things by their use or properties rather\nthan as an individual concept, this is messy too.\nA person from two centuries ago would be confused by the metal\ncube I call a &quot;stove&quot; today, but you could say it does the same\njob.\nNonetheless, if I asked you to &quot;fetch me a stove&quot;, you would probably\nnot direct me to a computer processor or a car engine, even though\nsometimes people fry an egg on both of these.</p></li></ul><p>Multiple constructed languages (Esperanto most famously) have been\nmade by authors that believed that if everyone spoke the same language,\nwe would have world peace.\nThis is a beautiful idea, that conflict comes purely from\nmisunderstandings.\nI don't think it's true, especially given how many fights I've seen\nbetween people speaking the same language.\nNonetheless there's truth in that many fights are about a conflict\nof ideas.</p><p>If anyone was going to achieve this though, it would be the\n<a href=\"https://en.wikipedia.org/wiki/Lojban\">Lojban</a> community, which\nactually does have a language which is <em>syntactically</em> unambiguous,\nso you no longer have ambiguity such as\n<a href=\"https://en.wikipedia.org/wiki/Time_flies_like_an_arrow;_fruit_flies_like_a_banana\">&quot;time flies like an arrow&quot;</a>.\nNonetheless, even this world can't escape the problem that some terms\njust can't be easily pinned down, and the best example is the\n<a href=\"https://mw.lojban.org/papri/jbocre:_Bear_goo\">bear goo</a>\ndebate.</p><p>Here's how it works: both of us can unambiguously construct a sentence\nreferring to a &quot;bear&quot;.\nBut when it is that bear no longer a bear?\nIf it is struck in the head and is killed, when in that process has it\nbecome a decompositional &quot;bear goo&quot; instead?\nAnd the answer is: there is no good answer.\nNonetheless many participants want there to be a pre-defined bear,\nthey want us to live in a pre-designed universe where &quot;bear&quot; is a clear\npredicate that can be checked against, because the universe has a\nclear definition of &quot;bear&quot; for us.</p><p>That doesn't exist, because bears evolved.  And more importantly, the\nconcept and existence a bear is <em>emergent</em>, cut across many different\ndomains, from evolution to biology to physics to linguistics.</p><p>Sorry, we won't achieve perfect communication, not even in Lojban.\nBut we can get a lot better, and set up a system with fewer stumbling\nblocks for testing ideas against each other, and that is a worthwhile\ngoal.</p><p>Nonetheless, if you and I are camping and I shout, &quot;AAH!  A bear!\nRUN!!&quot;, you and I probably don't have to stop to debate bear goo.\nRees is right that language is a reverse engineering effort, but we\ntend to do a pretty good job of gaining rough consensus of what the\nother side means.  Likewise, if I ask you, &quot;Where is your stove?&quot;, you\nprobably won't lead me to your computer or your car.  And if you hand\nme a &quot;sugar free vegan mango lassi made with artificial mango flavor&quot;\nI might doubt its cultural authenticity, but if you then referred to\nthe &quot;mango lassi&quot; you had just handed me a moment ago, I wouldn't have\nany trouble continuing the conversation.  Because we're more or less\nbuilt to contextually construct language contexts.</p><h1>Language is a quadratic explosion of Katamaris</h1><p>Language is composed of syntax partly, but the arrangement of symbolic\nterms mostly.  Or that's another way to say that the non-syntactic\nelements of language are mostly there as identifiers substituted\nmentally for identity and all the associations therein.</p><p>Back to the Katamari metaphor.  What &quot;language is a\nreverse-engineering effort&quot; really means is that each of us are\nconstructing identities for identifiers mentally, rolling up katamaris\nfor each identifier we encounter.  But what ends up in our ball will\nvary depending on our experiences and what paths we take.</p><p>Which really means that if each person is rolling up a <em>separate,\npersonal identity-katamari</em> for <em>each identifier</em> in the system, that\nmeans that, barring passing through a singularity type event-horizon\npast which participants can do direct shared memory mapping, this is\nan O(n^2) problem!</p><p>But actually this is not a problem, and is kind of beautiful.  It is\namazing, given all that, just how good we are at finding shared\nmeaning.  But it also means that we should be aware of what this means\ntopologically, and that each participant in the system will have a\ndifferent set of experiences and understanding for each\nidentity-assertion made.</p><p>Thank you to Morgan Lemmer-Webber, Stephen Webber, Corbin Simpson,\nBaldur Jóhannsson, Joey Hess, Sam Smith, Lee Spector, and Jonathan\nRees for contributing thoughts that lead to this post (if you feel\nlike you don't belong here, do belong here, or are wondering how the\nheck you got here, feel free to contact me).  Which is not to say that\neveryone, from their respective positions, have agreement here; I know\nseveral disagree strongly with me on some points I've made.  But\neveryone did help contribute to reverse-engineering their positions\nagainst mine to help come to some level of shared understanding,\nand the giant pile of katamaris that is this blogpost.</p>"], ["updated", "2020-12-09 13:00:00"], ["feed_id", 1], ["fetched", "2022-07-10 07:07:43.060469"], ["created_at", "2022-07-10 07:07:43.451871"], ["updated_at", "2022-07-10 07:07:43.451871"]]
D, [2022-07-10T03:07:43.469973 #3248059] DEBUG -- :   TRANSACTION (13.7ms)  commit transaction
D, [2022-07-10T03:07:43.471022 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.3ms)  SELECT "items".* FROM "items" WHERE "items"."guid" = ? LIMIT ?  [["guid", "https://dustycloud.org/blog/spritely-website-apconf-videos/"], ["LIMIT", 1]]
[info] ** NEW | Spritely website launches, plus APConf video(s)!
[debug] *** dump item_attribs w/ class types:
[debug]   guid: >https://dustycloud.org/blog/spritely-website-apconf-videos/< : String
[debug]   title: >Spritely website launches, plus APConf video(s)!< : String
[debug]   url: >https://dustycloud.org/blog/spritely-website-apconf-videos/< : String
[debug]   updated: >2020-09-30 14:20:00 UTC< : Time
[debug]   published: >< : NilClass
D, [2022-07-10T03:07:43.472865 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:43.474025 #3248059] DEBUG -- :   Pluto::Model::Item Create (0.6ms)  INSERT INTO "items" ("guid", "url", "title", "summary", "updated", "feed_id", "fetched", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [["guid", "https://dustycloud.org/blog/spritely-website-apconf-videos/"], ["url", "https://dustycloud.org/blog/spritely-website-apconf-videos/"], ["title", "Spritely website launches, plus APConf video(s)!"], ["summary", "<p><strong>Note:</strong> This originally appeared\n<a href=\"https://www.patreon.com/posts/42200964\">as a post on my Patreon account</a>...\nthanks to all who have donated to support my work!</p><p>Hello, hello!  <a href=\"https://spritelyproject.org/\">Spritely's website</a> has\nfinally launched!  Whew... it's been a lot of work to get it to this\nstate!  Plus check out our new logo:</p><p><img src=\"https://spritelyproject.org/static/images/spritely-logo-transparent-500px.png\" alt=\"Spritely logo\" /></p><p>Not bad, eh?  Also with plenty of cute characters on the Spritely site\n(thank you to <a href=\"https://www.peppercarrot.com/\">David Revoy</a> for taking\nmy loose character sketches and making them into such beautiful\npaintings!)</p><p>But those cute characters are there for a reason!  Spritely is quite\nambitious and has quite a few subprojects.  Here's a\n<a href=\"https://conf.tube/videos/watch/18aa2f92-36cc-4424-9a4f-6f2de946fbd2\">video that explains how they all fit together</a>.\nHopefully that makes things more clear!</p><p>Actually that video is from <a href=\"https://conf.activitypub.rocks/\">ActivityPub Conference 2020</a>,\nthe <a href=\"https://conf.activitypub.rocks/#talks\">talks</a> of which have now\n<a href=\"https://conf.tube/video-channels/apconf_channel/videos\">all have their videos live</a>!\nI also moderated the <a href=\"https://conf.tube/videos/watch/6289920f-4e35-4141-ab6f-379b357849ec\">intro keynote panel about ActivityPub authors/editors</a>.\nPlus there's an easter egg, the <a href=\"https://conf.tube/videos/watch/285e7580-8281-4ae4-842e-81c687237c69\">ActivityPub Conference Opening Song</a>! :)</p><p>But I can't take credit for APConf 2020... organization and support are thanks to Morgan Lemmer-Webber, Sebastian Lasse, and <a href=\"https://conf.tube/videos/watch/285e7580-8281-4ae4-842e-81c687237c69\">FOSSHost</a> for hosting the website and BigBlueButton instance and <a href=\"https://conf.tube/\">conf.tube</a> for generously hosting all the videos.  There's a <a href=\"https://conf.tube/videos/watch/87bc99dd-b1b8-4fc3-b034-dca805388179\">panel about the organization of APConf</a> you can watch if you're interested in more of that!  (And of course, all the other great videos too!)</p><p>So... what about that week I was going to work on Terminal Phase?\nWell... I'm still planning on doing it but admittedly it hasn't\nhappened yet.  All of the above took more time than expected.\nHowever, today I <em>am</em> working on my talk about Spritely Goblins for\nRacketCon, and as it turns out, extending Terminal Phase is a big part\nof that talk.  But I'll announce more soon when the Terminal Phase\nstuff happens.</p><p>Onwards and upwards!</p>"], ["updated", "2020-09-30 14:20:00"], ["feed_id", 1], ["fetched", "2022-07-10 07:07:43.060469"], ["created_at", "2022-07-10 07:07:43.472022"], ["updated_at", "2022-07-10 07:07:43.472022"]]
D, [2022-07-10T03:07:43.488136 #3248059] DEBUG -- :   TRANSACTION (13.5ms)  commit transaction
D, [2022-07-10T03:07:43.489390 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.3ms)  SELECT "items".* FROM "items" WHERE "items"."guid" = ? LIMIT ?  [["guid", "https://dustycloud.org/blog/spritely-goblins-v0/"], ["LIMIT", 1]]
[info] ** NEW | Spritely Goblins v0.7 released!
[debug] *** dump item_attribs w/ class types:
[debug]   guid: >https://dustycloud.org/blog/spritely-goblins-v0/< : String
[debug]   title: >Spritely Goblins v0.7 released!< : String
[debug]   url: >https://dustycloud.org/blog/spritely-goblins-v0/< : String
[debug]   updated: >2020-09-13 17:20:00 UTC< : Time
[debug]   published: >< : NilClass
D, [2022-07-10T03:07:43.491506 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:43.492611 #3248059] DEBUG -- :   Pluto::Model::Item Create (0.5ms)  INSERT INTO "items" ("guid", "url", "title", "summary", "updated", "feed_id", "fetched", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [["guid", "https://dustycloud.org/blog/spritely-goblins-v0/"], ["url", "https://dustycloud.org/blog/spritely-goblins-v0/"], ["title", "Spritely Goblins v0.7 released!"], ["summary", "<p>I'm delighted to say that\n<a href=\"https://docs.racket-lang.org/goblins/\">Spritely Goblins</a>\n<a href=\"https://gitlab.com/spritely/goblins/-/tree/v0.7\">v0.7</a>\nhas been released!\nThis is the first release featuring\n<a href=\"https://docs.racket-lang.org/goblins/captp.html\">CapTP support</a>\n(ie, &quot;capability-secure distributed/networked programming support&quot;),\nwhich is a huge milestone for the project!</p><p>Okay, caveat... there are still some things missing from the CapTP\nstuff so far; you can only set up a bidirectional connection between\ntwo machines, and can't &quot;introduce&quot; capabilities to other machines\non the network.\nAlso setting up connections is an extremely manual process.\nBoth of those should be improved in the next release.</p><p>But still!\nGoblins can now be used to easily write distributed programs!\nAnd Goblins' CapTP code even includes such wild features as\n<em>distributed garbage collection!</em></p><p>As an example\n(also mentioned in a <a href=\"/blog/if-you-cant-tell-people-anything/\">recent blogpost</a>),\nI recently wrote a short\n<a href=\"https://gitlab.com/spritely/goblin-chat\">chat program demo</a>.\nBoth the client and server &quot;protocol&quot; code were\n<a href=\"https://gitlab.com/spritely/goblin-chat/-/blob/master/chat-backend.rkt\">less than 250 lines of code</a>,\ndespite having such features as authenticating users during\nsubscription to the chatroom and verifying that messages claimed by\nthe chatroom came from the users it said it did.\n(The <a href=\"https://gitlab.com/spritely/goblin-chat/-/blob/master/goblin-chat-gui.rkt\">GUI code</a>,\nby contrast, was a little less than 300 lines.)\nI wrote this up without writing any network code at all and then\ntested hooking together two clients over Tor Onion Services using\nGoblins' CapTP support, and it Just Worked (TM):</p><p><img src=\"https://dustycloud.org/misc/goblins-chat-captp-onion-services.gif\" alt=\"Goblins chat GUI demo\" /></p><p>What's interesting here is that\n<em>not a single line of code was added to the backend or GUI to accomodate networking</em>;\nthe <a href=\"https://gitlab.com/spritely/goblin-chat/-/blob/master/onion-gui-server.rkt\">host</a>\nand <a href=\"https://gitlab.com/spritely/goblin-chat/-/blob/master/onion-gui-client.rkt\">guest</a>\nmodules merely imported the backend and GUI files <em>completely unchanged</em> and\ndid the network wiring there.\nYes, that's what it sounds like: in Goblins you can write distributed\nasynchronous programs</p><p>This is the really significant part of Goblins that's starting to\nbecome apparent, and it's all thanks to the brilliant design of\n<a href=\"http://erights.org/elib/distrib/captp/index.html\">CapTP</a>.\nGoblins continues to stand on the shoulders of giants; thank you to\neveryone in the ocap community, but especially in this case\nMichael FIG, Mark S. Miller, Kevin Reid, and Baldur Jóhannsson, all of\nwhom answered an enormous amount of questions (some of them very\nsilly) about CapTP.</p><p>There are more people to thank too (too many to list here), and you\ncan see some of them in this\n<a href=\"https://groups.google.com/forum/#!topic/cap-talk/xWv2-J62g-I\">monster thread on the captp mailing list</a>\nwhich started on May 18th (!!!) as I went through my journey of trying\nto understand and eventually implement CapTP.\nI actually started preparing a few weeks before which really means that\nthis journey took me about four and a half months to understand and\nimplement.\nAs it turns out, CapTP is a surprisingly simple protocol protocol\nin its coneptualization once you understand what it's doing (though\nimplementing it is a bit more complex).\nI do hope to try to build a guide for others to understand and\nimplement on their own systems... but that will probably wait until\nGoblins is ported to another language (due to the realative simplicity\nof the task due to the language similarities, the current plan is to\nport to Guile next).</p><p>Anyway.\nThis is a big deal, a truly exciting moment for goblinkind.\nIf you're excited yourself, maybe join the\n<a href=\"https://webchat.freenode.net/?channels=fossandcrafts\">#spritely channel on irc.freenode.net</a>.</p><p>OH!\nAnd also, I can't believe I nearly forgot to say this, but if you want\nto hear more about Spritely in general (not just Goblins), we just\n<a href=\"https://fossandcrafts.org/episodes/9-what-is-spritely.html\">released a Spritely-centric episode of FOSS and Crafts</a>.\nMaybe take a listen!</p>"], ["updated", "2020-09-13 17:20:00"], ["feed_id", 1], ["fetched", "2022-07-10 07:07:43.060469"], ["created_at", "2022-07-10 07:07:43.490551"], ["updated_at", "2022-07-10 07:07:43.490551"]]
D, [2022-07-10T03:07:43.506742 #3248059] DEBUG -- :   TRANSACTION (13.6ms)  commit transaction
D, [2022-07-10T03:07:43.507526 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.2ms)  SELECT "items".* FROM "items" WHERE "items"."guid" = ? LIMIT ?  [["guid", "https://dustycloud.org/blog/if-you-cant-tell-people-anything/"], ["LIMIT", 1]]
[info] ** NEW | If you can't tell people anything, can you show them?
[debug] *** dump item_attribs w/ class types:
[debug]   guid: >https://dustycloud.org/blog/if-you-cant-tell-people-anything/< : String
[debug]   title: >If you can't tell people anything, can you show them?< : String
[debug]   url: >https://dustycloud.org/blog/if-you-cant-tell-people-anything/< : String
[debug]   updated: >2020-08-29 12:05:00 UTC< : Time
[debug]   published: >< : NilClass
D, [2022-07-10T03:07:43.509325 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:43.510591 #3248059] DEBUG -- :   Pluto::Model::Item Create (0.5ms)  INSERT INTO "items" ("guid", "url", "title", "summary", "updated", "feed_id", "fetched", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [["guid", "https://dustycloud.org/blog/if-you-cant-tell-people-anything/"], ["url", "https://dustycloud.org/blog/if-you-cant-tell-people-anything/"], ["title", "If you can't tell people anything, can you show them?"], ["summary", "<p>The other day I made a\n<a href=\"https://octodon.social/@cwebber/104746037303599668\">sadpost on the fediverse</a>\nthat said: &quot;simultaneously regularly feel like people don't take the\ndirections I'm trying to push seriously enough and that I'm not worth\ntaking seriously&quot;.\n(Similarly, I've also joked that &quot;imposter syndrome and a Cassandra\ncomplex are a hell of a combo&quot; before.)\nI got a number of replies from people, both publicly and privately, and\nthe general summary of most of them are, &quot;We do care!  The stuff you're\nworking on seems really cool and valuable!  I'll admit that I don't\nreally know what it is you're talking about but it sounds important!&quot;\n(Okay, and I just re-read, and it was only a portion of it that even said\nthe latter part, but of course, what do I emphasize in my brain?)\nThat was nice to hear that people care and are enthusiastic, and I did\nfeel much better, but it did also kind of feel like confirmation that\nI'm not getting through to people completely either.</p><p>But then <a href=\"https://mastodon.sdf.org/@jfred\">jfred</a> made an\n<a href=\"https://mastodon.sdf.org/@jfred/104747234928467298\">interesting reply</a>:</p><blockquote><p>Yeah, that feels familiar. Impostor syndrome hits hard. You're\ndefinitely worth taking seriously though, and the projects you're\nworking on are the most exciting ones I've been following.</p><p>As for people not taking the directions you're pushing\nseriously... I've felt the same at work, and I think part of it is\nthat there's only so much one person can do. But also part of it is:\n<a href=\"http://habitatchronicles.com/2004/04/you-cant-tell-people-anything/\">http://habitatchronicles.com/2004/04/you-cant-tell-people-anything/</a></p><p>...it's hard to get ideas across to someone until they can interact\nwith it themselves</p></blockquote><p>So first of all, what a nice post!\nSecond of all, it's kind of funny that jfred replied with this because\nout of everyone, jfred is one of the people who's picked up and\nunderstood what's happening in\n<a href=\"https://gitlab.com/spritely/goblins\">Spritely Goblins</a>\nin particular the most, often running or creating demos of things on\ntop of it using things I haven't even documented yet (so definitely\nnot a person I would say isn't taking me seriously or getting what the\nwork is doing).</p><p>But third, that link to <a href=\"http://habitatchronicles.com/\">Habitat Chronicles</a>\nis right on point for a few reasons: first of all, Spritely is <em>hugely</em>\ninfluenced by the various generations of Habitat, from the original\n<a href=\"https://www.youtube.com/watch?v=VVpulhO3jyc\">first-ever-graphical-virtual-worlds Habitat</a>\n(premiering on the Commodore 64 in the mid 1980s, of all things!)\nto <a href=\"https://www.youtube.com/watch?v=KNiePoNiyvE\">Electric Communities Habitat</a>,\nespecially because that's where the <a href=\"http://erights.org/\">E programming language</a>\ncame from, which I think it's safe to say has had a bigger influence on\n<a href=\"https://gitlab.com/spritely/goblins\">Spritely Goblins</a> than anything\n(except maybe\n<a href=\"http://mumble.net/~jar/pubs/secureos/secureos.html\">this paper by Jonathan Rees</a>,\nwhich is the first time I realized that &quot;oh, object capability security\nis just normal programming flow&quot;).\nBut also, that blogpost in particular was so perfect about this subject:\n<a href=\"http://habitatchronicles.com/2004/04/you-cant-tell-people-anything/\">You can't tell people anything</a>...!</p><p>In summary, the blogpost isn't saying that people aren't foolishly\nincapable of understanding things, but that people in general don't\nunderstand well by &quot;being explained to&quot;.\nWhat helps people understand is <em>experiences</em>:</p><blockquote><p>Eventually people can be educated, but what you have to do is find a\nway give them the experience, to put them in the\nsituation. Sometimes this can only happen by making real the thing\nyou are describing, but sometimes by dint of clever artifice you can\nsimulate it.</p></blockquote><p>This really congealed for me and helped me feel justified in an\napproach I've been taking in the Spritely project.\nIn general, up until now I've spent most of my time between two\nstates: coding the backend super-engineering stuff, and coding\ndemos on top of it.\nYou might in the meanwhile see me post technobabble onto\n<a href=\"https://octodon.social/@cwebber/\">my fediverse</a> or\n<a href=\"https://twitter.com/dustyweb\">birdsite</a> accounts, but I'm not in\ngeneral trying too hard to write about the structurally interesting\nthings going on until it comes time to write documentation\n(whether it be for <a href=\"https://docs.racket-lang.org/goblins/index.html\">Goblins</a>,\nor the <a href=\"https://gitlab.com/dustyweb/magenc/blob/master/magenc/scribblings/intro.org\">immutable storage</a>\nand <a href=\"https://gitlab.com/spritely/crystal/blob/master/crystal/scribblings/intro.org\">mutable storage</a> writeups).\nBut in general, the way that I'm convinced people will get it is not\nby talk but by first, demonstration, and second, use.</p><p>Aside from the few people that have picked up and played with Goblins\nyet, I don't think I've hit a sufficient amount of &quot;use&quot; yet in Spritely.\nThat's ok, I'm not at that stage yet, and when I am, it'll be fairly clear.\n(ETA: one year from now.)\nSo let's talk about demonstration.</p><p>The first demo I wrote was the\n<a href=\"https://gitlab.com/spritely/golem/blob/master/README.org\">Golem demo</a>,\nthat showed roughly that distributed but encrypted storage could be\napplied to the fediverse.\nCute and cool, and that turned the heads of a few fediverse\nimplementers.</p><p>But let's face it, the best demo I've done yet was the\n<a href=\"https://dustycloud.org/blog/goblins-time-travel-micropreview/\">Terminal Phase time travel demo</a>.\nAnd it didn't hurt that it had a cool looking animated GIF to go\nwith it:</p><p><img src=\"https://dustycloud.org/gfx/goodies/terminal-phase-goblins-time-travel.gif\" alt=\"Time travel in Spritely Goblins shown through Terminal Phase\" /></p><p>Prior to this demo, people would ask me, &quot;What's this Goblins thing?&quot;\nAnd I'd try to say a number of things to them... &quot;oh, its a\ndistributed, transactional, quasi-functional distributed programming\nsystem safe to run in mutually suspicious networks that follows object\ncapability security and the classic actor model in the style of the E\nprogramming language but written in Scheme!&quot;\nAnd I'd watch as their eyes glaze over because\n<em>why wouldn't their eyes glaze over</em> after a statement like that, and\nthen I'd try to explain the individual pieces but I could tell\nthat the person would be losing interest by then and\n<em>why wouldn't they lose interest</em> but even realizing that I'd kind of\nfeel despair settling in...</p><p>But when you show them a pew pew space lasers game and oh wow why\nis there time travel, <em>how did you add time travel</em>, is it using\nfunctional reactive programming or something?\n(Usually FRP systems are the only other ones where people have\nseen these kinds of time travel demos.)\nAnd I'd say nope!\nIt doesn't require that.\nMostly it looks like writing just straightahead code but you get\nthis kind of thing for free.\nAnd the person would say, wow!\nSounds really cool!  How much work does it take to add the time\ntravel into the game?\nAnd I just say: no extra work at all.\nI wrote the whole game without testing anything about time travel or\neven thinking about it, then later I just threw a few extra lines to\nwrite the UI to expose the time travel part and it just worked.  And\nthat's when I see peoples' heads explode with wonder and the\nconnections start to be made about what Goblins might be able to do.</p><p>But of course, that's only a partial connection for two reasons.\nOne is that the time travel demo above only shows off a small,\nminute part of the features of Goblins.\nAnd actually, the least interesting of them!\nIt doesn't show off the distributed programming or asynchronous\nprogramming parts, it doesn't show off the cool object capability\nsecurity that's safe to run in mutually suspicious networks.\nBut still: it gave a taste that something cool is happening here.\nMaybe Chris hasn't just been blowing a bunch of time since\nfinishing the <a href=\"https://www.w3.org/TR/activitypub/\">ActivityPub</a>\nstandardization process\n<a href=\"https://www.w3.org/blog/news/archives/6785\">about two and a half years ago</a>.\n(Yikes, two and a half years ago!?!)</p><p>To complete the rest of that demonstration of the other things\nin the system requires a different kind of demo.\nTerminal Phase was a demo to show off the synchronous half of Goblins,\nbut where Goblins really shines is in the asynchronous, distributed\nprogramming stuff.\nThat's not ready to show off yet, but I'll give you the first taste\nof what's in progress:</p><p><img src=\"https://dustycloud.org/misc/goblins-gui-integration.gif\" alt=\"Goblins chat GUI demo\" /></p><p>(Actually a bit more has progressed since I've recorded that GIF,\nmultiple chatrooms and etc, but not really worth bothering to show\noff quite yet.)</p><p>Hmm, that's not really all that thrilling.  A chatroom that looks about\nthe same level of featureful, maybe less, than IRC?\nWell, it could be more exciting if you hear that the\n<a href=\"https://gitlab.com/spritely/goblin-chat/-/blob/94207fd0f3290f8ec6b087cde167bc78a6329560/chat-backend.rkt\">full chat protocol implementation</a>\nis only about 250 lines of code, including authenticating users and\nposts by users.\nThat's smaller even than its\n<a href=\"https://gitlab.com/spritely/goblin-chat/-/blob/94207fd0f3290f8ec6b087cde167bc78a6329560/goblin-chat-gui.rkt\">corresponding GUI code</a>,\nwhich is less than 300 lines of code.\nSo the exciting thing there is how much heavy lifting Goblins takes\ncare of for you.</p><p>But that's hardly razzle-dazzle exciting.\nIn order for me to hint at the rest of what's happening here, we need\nto put out an asynchronous programming demo that's as or more\ninteresting than the time travel demo.\nAnd I expect to do that.\nI hope soon enough to show off stuff that will make people go,\n&quot;Oh, what's <em>going on</em> here?&quot;</p><p>But even that doesn't complete the connection for people,\nbecause <em>showing</em> is one thing but to complete the loop, we need\npeople to <em>use</em> things.\nWe need to get this stuff in the hands of users to play with and\nexperiment themselves.\nI have plans to do that... and not only that, make this stuff\n<em>not</em> intimidating for newcomers.\nWhen Spritely guides everyday people towards extending Spritely from\ninside of Spritely as it runs, that's when it'll really click.</p><p>And once it clicks sufficiently, it'll no longer become exciting,\nbecause people will just come to expect it.\nA good example of that comes from the aforementioned\n<a href=\"http://habitatchronicles.com/2004/04/you-cant-tell-people-anything/\">You can't tell people anything</a> article:</p><blockquote><p>Years ago, before Lucasfilm, I worked for <a href=\"http://xanadu.com/\">Project Xanadu</a>\n(the original hypertext project, way before this newfangled World\nWide Web thing). One of the things I did was travel around the\ncountry trying to evangelize the idea of hypertext. People loved it,\nbut nobody got it. Nobody. We provided lots of explanation. We had\npictures. We had scenarios, little stories that told what it would\nbe like. People would ask astonishing questions, like “who’s going\nto pay to make all those links?” or “why would anyone want to put\ndocuments online?” Alas, many things really must be experienced to\nbe understood. We didn’t have much of an experience to deliver to\nthem though — after all, the whole point of all this evangelizing\nwas to get people to give us money to pay for developing the\nsoftware in the first place! But someone who’s spent even 10 minutes\nusing the Web would never think to ask some of the questions we got\nasked.</p></blockquote><p>Eventually, if we succeed, the ideas in Spritely will no longer seem\nexciting... because people will have internalized and come to expect\nthem.\nJust like hyperlinks on the web today.</p><p>But to get there, in the meanwhile, we have to get people interested.\nTo become so successful as to be mundane, we have to first be\nrazzle-dazzle exciting.\nAnd to that end, that's why I take the demo approach to Spritely.\nBecause it's hard to tell someone something... but showing them,\nthat's another matter.</p><p><strong>PS:</strong> It's also not true that people don't get what I'm doing, and\nthat's even been reflected materially.\nI've been lucky to be supported over the last few years from a\ncombination of\n<a href=\"https://dustycloud.org/blog/samsung-stack-zero-grant/\">a grant from Samsung's Stack Zero</a>\nand\n<a href=\"https://dustycloud.org/blog/spritely-nlnet-grant/\">one from NLNet</a>,\nnot to mention quite a few <a href=\"https://www.patreon.com/cwebber\">donors on Patreon</a>.\nI do recognize and appreciate that people are supporting me.\nIn some ways receiving this support makes me feel more seriously about the\nneed to demonstrate and prove that what I'm doing is real.\nI hope I am doing and will continue to do a sufficient job, and hope that\nthe upcoming demos contribute to that more materially!</p><p><strong>PPS:</strong> If, in the meanwhile, you're <em>already</em> excited, check out\nthe <a href=\"https://docs.racket-lang.org/goblins/index.html\">Goblins documentation</a>.\nThe most exciting stuff is coming in the <em>next</em> major release\n(which will be out soon), which is when the distributed programming\ntools will be made available to users of the system for the first time.\nBut if you want to get a head start, the code you'll be writing will\nmostly work the same between the distributed and non-distributed\n(as in, distributed across computers/processes) asynchronous stuff,\nso if you start reading the docs today, most of your code will already\njust work on the new stuff once released.\nAnd if you do start playing around, maybe drop by the\n<a href=\"https://webchat.freenode.net/?channels=spritely\">#spritely channel on freenode</a>\nand say hello!</p>"], ["updated", "2020-08-29 12:05:00"], ["feed_id", 1], ["fetched", "2022-07-10 07:07:43.060469"], ["created_at", "2022-07-10 07:07:43.508539"], ["updated_at", "2022-07-10 07:07:43.508539"]]
D, [2022-07-10T03:07:43.524612 #3248059] DEBUG -- :   TRANSACTION (13.5ms)  commit transaction
D, [2022-07-10T03:07:43.525430 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.2ms)  SELECT "items".* FROM "items" WHERE "items"."guid" = ? LIMIT ?  [["guid", "https://dustycloud.org/blog/terminal-phase-in-linux-magazine-pl/"], ["LIMIT", 1]]
[info] ** NEW | Terminal Phase in Linux Magazine (Polish edition)
[debug] *** dump item_attribs w/ class types:
[debug]   guid: >https://dustycloud.org/blog/terminal-phase-in-linux-magazine-pl/< : String
[debug]   title: >Terminal Phase in Linux Magazine (Polish edition)< : String
[debug]   url: >https://dustycloud.org/blog/terminal-phase-in-linux-magazine-pl/< : String
[debug]   updated: >2020-08-12 12:54:00 UTC< : Time
[debug]   published: >< : NilClass
D, [2022-07-10T03:07:43.527557 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:43.528669 #3248059] DEBUG -- :   Pluto::Model::Item Create (0.5ms)  INSERT INTO "items" ("guid", "url", "title", "summary", "updated", "feed_id", "fetched", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [["guid", "https://dustycloud.org/blog/terminal-phase-in-linux-magazine-pl/"], ["url", "https://dustycloud.org/blog/terminal-phase-in-linux-magazine-pl/"], ["title", "Terminal Phase in Linux Magazine (Polish edition)"], ["summary", "<p><img src=\"https://dustycloud.org/misc/terminal-phase-linux-magazine-pl.jpg\" alt=\"Terminal Phase featured in Polish version of Linux Magazine\" /></p><p>Hey look at that!\nMy terminal-space-shooter-game <a href=\"https://gitlab.com/dustyweb/terminal-phase\">Terminal Phase</a>\nmade an appearance in the <a href=\"https://linux-magazine.pl/\">Polish version of Linux Magazine</a>.\nI had no idea, but <a href=\"https://twitter.com/m_a_j_ch_rz_a_k\">Michal Majchrzak</a>\nboth tipped me off to it and took the pictures.  (Thank you!)</p><p>I don't know Polish but I can see some references to Konami and SHMUP\n(shoot-em-up game).\nThe screenshot they have isn't the one I published, so I guess the\nauthor got it running too... I hope they had fun!</p><p>Apparently it appeared in the June 2020 edition:</p><p><img src=\"https://dustycloud.org/misc/linux-magazine-pl-june-2020-cropped.jpg\" alt=\"June 2020 edition of Polish Magazine\" /></p><p>I guess because print media coverage is smaller, it feels cooler to\nget covered these days in it in some way?</p><p>I wonder if I can find a copy somewhere!</p>"], ["updated", "2020-08-12 12:54:00"], ["feed_id", 1], ["fetched", "2022-07-10 07:07:43.060469"], ["created_at", "2022-07-10 07:07:43.526614"], ["updated_at", "2022-07-10 07:07:43.526614"]]
D, [2022-07-10T03:07:43.540706 #3248059] DEBUG -- :   TRANSACTION (11.6ms)  commit transaction
D, [2022-07-10T03:07:43.541311 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.1ms)  SELECT "items".* FROM "items" WHERE "items"."guid" = ? LIMIT ?  [["guid", "https://dustycloud.org/blog/announcing-foss-and-crafts/"], ["LIMIT", 1]]
[info] ** NEW | Announcing FOSS and Crafts
[debug] *** dump item_attribs w/ class types:
[debug]   guid: >https://dustycloud.org/blog/announcing-foss-and-crafts/< : String
[debug]   title: >Announcing FOSS and Crafts< : String
[debug]   url: >https://dustycloud.org/blog/announcing-foss-and-crafts/< : String
[debug]   updated: >2020-07-14 11:20:00 UTC< : Time
[debug]   published: >< : NilClass
D, [2022-07-10T03:07:43.542876 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:43.543705 #3248059] DEBUG -- :   Pluto::Model::Item Create (0.4ms)  INSERT INTO "items" ("guid", "url", "title", "summary", "updated", "feed_id", "fetched", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [["guid", "https://dustycloud.org/blog/announcing-foss-and-crafts/"], ["url", "https://dustycloud.org/blog/announcing-foss-and-crafts/"], ["title", "Announcing FOSS and Crafts"], ["summary", "<p>I wrote recently about\n<a href=\"https://dustycloud.org/blog/departing-libre-lounge/\">departing Libre Lounge</a>\nbut as I said there, &quot;This is probably not the end of me doing\npodcasting, but if I start something up again it'll be a bit different\nin its structure.&quot;</p><p>Well!  Morgan and I have co-launched a new podcast called\n<a href=\"https://fossandcrafts.org/\">FOSS and Crafts</a>!\nAs the title implies, it's going to be a fairly interdisciplinary\npodcast... the title says it all fairly nicely I think: &quot;A podcast\nabout free software, free culture, and making things together.&quot;</p><p>We already have the <a href=\"https://fossandcrafts.org/\">intro episode</a> out!\nIt's fairly intro-episode'y... meet the hosts, hear about what to expect\nfrom the show, etc etc... but we do talk a bit about some background\nof the name!</p><p>But more substantial episodes will be out soon.\nWe have a lot of plans and ideas for the show, and I've got a pretty\ngood setup for editing/publishing now.\nSo if that sounds fun, subscribe, and more stuff should be hitting\nyour ears soon!</p><p>(PS: we have a nice little community growing in\n<a href=\"https://webchat.freenode.net/?channels=fossandcrafts\">#fossandcrafts on irc.freenode.net</a>\nif you're into that kind of thing!)</p>"], ["updated", "2020-07-14 11:20:00"], ["feed_id", 1], ["fetched", "2022-07-10 07:07:43.060469"], ["created_at", "2022-07-10 07:07:43.542077"], ["updated_at", "2022-07-10 07:07:43.542077"]]
D, [2022-07-10T03:07:43.553840 #3248059] DEBUG -- :   TRANSACTION (9.6ms)  commit transaction
D, [2022-07-10T03:07:43.555010 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.2ms)  SELECT "items".* FROM "items" WHERE "items"."guid" = ? LIMIT ?  [["guid", "https://dustycloud.org/blog/mid-2020-updates/"], ["LIMIT", 1]]
[info] ** NEW | Some updates: CapTP in progress, Datashards, chiptune experiments, etc
[debug] *** dump item_attribs w/ class types:
[debug]   guid: >https://dustycloud.org/blog/mid-2020-updates/< : String
[debug]   title: >Some updates: CapTP in progress, Datashards, chiptune experiments, etc< : String
[debug]   url: >https://dustycloud.org/blog/mid-2020-updates/< : String
[debug]   updated: >2020-06-30 19:14:00 UTC< : Time
[debug]   published: >< : NilClass
D, [2022-07-10T03:07:43.557633 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:43.558949 #3248059] DEBUG -- :   Pluto::Model::Item Create (0.6ms)  INSERT INTO "items" ("guid", "url", "title", "summary", "updated", "feed_id", "fetched", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [["guid", "https://dustycloud.org/blog/mid-2020-updates/"], ["url", "https://dustycloud.org/blog/mid-2020-updates/"], ["title", "Some updates: CapTP in progress, Datashards, chiptune experiments, etc"], ["summary", "<p>(<a href=\"https://www.patreon.com/posts/38809138\">Originally written</a> as a post\n<a href=\"https://www.patreon.com/cwebber\">for Patreon donors</a>.)</p><p>Hello... just figured I'd give a fairly brief update.  Since I wrote\nmy last post I've been working hard towards the distributed\nprogramming stuff in Goblins.</p><p>In general, this involves implementing a protocol called\n<a href=\"http://wiki.erights.org/wiki/CapTP\">CapTP</a>, which\nis fairly obscure... the idea is generally to apply the same &quot;object\ncapability security&quot; concept that Goblins already follows but on a\nnetworked protocol level.  Probably the most prominent other\nimplementation of CapTP right now is being done by the\n<a href=\"https://agoric.com/\">Agoric</a> folks,\n<a href=\"https://github.com/Agoric/agoric-sdk/blob/master/packages/captp/lib/captp.js\">captp.js</a>.\nI've been in communication with them... could we achieve\ninteroperability between our implementations?  It could be cool, but\nit's too early to tell.  Anyway it's one of those technical areas\nthat's so obscure that I decided to\n<a href=\"https://groups.google.com/forum/#!topic/cap-talk/xWv2-J62g-I%5B1-25%5D\">document my progress on the cap-talk mailing list</a>,\nbut that's becoming the length of a small novel... so I guess, beware\nbefore you try to read that whole thing.  I'm far enough along where\nthe main things work, but not quite everything (CapTP supports such\nwild things as distributed garbage collection...!!!!)</p><p>Anyway, in general I don't think that people get too excited by\nhearing &quot;backend progress is happening&quot;; I believe that implementing\nCapTP is even more important than standardizing ActivityPub was in the\nlong run of my life work, but I also am well aware that in general\npeople (including myself!) understand best by seeing an interesting\ndemonstration.  So, I do plan another networked demo, akin to the\n<a href=\"https://dustycloud.org/blog/goblins-time-travel-micropreview/\">time-travel Terminal Phase demo</a>,\nbut I'm not sure just how fancy it will be (yet).  I think I'll have\nmore things to show on that front in 1-2 months.</p><p>(Speaking of Goblins and games, I'm putting together a little library\ncalled <a href=\"https://gitlab.com/spritely/game-goblin\">Game Goblin</a>\nto make making games on top of Goblins a bit easier; it isn't quite\nready yet but thought I'd mention it.  It's currently going through\nsome &quot;user testing&quot;.)</p><p>More work is happening on the Datashards front; Serge Wroclawski\n(project leader for Datashards; I guess you could say I'm &quot;technical\nengineer&quot;) and I have started assembling more documentation and have\nput together <a href=\"https://datashards.net/\">some proto-standards documents</a>.\n(Warning: WIP WIP WIP!!!)  We are exploring with a standards group\nwhether or not Datashards would be a good fit there, but it's too\nearly to talk about that since the standards group is still figuring\nit out themselves.  Anyway, it's taken up a good chunk of time so I\nfigured it was worth mentioning.</p><p>So, more to come, and hopefully demos not too far ahead.</p><p>But let's end on a fun note.  In-between all that (and various things\nat home, of course), I have taken a bit of what might resemble\n&quot;downtime&quot; and I'm learning how to make ~chiptunes / &quot;tracker music&quot;\nwith <a href=\"https://milkytracker.titandemo.org/\">Milkytracker</a>, which is\njust a lovely piece of software.  (I've also been learning more about\n<a href=\"http://www.drpetter.se/article_sound.html\">sound theory</a> and have\nbeen figuring out how to compose some of my own samples/&quot;instruments&quot;\nfrom code.)  Let me be clear, <em>I'm not very good at it</em>, but it's fun\nto learn a new thing.  Here's a <a href=\"https://dustycloud.org/misc/dollhouse.flac\">dollhouse piano thing</a>\n(<a href=\"https://dustycloud.org/misc/dollhouse.xm\">XM file</a>), the\n<a href=\"https://dustycloud.org/misc/ecto-house.flac\">start of a haunted video game level</a>\n(<a href=\"https://dustycloud.org/misc/conversations-with-a-computer.xm\">XM file</a>),\na <a href=\"https://dustycloud.org/misc/conversations-with-a-computer.flac\">sound experiment representing someone interacting with a computer</a>\n(<a href=\"https://dustycloud.org/misc/conversations-with-a-computer.xm\">XM file</a>),\nand the\n<a href=\"https://dustycloud.org/misc/siddy-start.xm\">mandatory demonstration that I've figured out how to do C64-like</a>\n<a href=\"https://en.wikipedia.org/wiki/Phase_modulation\">phase modulation</a> and\n<a href=\"https://en.wikipedia.org/wiki/Arpeggio\">arpeggios</a> (<a href=\"https://dustycloud.org/misc/siddy-start.xm\">XM file</a>).\nIs any of that stuff... &quot;good&quot;?  Not really, all pretty amateurish,\nbut maybe in a few months of off-hour experiments it won't be... so\nmaybe some of my future demos / games won't be quite as quiet!  ;)</p><p>Hope everyone's doing ok out there...</p>"], ["updated", "2020-06-30 19:14:00"], ["feed_id", 1], ["fetched", "2022-07-10 07:07:43.060469"], ["created_at", "2022-07-10 07:07:43.556663"], ["updated_at", "2022-07-10 07:07:43.556663"]]
D, [2022-07-10T03:07:43.578830 #3248059] DEBUG -- :   TRANSACTION (19.3ms)  commit transaction
D, [2022-07-10T03:07:43.579797 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.2ms)  SELECT "items".* FROM "items" WHERE "items"."guid" = ? LIMIT ?  [["guid", "https://dustycloud.org/blog/departing-libre-lounge/"], ["LIMIT", 1]]
[info] ** NEW | Departing Libre Lounge
[debug] *** dump item_attribs w/ class types:
[debug]   guid: >https://dustycloud.org/blog/departing-libre-lounge/< : String
[debug]   title: >Departing Libre Lounge< : String
[debug]   url: >https://dustycloud.org/blog/departing-libre-lounge/< : String
[debug]   updated: >2020-05-13 14:13:00 UTC< : Time
[debug]   published: >< : NilClass
D, [2022-07-10T03:07:43.581893 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:43.583040 #3248059] DEBUG -- :   Pluto::Model::Item Create (0.6ms)  INSERT INTO "items" ("guid", "url", "title", "summary", "updated", "feed_id", "fetched", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [["guid", "https://dustycloud.org/blog/departing-libre-lounge/"], ["url", "https://dustycloud.org/blog/departing-libre-lounge/"], ["title", "Departing Libre Lounge"], ["summary", "<p>Over the last year and a half I've had a good time presenting on\n<a href=\"https://librelounge.org/\">Libre Lounge</a> with my co-host Serge Wroclawski.\nI'm very proud of the topics we've decided to cover, of which there\nare quite a few good ones in <a href=\"https://librelounge.org/archive/\">the archive</a>,\nand the audience the show has had is just the best.</p><p>However, I've decided to depart the show...  Serge and I continue to be\nfriends (and are still working on a number of projects together, such as\n<a href=\"https://datashards.net/\">Datashards</a> and the\n<a href=\"https://dustycloud.org/blog/spritely-nlnet-grant/\">recently announced grant</a>),\nbut in terms of the podcast I think we'd like to take things in\ndifferent creative directions.</p><p>This is probably not the end of me doing podcasting, but if I start\nsomething up again it'll be a bit different in its structure... and\nyou can be sure you'll hear about it here and on my\n<a href=\"https://octodon.social/@cwebber/\">fediverse account</a> and over at\n<a href=\"https://twitter.com/dustyweb/\">the birdsite</a>.</p><p>In the meanwhile, I look forward to continuing to tuning into Libre\nLounge, but as a listener.</p><p>Thanks for all the support, Libre Loungers!</p>"], ["updated", "2020-05-13 14:13:00"], ["feed_id", 1], ["fetched", "2022-07-10 07:07:43.060469"], ["created_at", "2022-07-10 07:07:43.580986"], ["updated_at", "2022-07-10 07:07:43.580986"]]
D, [2022-07-10T03:07:43.594403 #3248059] DEBUG -- :   TRANSACTION (10.8ms)  commit transaction
D, [2022-07-10T03:07:43.595036 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.2ms)  SELECT "items".* FROM "items" WHERE "items"."guid" = ? LIMIT ?  [["guid", "https://dustycloud.org/blog/spritely-nlnet-grant/"], ["LIMIT", 1]]
[info] ** NEW | Spritely's NLNet grant: Interface Discovery for Distributed Systems
[debug] *** dump item_attribs w/ class types:
[debug]   guid: >https://dustycloud.org/blog/spritely-nlnet-grant/< : String
[debug]   title: >Spritely's NLNet grant: Interface Discovery for Distributed Systems< : String
[debug]   url: >https://dustycloud.org/blog/spritely-nlnet-grant/< : String
[debug]   updated: >2020-05-13 13:54:00 UTC< : Time
[debug]   published: >< : NilClass
D, [2022-07-10T03:07:43.596596 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:43.597299 #3248059] DEBUG -- :   Pluto::Model::Item Create (0.3ms)  INSERT INTO "items" ("guid", "url", "title", "summary", "updated", "feed_id", "fetched", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [["guid", "https://dustycloud.org/blog/spritely-nlnet-grant/"], ["url", "https://dustycloud.org/blog/spritely-nlnet-grant/"], ["title", "Spritely's NLNet grant: Interface Discovery for Distributed Systems"], ["summary", "<p>I've been putting off making this blogpost for a while because I kept\nthinking, &quot;I should wait to do it until I finish making some sort of\nwebsite for <a href=\"https://dustycloud.org/blog/spritely/\">Spritely</a> and make\na blogpost there!&quot;\nWhich, in a sense is a completely reasonable thought because right now\nSpritely's only &quot;website&quot; is a\n<a href=\"https://gitlab.com/spritely\">loose collection of repositories</a>,\nbut I'd like something that provides a greater narrative for what\nSpritely is trying to accomplish.\nBut that also kind of feels like a distraction (or maybe I should just\nmake a very minimal website) when there's something important to\nannounce... so I'm just doing it here (where I've been making all the\nother Spritely posts so far anyway).</p><p>Spritely is an <a href=\"https://nlnet.nl/\">NLnet</a> (in conjunction with the\nEuropean Commision / Next Generation Internet initative) grant\nrecipient!\nSpecifically, we have received a grant for &quot;Interface Discovery for\nDistributed Systems&quot;!\nI'll be implementing the work alongside Serge Wroclawski.</p><p>There are two interesting sub-phrases there: &quot;Interface Discovery&quot;\nand &quot;Distributed Systems&quot;.\nRegarding &quot;distributed systems&quot;, we should really say &quot;mutually\nsuspicious open-world distributed systems&quot;.\nThose extra words change some of the requirements; we have to assume\nwe'll be told about things we don't understand, and we have to assume\nthat many objects we interact with may be opaque to us... they might\nlie about what kind of thing they are.</p><p>Choosing how to name interfaces then directly ties into something I\nwrote about here more recently, namely\n<a href=\"https://dustycloud.org/blog/content-addressed-vocabulary/\">content addressed vocabulary</a>.</p><p>I wrote more ideas and details about the interfaces ideas\n<a href=\"https://groups.google.com/forum/#!topic/cap-talk/YBF3QMKgvXs\">email to cap-talk</a>\nso you can read more there if you like... but I think more details\nabout the interfaces thoughts than that can wait until we publish\na report about it (and publishing a report is baked into the grant).</p><p>The other interesting bit though is the &quot;distributed&quot; aspect; in order\nto handle distributed computation and object interaction, we need to\ncorrectly design our protocols.\nThankfully there is a lot of good prior art to work from, usually some\nvariant of &quot;<a href=\"http://www.erights.org/elib/distrib/captp/index.html\">CapTP</a>&quot;\n(Capability Transport Protocol), as implemented in its original form by\n<a href=\"http://www.erights.org/\">E</a>, taking on a bit of a different form in\nthe <a href=\"http://waterken.sourceforge.net/\">Waterken</a> project, adapted in\n<a href=\"https://capnproto.org/\">Cap'N Proto</a>,\nas well as with the new work happening over at <a href=\"https://agoric.com/\">Agoric</a>.\nEach of these variants of the core CapTP ideas have tried to tackle some\ndifferent use cases, and <a href=\"https://docs.racket-lang.org/goblins/index.html\">Goblins</a>\nhas its own needs to be covered.\nIs there a possibility of convergence?\nPossibly... I am trying to understand the work of and communicate with\nthe folks over at Agoric but I think it's a bit too early to be\nconclusive about anything.\nRegardless, it'll be a major milestone once Spritely Goblins is able\nto actually live up to its promise of distributed computation, and work\non this is basically the next step to proceed on.</p><p>When I first <a href=\"https://dustycloud.org/blog/spritely/\">announced Spritely</a>\nabout a year and a half ago I included a section that said\n&quot;Who's going to pay for all this?&quot; to which I then said,\n&quot;I don't really have a funding plan, so I guess this is kind of a\nnon-answer. However, I do have a\n<a href=\"https://www.patreon.com/cwebber\">Patreon account</a> you could donate to.&quot;\nTo be honest, I was fairly nervous about it... so I want to express my\nsincere and direct appreciation to <a href=\"https://nlnet.nl/\">NLnet</a> alongside\nthe European Commission / Next Generation Internet Initiative, along with\n<a href=\"https://samsungnext.com/whats-next/category/podcasts/decentralization-samsung-next-stack-zero-grant-recipients/\">Samsung Stack Zero</a>,\nand all the folks donating on <a href=\"https://www.patreon.com/cwebber\">Patreon</a>\nand <a href=\"https://liberapay.com/cwebber/\">Liberapay</a>.\nWith all the above, and especially the new grant from NLnet, I\nshould have enough funding to continue working on Spritely through\na large portion of 2021.\nI am determined to make good on the support I've received, and am\nlooking forward to put out more interesting demonstrations of this\ntechnology over the next few months.</p>"], ["updated", "2020-05-13 13:54:00"], ["feed_id", 1], ["fetched", "2022-07-10 07:07:43.060469"], ["created_at", "2022-07-10 07:07:43.595868"], ["updated_at", "2022-07-10 07:07:43.595868"]]
D, [2022-07-10T03:07:43.608253 #3248059] DEBUG -- :   TRANSACTION (10.5ms)  commit transaction
D, [2022-07-10T03:07:43.609181 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.2ms)  SELECT "items".* FROM "items" WHERE "items"."guid" = ? LIMIT ?  [["guid", "https://dustycloud.org/blog/what-should-fit-in-a-foss-license/"], ["LIMIT", 1]]
[info] ** NEW | What should fit in a FOSS license?
[debug] *** dump item_attribs w/ class types:
[debug]   guid: >https://dustycloud.org/blog/what-should-fit-in-a-foss-license/< : String
[debug]   title: >What should fit in a FOSS license?< : String
[debug]   url: >https://dustycloud.org/blog/what-should-fit-in-a-foss-license/< : String
[debug]   updated: >2020-03-09 17:07:00 UTC< : Time
[debug]   published: >< : NilClass
D, [2022-07-10T03:07:43.610992 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:43.612322 #3248059] DEBUG -- :   Pluto::Model::Item Create (0.6ms)  INSERT INTO "items" ("guid", "url", "title", "summary", "updated", "feed_id", "fetched", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [["guid", "https://dustycloud.org/blog/what-should-fit-in-a-foss-license/"], ["url", "https://dustycloud.org/blog/what-should-fit-in-a-foss-license/"], ["title", "What should fit in a FOSS license?"], ["summary", "<p><em>Originally sent in <a href=\"https://lists.opensource.org/pipermail/license-discuss_lists.opensource.org/2020-March/021466.html\">an email to the OSI license-discuss mailing list</a>.</em></p><p>What terms belong in a free and open source software license?  There\nhas been a lot of debate about this lately, especially as many of us\nare interested in expanding the role we see that we play in terms of\nuser freedom issues.  I am amongst those people that believe that FOSS\nis a movement thats importance is best understood not on its own, but\non the effects that it (or the lack of it) has on society.  The\npurpose of all this work is to advance user freedom and human rights\nwith respect to computing.</p><p>I also believe there are other critical issues that FOSS has a role to\nplay in: diversity issues (both within our own movement and empowering\npeople in their everyday lives) are one, environmental issues (the\nintersection of our movement with the right-to-repair movement is a good\nexample) are another.  I also agree that the trend towards &quot;cloud\ncomputing&quot; companies which can more or less entrap users in their\nservices is a major concern, as are privacy concerns.</p><p>Given all the above, what should we do?  What kinds of terms belong in\nFOSS licenses, especially given all our goals above?</p><p>First, I would like to say that I think that many people in the FOSS\nworld, for good reason, spend a lot of time thinking about licenses.\nThis is good, and impressive; few other communities have as much legal\nliteracy distributed even amongst their non-lawyer population as ours.\nAnd there's no doubt that FOSS licenses play a critical role... let's\nacknowledge from the outset that a conventionally proprietary license\nhas a damning effect on the agency of users.</p><p>However, I also believe that user freedom can only be achieved via a\nmulti-layered approach.  We cannot provide privacy by merely adding\nprivacy-requirements terms to a license, for instance; encryption is key\nto our success.  I am also a supporter of code of conducts and believe\nthey are important/effective (I know not everyone does; I don't care for\nthis to be a CoC debate, thanks), but I believe that they've also been\nvery effective and successful checked in as CODE-OF-CONDUCT.txt\n<em>alongside</em> the traditional COPYING.txt/LICENSE.txt.  This is a good\nexample of a multi-layered approach working, in my view.</p><p>So acknowledging that, which problems should we try to solve at which\nlayers?  Or, more importantly, which problems should we try to solve in\nFOSS licenses?</p><p>Here is my answer: the role of FOSS licenses is to undo the damage that\ncopyright, patents, and related intellectual-restriction laws have done\nwhen applied to software.  That is what should be in the scope of our\n<em>licenses</em>.  There are other problems we need to solve too if we truly\ncare about user freedom and human rights, but for those we will need to\ntake a multi-layered approach.</p><p>To understand why this is, let's rewind time.  What is the &quot;original\nsin&quot; that lead to the rise proprietary software, and thus the need to\ndistinguish FOSS as a separate concept and entity?  In my view, it's the\ndecision to make software copyrightable... and then, adding similar\n&quot;state-enforced intellectual restrictions&quot; categories, such as patents\nor anti-jailbreaking or anti-reverse-engineering laws.</p><p>It has been traditional FOSS philosophy to emphasize these as entirely\ndifferent systems, though I think Van Lindberg put it well:</p><p>Even from these brief descriptions, it should be obvious that the term\n&quot;intellectual property&quot; encompasses a number of divergent and even\ncontradictory bodies of law.  [...] intellectual property isn't really\nanalagous to just one program.  Rather, it is more like four (or more)\nprograms all possibly acting concurrently on the same source\nmaterials.  The various IP &quot;programs&quot; all work differently and lead to\ndifferent conclusions.  It is more accurate, in fact, to speak of\n&quot;copyright law&quot; or &quot;patent law&quot; rather than a single overarching &quot;IP\nlaw.&quot;  It is only slightly tongue in cheek to say that there is an\nintellectual property &quot;office suite&quot; running on the &quot;operating system&quot;\nof US law.\n-- Van Lindberg, Intellectual Property and Open Source (p.5)</p><p>So then, as unfortunate as the term &quot;intellectual property&quot; may be, we\ndo have a suite of state-enforced intellectual restriction tools.  They\nnow apply to software... but as a thought experiment, if we could rewind\ntime and choose between a timeline where such laws did not apply to\nsoftware vs a time where they did, which would have a better effect on\nuser freedom?  Which one would most advance FOSS goals?</p><p>To ask the question is to know the answer.  But of course, we cannot\nreverse time, so the purpose of this thought experiment is to indicate\nthe role of FOSS licenses: to use our own powers granted under the scope\nof those licenses to undo their damage.</p><p>Perhaps you'll already agree with this, but you might say, &quot;Well, but we\nhave all these other problems we need to solve too though... since\nsoftware is so important in our society today, trying to solve these\nother problems inside of our licenses, even if they aren't about\nreversing the power of the intellectual-restriction-office-suite, may be\neffective!&quot;</p><p>The first objection to that would be, &quot;well, but it does appear that it\nmakes us addicted in a way to that very suite of laws we are trying to\nundo the damage of.&quot;  But maybe you could shrug that off... these issues\nare too important!  And I agree the issues are important, but again, I\nam arguing a multi-layered approach.</p><p>To better illustrate, let me propose a license.  I actually considered\ndrafting this into real license text and trying to push it all the way\nthrough the license-review process.  I thought that doing so would be an\ninteresting exercise for everyone.  Maybe I still should.  But for now,\nlet me give you the scope of the idea.  Ready?</p><p>&quot;The Disposable Plastic Prevention Public License&quot;.  This is a real\nissue I care about, a lot!  I am very afraid that there is a dramatic\nchance that life on earth will be choked out within the next number of\ndecades by just how much non-degradeable disposable plastic we are\nchurning out.  Thus it seems entirely appropriate to put it in a\nlicense, correct?  Here are some ideas for terms:</p><ul><li><p>You cannot use this license if you are responsible for a significant\nproduction of disposable plastics.</p></li><li><p>You must make a commitment to reduction in your use of disposable\nplastics.  This includes a commitment to reductions set out by (a UN\ncommittee?  Haven't checked, I bet someone has done the research and\nset target goals).</p></li><li><p>If you, or a partner organization, are found to be lobbying against\nlaws to eliminate disposable plastics, your grant of this license is\nterminated.</p></li></ul><p>What do you think?  Should I submit it to license-review?  Maybe I\nshould.  Or, if someone else wants to sumbit it, I'll enthusiastically\nhelp you draft the text... I do think the discussion would be\nilluminating!</p><p>Personally though, I'll admit that something seems wrong about this, and\nit isn't the issue... the issue is one I actually care about <em>a lot</em>,\none that keeps me up at night.  Does it belong in a license?  I don't\nthink that it does.  This both tries to both fix problems via the same\nstructures that we are trying to undo problems with and introduces\nlicense compatibility headaches.  It's trying to fight an important\nissue on the wrong layer.</p><p>It is a FOSS <em>issue</em> though, in an intersectional sense!  And there\nare major things we can do about it.  We can support the fight of the\nright-to-repair movements (which, as it turns out, is a movement also\nhampered by these intellectual restriction laws).  We can try to design\nour software in such a way that it can run on older hardware and keep it\nuseful.  We can support projects like the MNT Reform, which aims to\nbuild a completely user-repairable laptop, and thus push back against\nplanned obsolescence.  There are things we can, and <em>must</em>, do that are\nnot in the license itself.</p><p>I am not saying that the only kind of thing that can happen in a FOSS\nlicense is to simply waive all rights.  Indeed I see copyleft as a valid\nway to turn the weapons of the system against itself in many cases (and\nthere are a lot of cases, especially when I am trying to push standards\nand concepts, where I believe a more lax/permissive approach is better).\nOf course, it is possible to get addicted to those things too: if we\ncould go back in our time machine and prevent these intellectual\nrestrictions laws from taking place, source requirements in copyleft\nlicenses wouldn't be enforceable.  While I see source requirements as a\nvalid way to turn the teeth of the system against itself, in that\nhypothetical future, would I be so addicted to them that I'd prefer that\nsoftware copyright continue just so I could keep them?  No, that seems\nsilly.  But we also aren't in that universe, and are unlikely to enter\nthat universe anytime soon, so I think this is an acceptable reversal of\nthe mechanisms of destructive state-run intellectual restriction machine\nagainst itself for now.  But it also indicates maybe a kind of maxima.</p><p>But it's easy to get fixated on those kinds of things.  How clever can\nwe be in our licenses?  And I'd argue: minimally clever.  Because we\nhave a lot of other fights to make.</p><p>In my view, I see a lot of needs in this world, and the FOSS world has a\nlot of work to do... and not just in licensing, on many layers.\nEncryption for privacy, diversity initiatives like Outreachy, code of\nconducts, software that runs over peer to peer networks rather than in\nthe traditional client-server model, repairable and maintainable\nhardware, thought in terms of the environmental impact of our\nwork... all of these things are critical things in my view.</p><p>But FOSS licenses need not, and should not, try to take on all of them.\nFOSS licenses should do the thing they are appropriate to do: to pave a\npath for collaboration and to undo the damage of the &quot;intellectual\nrestriction office suite&quot;.  As for the other things, we must do them\ntoo... our work will not be done, meaningful, or sufficient if we do not\ntake them on.  But we should do them hand-in-hand, as a multi-layered\napproach.</p>"], ["updated", "2020-03-09 17:07:00"], ["feed_id", 1], ["fetched", "2022-07-10 07:07:43.060469"], ["created_at", "2022-07-10 07:07:43.610148"], ["updated_at", "2022-07-10 07:07:43.610148"]]
D, [2022-07-10T03:07:43.622270 #3248059] DEBUG -- :   TRANSACTION (9.4ms)  commit transaction
D, [2022-07-10T03:07:43.623048 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.2ms)  SELECT "items".* FROM "items" WHERE "items"."guid" = ? LIMIT ?  [["guid", "https://dustycloud.org/blog/terminal-phase-1/"], ["LIMIT", 1]]
[info] ** NEW | Terminal Phase v1.1 and Spritely Goblins v0.6 releases!
[debug] *** dump item_attribs w/ class types:
[debug]   guid: >https://dustycloud.org/blog/terminal-phase-1/< : String
[debug]   title: >Terminal Phase v1.1 and Spritely Goblins v0.6 releases!< : String
[debug]   url: >https://dustycloud.org/blog/terminal-phase-1/< : String
[debug]   updated: >2020-03-05 10:50:00 UTC< : Time
[debug]   published: >< : NilClass
D, [2022-07-10T03:07:43.625041 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:43.626146 #3248059] DEBUG -- :   Pluto::Model::Item Create (0.5ms)  INSERT INTO "items" ("guid", "url", "title", "summary", "updated", "feed_id", "fetched", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [["guid", "https://dustycloud.org/blog/terminal-phase-1/"], ["url", "https://dustycloud.org/blog/terminal-phase-1/"], ["title", "Terminal Phase v1.1 and Spritely Goblins v0.6 releases!"], ["summary", "<p>Hello all!\nI just did a brand new release of both:</p><ul><li><a href=\"https://gitlab.com/dustyweb/terminal-phase/-/tree/v1.1\">Terminal Phase v1.1!</a></li><li><a href=\"https://gitlab.com/spritely/goblins/-/tree/v0.6\">Goblins v0.6!</a></li></ul><p>So some highlights from each.</p><h1>Terminal Phase</h1><p>Okay, this is flashier, even if less important than Goblins.\nBut the main thing is that I added the\n<a href=\"https://dustycloud.org/blog/goblins-time-travel-micropreview/\">time travel debugging</a>\nfeature, which is so flashy I feel the need to show that gif again here:</p><p><img src=\"https://dustycloud.org/gfx/goodies/terminal-phase-goblins-time-travel.gif\" alt=\"Time travel in Spritely Goblins shown through Terminal Phase\" /></p><p>Aside from time travel, there aren't many new features, though I plan\non adding some in the next week (probably powerups or a boss fight),\nso another release should be not far away.</p><p>And oh yeah, since it's a new release, now is a good time to thank the\ncurrent <a href=\"https://www.patreon.com/cwebber\">supporters</a>:</p><p><img src=\"https://dustycloud.org/gfx/goodies/terminal-phase-credits-2020-03-05.gif\" alt=\"Terminal Phase Credits\" /></p><p>But yeah, the main thing that was done here is that Terminal Phase was\nupdated for the new release of\n<a href=\"https://gitlab.com/spritely/goblins\">Goblins</a>, so let's talk about that!</p><h1>Goblins</h1><p>For those who aren't aware, <a href=\"https://gitlab.com/spritely/goblins\">Spritely Goblins</a>\nis a transactional actor model library for <a href=\"https://racket-lang.org/\">Racket</a>.</p><p>v0.6 has resulted in a number of changes in semantics.</p><p>But the big deal is that\n<a href=\"https://docs.racket-lang.org/goblins/\">Goblins finally has decent documentation</a>,\nincluding a fairly <a href=\"https://docs.racket-lang.org/goblins/tutorial.html\">in-depth tutorial</a>\nand <a href=\"https://docs.racket-lang.org/goblins/api.html\">documentation about the API</a>.\nI've even documented how you, in your own programs, can\n<a href=\"https://docs.racket-lang.org/goblins/tutorial.html#%28part._.Time_travel__snapshotting_and_restoring%29\">play with Goblins' time travel features</a>.</p><p>So, does this mean you should start using it?\nWell, it's still in alpha, and the most exciting feature (networked,\ndistributed programming) is still on its way.\nBut I think it's quite nice to use already (and I'm using it for Terminal Phase).</p><p>Anyway, that's about it... I plan on having a new video explaining\nmore about how Goblins works out in the next few days, so I'll\nannounce that when it happens.</p><p>If you are finding this work interesting, a reminder that this work is\npowered by\n<a href=\"https://www.patreon.com/cwebber\">people like you</a>.</p><p>In the meanwhile, hope you enjoy the new releases!</p>"], ["updated", "2020-03-05 10:50:00"], ["feed_id", 1], ["fetched", "2022-07-10 07:07:43.060469"], ["created_at", "2022-07-10 07:07:43.624106"], ["updated_at", "2022-07-10 07:07:43.624106"]]
D, [2022-07-10T03:07:43.636135 #3248059] DEBUG -- :   TRANSACTION (9.5ms)  commit transaction
D, [2022-07-10T03:07:43.637198 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.2ms)  SELECT "items".* FROM "items" WHERE "items"."guid" = ? LIMIT ?  [["guid", "https://dustycloud.org/blog/content-addressed-vocabulary/"], ["LIMIT", 1]]
[info] ** NEW | Content Addressed Vocabulary
[debug] *** dump item_attribs w/ class types:
[debug]   guid: >https://dustycloud.org/blog/content-addressed-vocabulary/< : String
[debug]   title: >Content Addressed Vocabulary< : String
[debug]   url: >https://dustycloud.org/blog/content-addressed-vocabulary/< : String
[debug]   updated: >2020-02-26 19:23:00 UTC< : Time
[debug]   published: >< : NilClass
D, [2022-07-10T03:07:43.639732 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:43.641245 #3248059] DEBUG -- :   Pluto::Model::Item Create (0.6ms)  INSERT INTO "items" ("guid", "url", "title", "summary", "updated", "feed_id", "fetched", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [["guid", "https://dustycloud.org/blog/content-addressed-vocabulary/"], ["url", "https://dustycloud.org/blog/content-addressed-vocabulary/"], ["title", "Content Addressed Vocabulary"], ["summary", "<p>How can systems communicate and share meaning?\nCommunication within systems is preceded by a form of meta-communication;\nwe must have a sense that we mean the same things by the terms we use\nbefore we can even use them.</p><p>This is challenging enough for humans who must share meaning, but we\ncan resolve ambiguities with context clues from a surrounding narrative.\nMachines, in general, need a context more explicitly laid out for them,\nwith as little ambiguity as possible.</p><p>Standards authors of open-world systems have long struggled with such\nsystems and have come up with some reasonable systems; unfortunately\nthese also suffer from several pitfalls.\nWith minimal (or sometimes none at all) adjustment to our tooling,\nI propose a change in how we manage ontologies.</p><h1>How we deal with ambiguous terms today</h1><p>Consider <a href=\"https://www.w3.org/TR/activitystreams-vocabulary/#dfn-note\">Note</a>,\na seemingly simple term in\n<a href=\"https://www.w3.org/TR/activitystreams-vocabulary/\">ActivityStreams</a>,\nthe vocabulary used by <a href=\"https://www.w3.org/TR/activitypub/\">ActivityPub</a>.\nThe meaning of <code>Note</code>, as described by the ActivityStreams vocabulary,\nseems simple enough:\n<code>Represents a short written work typically less than a single paragraph in length.</code></p><p>Here is how an ActivityStreams usage of Note might look (a bit\nsimplified from what it would probably look like in practice):</p><pre><code>  {&quot;@context&quot;: &quot;https://www.w3.org/ns/activitystreams&quot;,\n   &quot;@type&quot;: &quot;Note&quot;,\n   &quot;content&quot;: &quot;Would you read me a bedtime story about the great ontology wars?&quot;}</code></pre><p>What's that <code>@context</code> thing?\nThis is some <a href=\"https://www.w3.org/TR/json-ld/\">JSON-LD</a> thing, which\ntries to be &quot;more exact&quot; about what <code>Note</code> we must be talking about.\nIt does so by mapping <code>Note</code> to <code>https://www.w3.org/ns/activitystreams#Note</code>\nby something like the following:</p><pre><code>  {&quot;as&quot;: &quot;https://www.w3.org/ns/activitystreams#&quot;,\n   &quot;Note&quot;: &quot;as:Note&quot;,\n   &quot;content&quot;: &quot;as:content&quot;,\n   ...}</code></pre><p>The choice to use JSON-LD has been semi-controversial in ActivityPub\nland; historically there was some debate about whether or not we\nneeded to be &quot;more exact&quot; at all as to what terms mean.\nThis post really isn't about JSON-LD as much as it is the more general\ntopic of vocabularies and vocabulary mapping systems.\nThere are other concerns people raise about JSON-LD, usually around\nthe tooling... that's not the scope of this post.\nThis blogpost could as easily apply to XML or Turtle or whatever;\nthe protocol I've worked on just happens to use JSON-LD to do that,\nso I've used it as my illustration.</p><p>That said, the ActivityPub spec tries to make things as simple as\npossible for the default case of ActivityPub usage by saying that the\nActivityStreams context is implied, so that if you're not doing anything\ncomplicated, so:</p><pre><code>  {&quot;@type&quot;: &quot;Note&quot;,\n   &quot;content&quot;: &quot;Would you read me a bedtime story about the great ontology wars?&quot;}</code></pre><p>... is really the same as the first example.</p><p>So okay, probably everyone can guess what <code>Note</code> means, but what about\n<code>sensitive</code>?\nWhat the heck is that?\nIt doesn't appear in the ActivityStreams vocabulary; it kind of\nimplies something along the lines of content-warning type behavior, like\n&quot;this content may be considered sensitive&quot; by some users, but how would\nyou guess that just by the term?\nThis is an <em>extension</em>, and it lives at <code>http://joinmastodon.org/ns#sensitive</code>.</p><p>So maybe if we were going to use it (and if we inline our context) it\nmight look like:</p><pre><code>  {&quot;@context&quot;: {&quot;as&quot;: &quot;https://www.w3.org/ns/activitystreams#&quot;,\n                &quot;toot&quot;: &quot;http://joinmastodon.org/ns#&quot;,\n                &quot;Note&quot;: &quot;as:Note&quot;,\n                &quot;content&quot;: &quot;as:content&quot;,\n                &quot;sensitive&quot;: &quot;toot:sensitive&quot;},\n   &quot;@type&quot;: &quot;Note&quot;,\n   &quot;content&quot;: &quot;Would you read me a bedtime story about the great ontology wars?&quot;,\n   &quot;sensitive&quot;: true}</code></pre><p>(I mean, the Great Ontology Wars are a sensitive topic for some.)</p><p>The choice of JSON-LD in ActivityPub is controversial for various\nreasons.\nBut it turns out what isn't really controversial anymore is whether we\nneed some way of being more exact about the way we speak about terms...\nthose who used to complain about that mostly now agree (disagreements\nthen surround what tooling need to be used to do so (not in scope of this\npost), and namespace governance (in scope of this post)).</p><p>Maybe you feel like, having heard what <code>sensitive</code> and <code>Note</code> mean,\nthese are the obvious definitions.\nBut consider that <code>Note</code> itself could have meant something very\ndifferent.\nAre we talking about a short mostly-textual post (probably on a microblog),\nas ActivityStreams does?\nAre we talking about a musical note?\nAre we instructing someone to take note of something, as an action (or\nyes, activity)?</p><p>So terms really are ambiguous, and in a decentralized but extensible\nsystem with\n<a href=\"https://en.wikipedia.org/wiki/Open-world_assumption\">open world assumptions</a>,\nwe are eventually going to result in conflicts.\nThe choice to map our vocabulary to\n<a href=\"https://en.wikipedia.org/wiki/Uniform_Resource_Identifier\">URIs</a>\nis actually a very reasonable way to reduce ambiguity.\nUnfortunately, the choice to map them to namespaces and to <em>live</em> URIs\n(a-la <code>http(s):</code> URIs), is a mistake that will eventually bite us\n(and doubly so for JSON-LD contexts).</p><h1>Problems appear</h1><p>The first problem with choosing to put our terminology URIs at HTTP(S)\nURIs is that it assumes that those vocabularies will remain alive.\nPerhaps popular ones shall, but really the modern web rots all the time.\nSoon enough, many ontologies will eventually be replaced by Viagra ads.</p><p>The problem is dramatically worse for json-ld contexts (and similar\ndocuments such as XML DTDs): these are the very documents by which we\nmap terms to their fully defined meanings.\nServers get hammered by people looking up contextual mappings.\nThis is no good already.\nIt gets even worse when such documents add (or otherwise amend) their\nterminology mappings; old documents may suddenly mean different things!</p><p>(I'd be remiss to not note here that vocabulary namespaces and json-ld\ncontexts are frequently the same URIs and yet frequently not the same\nthing.\nStill, they share a lot of the same problems and solutions in terms of\nliveness.)</p><p>Furthermore, both the choice to put terms in namespaces and the choice\nto have common contextual URIs that can change creates governance\nproblems.</p><p>I know this from personal experience (and by that I mean many painful\nhours of my life wasted that I can never get back).\nConsider <code>sensitive</code> above.\nThe Mastodon folks created their own namespace, as previously mentioned,\nbut they didn't really <em>want to</em>.\nThe good news was that the\n<a href=\"https://www.w3.org/wiki/SocialCG\">Social Web Community Group</a>\nwas given permission to both extend the ActivityStreams vocabulary and\nthe official ActivityStreams context.</p><p>Despite the entire group agreeing that it made sense to make <code>sensitive</code>\nofficial in some way (which does not mean everyone agreed that it was a\ngood term, just that it was in enough usage that we should make it more\neasily widely available), the SocialCG got tied up for months and months\nin meetings being unable to make progress about <em>how</em> to do so:</p><ul><li>Should we add <code>sensitive</code> to the ActivityStreams namespace, or leave\nit in the old namespace but &quot;officially sanction&quot; it?</li><li>What is the migration path for software using the previous term URI?</li><li>How often should we do this?  What is the governance process for\nincubating a <em>new</em> term?  Should it happen in a separate namespace\nfirst and then get &quot;pulled in&quot; later?</li><li>What would happen if we didn't for terms like these, and the sites\nwent down?</li><li>If we also update the json-ld context, what happens for documents\nthat already had <code>sensitive</code> in them meaning either the old\nURI or a new one?  This can have significant impact on normalization\nfor signature verification.</li></ul><p>The group met for months about all the topics above and came to no\nconclusions.\nEventually we decided that no consensus could be reached, so instead\nno action was taken at all.\nWhat a disappointment.</p><p>In general, this seems to be common.\nIronically, it leads to otherwise nice decentralized designs for\nvocabularies eventually ending up centralized in something like\n<a href=\"https://schema.org/\">schema.org</a> anyway.</p><h1>Content addressed vocabularies (and contexts) are the answer</h1><p>My friend Sandro Hawke offered a solution, which I initially rejected\nas terrible, decided upon further consideration was brilliant, and\nfully embraced.\nThen Sandro explained to me that I had totally misunderstood him,\nand that he meant <a href=\"https://sandhawke.github.io/mov/\">something different</a>.\nIt turns out that I actually think my initial misunderstanding was the\nright answer.</p><p>Here's what I understood Sandro to say:</p><blockquote><p>The name we choose for a term doesn't matter that much.\nWhat really matters is the paragraph or so of specification language\nthat describes the term.\nIf two implementations refer to the same specification text, they\nmean the same thing.\nSo just use that as the description.</p></blockquote><p>Once I (incorrectly) came to realize that this could mean naming via\n<a href=\"https://en.wikipedia.org/wiki/Content-addressable_storage\">content addressing</a>,\nI latched onto the idea.\nOf course!\nWe had merely selected the wrong edge of\n<a href=\"https://en.wikipedia.org/wiki/Zooko%27s_triangle\">Zooko's triangle</a>.\nBut we know how to fix that sort of thing.</p><p>Here's how it works.\nLet's remember the specification text for Note above:\n<code>Represents a short written work typically less than a single paragraph in length.</code>\nLet's hash that (along with a &quot;recommendation&quot; prefix that a user might choose\nto bind this to the term <code>Note</code>, though this is just a recommendation):</p><pre><code>$ echo &quot;Note: Represents a short written work typically less than a single paragraph in length.&quot; | sha256sum\n3e1de3b56d2dc1bee7313963462691f9a8f46b068557b75e0e0d14c0994eddc6</code></pre><p>So if we were defining <code>Note</code> via content-addressing, we instead would\nhave defined it as\n<code>urn:sha256:3e1de3b56d2dc1bee7313963462691f9a8f46b068557b75e0e0d14c0994eddc6</code>.\nThis is unambiguous enough to avoid collisions with other uses of the\nword &quot;Note&quot;.\nBut note that it doesn't require any servers staying up.\nIt also doesn't have any namespace governance quagmire, because there\nis no namespace.\nUpdates can be handled the usual way, via errata (translations can be\nhandled similarly), and standards organizations can still publish such\nthings... but it is important that the original term remain content-addressed\nand immutable.\n(Hash migration is left as an exercise for the user, with a hint that\nthe solution is similar to that with errata.)</p><p>Anyway, our post might end up looking in the end like this instead:</p><pre><code>  {&quot;@context&quot;: {&quot;Note&quot;: &quot;urn:sha256:3e1de3b56d2dc1bee7313963462691f9a8f46b068557b75e0e0d14c0994eddc6&quot;,\n                &quot;content&quot;: &quot;urn:sha256:57dc44a1cdcbb7aa976a65a858b4d349ad6110d58d9d546650ce2b0e2b1048e4&quot;,\n                &quot;sensitive&quot;: &quot;urn:sha256:81d98cf83fcf733400ad5d2a25495feeea47f287193a53a9722f4cb025da88f1&quot;},\n   &quot;@type&quot;: &quot;Note&quot;,\n   &quot;content&quot;: &quot;Would you read me a bedtime story about the great ontology wars?&quot;,\n   &quot;sensitive&quot;: true}</code></pre><p>I'll note very briefly that content-addressing is also the answer for\nJSON-LD contexts.\nIf something like <a href=\"https://datashards.net/\">Datashards</a> or\n<a href=\"https://ipfs.io/\">IPFS</a> were used to host json-ld contexts, each post\ncould link to the exact immutable content-addressed context it was\nintended to be used with.\nServers that use such contexts can &quot;pin&quot; them to keep them available,\navoiding a single point of failure (or bandwidth bottleneck).</p><pre><code>  {&quot;@context&quot;: &quot;idsc:p0.JLnUcJN4R1KNvSXm9Ut3Tmg7WfXAKEOx47p01Pk_Htw.2_rCdtnEha1RpD_qyzxhFIjUvLj7crIbzpmzWei5xRk&quot;,\n   &quot;@type&quot;: &quot;Note&quot;,\n   &quot;content&quot;: &quot;Would you read me a bedtime story about the great ontology wars?&quot;,\n   &quot;sensitive&quot;: true}</code></pre><p>As one other side-note, I'll also observe that even though the fully\nexpanded version of the above message is:</p><pre><code>  {&quot;@type&quot;: &quot;urn:sha256:3e1de3b56d2dc1bee7313963462691f9a8f46b068557b75e0e0d14c0994eddc6&quot;,\n   &quot;urn:sha256:57dc44a1cdcbb7aa976a65a858b4d349ad6110d58d9d546650ce2b0e2b1048e4&quot;: &quot;Would you read me a bedtime story about the great ontology wars?&quot;,\n   &quot;urn:sha256:81d98cf83fcf733400ad5d2a25495feeea47f287193a53a9722f4cb025da88f1&quot;: true}</code></pre><p>... we never needed to look at it that way because json-ld contexts\n(and systems like them) are actually\n<a href=\"https://github.com/cwebber/rebooting-the-web-of-trust-spring2018/blob/petnames/draft-documents/petnames.md\">petname systems</a>.</p><h1>Conclusions (and non-conclusions)</h1><p>Let me clarify a claim I'm not making: we don't need to throw away the\nold terms for systems like ActivityStreams that are already well\nunderstood.\nHowever, going forward I do think that using content-addressing of new\nterms is a good idea.\nAnd in the long run, I think content-addressing of json-ld contexts\nand any documents like them is an absolute must (when they aren't\ninlined, anyway... but inlining is expensive).</p><p>If we adopted Content Addressed Vocabularies, working on vocabulary\nextensions to ActivityPub could be a different story.\nImagine a git repository that communities can fork to work on new terms.\nWe could have a <code>drafts</code> directory where people hammer out common\nextension terms, and when they're ready, we simply move them to the\n<code>extensions</code> directory.\nSince the names are merely hashes of the contents of that directory,\nstatically generating a webpage that lists all current known and\nrecommended extensions would be trivial.\nEverything could be handled in issues and PRs, and even if terms\naren't merged into the main repo, that's merely a matter of lower\nterm discoverability rather than a hinderance of application itself.</p><p>If we moved to content addressed vocabulary, we'd be more free from\nthe perils of downtime and general web bitrot, freer from gatekeeping\nand governance challenges, but just as free (I'd argue even freer) to\ncollaborate.\nMoving forward, I intend to ake content addressed approaches to terms\nI define in my systems, and I encourage you to do the same.</p>"], ["updated", "2020-02-26 19:23:00"], ["feed_id", 1], ["fetched", "2022-07-10 07:07:43.060469"], ["created_at", "2022-07-10 07:07:43.638683"], ["updated_at", "2022-07-10 07:07:43.638683"]]
D, [2022-07-10T03:07:43.800020 #3248059] DEBUG -- :   TRANSACTION (155.8ms)  commit transaction
D, [2022-07-10T03:07:43.801069 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.3ms)  SELECT "items".* FROM "items" WHERE "items"."guid" = ? LIMIT ?  [["guid", "https://dustycloud.org/blog/vats-and-propagators/"], ["LIMIT", 1]]
[info] ** NEW | Vats and Propagators: towards a global brain
[debug] *** dump item_attribs w/ class types:
[debug]   guid: >https://dustycloud.org/blog/vats-and-propagators/< : String
[debug]   title: >Vats and Propagators: towards a global brain< : String
[debug]   url: >https://dustycloud.org/blog/vats-and-propagators/< : String
[debug]   updated: >2020-02-16 15:25:00 UTC< : Time
[debug]   published: >< : NilClass
D, [2022-07-10T03:07:43.803971 #3248059] DEBUG -- :   TRANSACTION (0.2ms)  begin transaction
D, [2022-07-10T03:07:43.805790 #3248059] DEBUG -- :   Pluto::Model::Item Create (0.6ms)  INSERT INTO "items" ("guid", "url", "title", "summary", "updated", "feed_id", "fetched", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [["guid", "https://dustycloud.org/blog/vats-and-propagators/"], ["url", "https://dustycloud.org/blog/vats-and-propagators/"], ["title", "Vats and Propagators: towards a global brain"], ["summary", "<p>(This is a writeup for future exploration; I will be exploring a small\namount of this soon as a side effect of some UI building I am doing,\nbut not a full system.  A full system will come later, maybe even by\nyears.  Consider this a desiderata document.  Also a forewarning that\nthis document was originally written for an ocap-oriented audience,\nand some terms are left unexpanded; for instance, &quot;vat&quot; really just\nmeans a one-turn-at-a-time single-threaded event loop that a bunch of\nactors live in.)</p><p>We have been living the last couple of decades with networks that are\ncapable of communicating ideas.  However, by and large it is left to the\nhumans to reason about these ideas that are propagated.  Most machines\nthat operate on the network merely execute the will of humans that have\ncarefully constructed them.  Recently neural network based machine\nlearning has gotten much better, but merely resembles intuition, not\nreasoning.  (The human brain succeeds by combining both, and a\nsuccessful system likely will too.)  Could we ever achieve a network\nthat itself reasons?  And can it be secure enough not to tear itself\napart?</p><h1>Near-term background</h1><p>In working towards building out a demonstration of petname systems in\naction in a social network, I ran into the issue of changes to a petname\ndatabase automatically being reflected through the UI.  This lead me\nback down a rabbit hole of exploring reactive UI patterns, and also lead\nme back to exploring that section, and the following propagator section,\nof SICP again.  This also lead me to rewatch one of my favorite talks:\n<a href=\"https://www.youtube.com/watch?v=Rk76BurH384\">We Don't Really Know How to Compute!</a>\nby Gerald Sussman.</p><p><a href=\"https://youtu.be/Rk76BurH384?t=1494\">At 24:54</a> Sussman sets up an\nexample problem: specifically, an expert in electrical systems having\na sense of how to be able to handle and solve an electrical wiring\ndiagram.  (The kind of steps explained are not dissimilar to the kind\nof steps that programmers go through while reasoning about debugging a\ncoding problem.)  Sussman then launches into an exploration of\npropagators, and how they can solve the problem.  Sussman's\nexplanation is better than mine would be, so I'll leave you to watch\nthe video to see how it's used to solve various problems.</p><h1>Okay, a short explanation of propagators</h1><p>Well, I guess I'll give a little introduction to propagators and why I\nthink they're interesting.</p><p>Propagators have gone through some revisions since the <a href=\"https://sarabander.github.io/sicp/html/3_002e3.xhtml#g_t3_002e3_002e5\">SICP days</a>;\nrelevant reading are the\n<a href=\"https://groups.csail.mit.edu/mac/users/gjs/propagators/revised-html.html\">Revised Report on the Propagator Model</a>,\n<a href=\"https://dspace.mit.edu/handle/1721.1/44215\">The Art of the Propagator</a>,\nand to really get into depth with the ideas,\n<a href=\"https://dspace.mit.edu/handle/1721.1/54635\">Propagation networks: a flexible and expressive substrate for computation</a>\n(Radul's PhD thesis).</p><p>In summary, a propagator model has the following properties:</p><ul><li>There are cells with accumulate information about a value.  <strong>Note!\nThis is a big change from previous propagator versions!</strong> In the modern\nversion of a propagator model, a cell doesn't hold a value, it accrues\ninformation about a value which must be non-contradictory.</li><li>Such cell information may be complete (the number 42 is all there is\nto know), whereas some other information may be a range of\npossibilities (hm, could be anywhere between -5 to 45...).  As more\ninformation is made available, we can &quot;narrow down&quot; what we know.</li><li>Cells are connected together with propagators.</li><li>Information is (usually) bidirectional.  For example, with the slope\nformula of y = (m * x) + b, we don't need to just solve for y... we\ncould solve for m, x, or b given the other information.  Similarly,\npartial information can propagate.</li><li>Contradictions are not allowed.  Attempting to introduce\ncontradictory information into the network will throw an exception.</li><li>We can &quot;play with&quot; different ideas via a Truth Maintenance System.\nWhat do we believe?  Changes in our beliefs can result in changes\nto the generated topology of the network.</li><li>Debugging is quite possible.  One of the goals of propagator networks\nis that you should be able to investigate and determine blame for a\nresult.  Relationships are clear and well defined.  As Sussman says\n(roughly paraphrased), &quot;if an autonomous car drives off the car of\nthe road, I could sue the car manufacturer, but I'd rather sue the\ncar... I want to hold it accountable for its decision making&quot;.  The\nability to hold accountability and determine blame stands in contrast\nto squishier systems like neural nets, genetic programs, etc (which\nare still useful, but not as easy to interrogate).</li></ul><p>There are a lot of things that can be built with propagators as the\ngeneral case of constraint solving and reasoning; functional reactive\nUIs, type checkers, etc etc.</p><h1>Bridging vats and propagators</h1><p>The prototype implementations are written in Scheme.  The good news is,\nthis means we could implement propagators on top of something like\n<a href=\"https://gitlab.com/spritely/goblins\">Spritely Goblins</a>.</p><p>However (and, granted, I haven't completed it) I think there is one\nthing that is inaccurately described in Radul's thesis and Sussman's\nexplanations, but which I think actually is no problem at all if we\napply the vat model of computation (as in E, Agoric, Goblins): how\ndistributed can these cells and propagators be?  Section 2.1 of Radul's\nthesis explains propagators as asynchronous and completely autonomous,\nas if cells and their propagators could live anywhere on the computer\nnetwork with no change in effectiveness.  I think this is only partially\ntrue.  The reference implementation actually does not fully explore this\nbecause it uses a single-threaded event loop that processes events until\nthere are no more to process, during which it may encounter a\ncontradiction and raise it.  However I believe that the ability to &quot;stop\nthe presses&quot; as it were is one of the nicest features of propagators and\nactually should not be lost... if we introduced asynchronous events\ncoming in, there may be multiple events that come in at the same time\nand which try making changes to the propagator network in parallel.\nThankfully a nice answer comes in form of a the vat model: it should be\npossible to have a propagator network within a single vat.\n<a href=\"https://dustycloud.org/blog/goblins-time-travel-micropreview/\">Spritely Goblins' implementation of the vat model is transactional</a>,\nso this means that if we try to introduce a contradiction, we could\nroll back immediately.  This is the right behavior.  As it turns out,\nthis is very close to the propagator system in the way it's\nimplemented in the reference implementation... I think the reference\nimplementation did something more or less right while trying to do the\nsimplest thing.  Combined with a proper ocap vat model this should\nwork great.</p><p>Thus, I believe that a propagator system (here I mean a propagator\nnetwork, meaning a network of propagator-connected cells) should\nactually be vat-local.  But wait, we talked about network (as in\ninternet) based reasoning, and here I am advocating locality!  What\ngives?</p><p>The right answer seems to me that propagator networks should be able to\nbe hooked together, but a change to a vat-contained propagator system\ncan trigger message passing to another vat-contained propagator system,\nwhich can even happen over a computer network such as the internet.  We\nwill have to treat propagator systems and changes to them as vat-local,\nbut they can still communicate with other propagator systems.  (This is a\ngood idea anyway; if you communicate an idea with me and it's\ninconsistent with my worldview, it should be important for me to be able\nto realize that and use that as an opportunity to correct our\nmisunderstandings between each other.)</p><p>However, cells are still objects with classic object references.  This\nmeans it is possible to hold onto one and use it as either a local or\nnetworked capability.  Attenuation also composes nicely; it should be\npossible to produce a facet of a cell that only allows read access or\nonly allows adding information.  It's clear and easily demonstrated that\nocaps can be the right security model for the propagator model simply by\nrealizing that both the propagator prototype system is written in\nscheme, and so is\n<a href=\"http://mumble.net/~jar/pubs/secureos/secureos.html\">Jonathan Rees' W7 security kernel</a>.</p><p>This is all to say, if we built the propagator model <em>on top of</em>\nan ocap-powered vat model, we'd already have a good network\ncommunication model, a good security model, and a transactional model.\nSounds great to me.</p><p>Best of all, a propagator system can live alongside normal actors.  We\ndon't have to choose one or the other... a multi-paradigm approach can\nwork great.</p><h1>Speaking the same language</h1><p>One of the most important things in a system that communicates is that\nideas should be able to be expressed and considered in such a way that\nboth parties understand.  Of course, humans do this, and we call it\n&quot;language&quot;.</p><p>Certain primitives exist in our system already; for optimization\nreasons, we are unlikely to want to build numbers out of mere tallying\nof numbers (such as in Peano arithmetic); we instead build in primitives\nfor integers and a means of combination for them.  So we will of course\nwant to have several primitive data types.</p><p>But at some point we will want to talk about concepts that are not\nencoded in the system.  If I would like to tell you about a beautiful\nred bird I saw, where would I even begin?  Well obviously at minimum, we\nwill have to have ways of communicating ideas such as &quot;red&quot; and &quot;bird&quot;.\nWe will have to build a vocabulary together.</p><p>Natural language vocabulary has a way of becoming ambiguous fast.  A\n&quot;note&quot; passed in class versus a &quot;note&quot; in a musical score versus that I\nwould like to &quot;note&quot; a topic of interest to you are all different things.</p><p>Linked data (formerly &quot;semantic web&quot;) folks have tried to use full URIs\nas a way to get around this problem.  For instance, two ActivityPub\nservers which are communicating are very likely speaking about the same\nthing if they both use &quot;https://www.w3.org/ns/activitystreams#Note&quot;,\nwhich is to say they are talking about some written note-like message\n(probably a (micro)blog post).  This is not a guarantee; vocabulary\ndrift is still possible, but it is much less likely.</p><p>Unfortunately, http(s) based URIs are a poor choice for hosting\nvocabulary.  Domains expire, websites go down, and choosing whether to\nextend a vocabulary in some namespace is (in the author's experience) a\ngovernance nightmare.  A better option is &quot;content-addressed\nvocabulary&quot;; instead of &quot;https://www.w3.org/ns/activitystreams#Note&quot;\nwe could instead simply take the text from the standard:</p><p>&quot;Represents a short written work typically less than a single\nparagraph in length.&quot;</p><p>Hash that and you get\n&quot;urn:sha256:54c14cbd844dc9ae3fa5f5f7b8c1255ee32f55b8afaba88ce983a489155ac398&quot;.\nNo governance or liveness issues required.  (Hashing mechanism upgrades,\nhowever, do pose some challenge; mapping old hashes to new ones for\nequivalence can be a partial solution.)</p><p>This seems sufficient to me; groups can collaborate somewhere to hammer\nout the definition of some term, simply hash the definition of it, and\nuse that as the terminology URI.  This also avoids hazards from choosing\na different edge of Zooko's Triangle for vocabulary.</p><p>Now that we have this, we can express advanced new ideas across the\nnetwork and experiment with new terms.  Better yet, we might be even\nable to use our propagator networks to associate ideas with them.  I\nthink in many systems, content-addressed-vocabulary could be a good way\nto describe beliefs that could be considered, accepted, rejected in\ntruth maintenance systems.</p><h1>Cerealize me, cap'n!</h1><p>One observation from Agoric is that it is possible to treat systems that\ndo not resemble traditional live actor'y vats still as vats (and\n&quot;machines&quot;) and develop semantics for message passing between them (and\nperforming promise resolution) nonetheless, for instance blockchains.</p><p>Similarly, above we have observed that propagator systems can be built\non top of actors; I believe it is also possible to describe propagator\nnetworks in terms of pure data.  It should be possible to describe\nchanges to a propagator network as a standard serialized ledger that can\nbe transferred from place to place or reproduced.</p><p>However, the fact that interoperability with actors is possible is good,\ndesirable, and thankfully a nice transitional place for experimentation\n(porting propagator model semantics to Spritely Goblins should not be\nhard).</p><h1>Where to from here?</h1><p>That's a lot of ideas above, but how likely is any of this stuff to be\nusable soon?  I'm not anticipating dropping any current work to try to\nmake this happen, but I probably will be experimenting in my upcoming UI\nwork to try to have the UI powered by a propagator system (possibly even\na stripped down version) so that the experimental seeds are in place to\nsee if such a system can be grown.  But I am not anticipating that we'll\nsee anything like a fully distributed propagator system doing something\ninteresting from my own network soon... but sometimes I end up\nsurprised.</p><h1>Closing the loop</h1><p>I mentioned before that human brains are a combination of faster\nintuitive methods (resembling current work on neural nets) and slower,\nmore calculating reasoning systems (resembling propagators or some logic\nprogramming languages).  That's also to say nothing about the giant\nemotional soup that a mind/body tends to live in.</p><p>Realistically the emergence of a fully sapient system won't involve any\nof these systems independently, but rather a networked interconnection\nof many of them.  I think the vat model of execution is a nice glue\nsystem for it; pulling propagators into the system could bring us one\nstep closer, maybe.</p><p>Or maybe it's all just fantastical dreaming!  Who knows.  But it could\nbe interesting to play and find out at some point... perhaps some day we\ncan indeed get a proper brain into a vat.</p>"], ["updated", "2020-02-16 15:25:00"], ["feed_id", 1], ["fetched", "2022-07-10 07:07:43.060469"], ["created_at", "2022-07-10 07:07:43.802769"], ["updated_at", "2022-07-10 07:07:43.802769"]]
D, [2022-07-10T03:07:43.889831 #3248059] DEBUG -- :   TRANSACTION (83.3ms)  commit transaction
D, [2022-07-10T03:07:43.890873 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.3ms)  SELECT "items".* FROM "items" WHERE "items"."guid" = ? LIMIT ?  [["guid", "https://dustycloud.org/blog/state-of-spritely-2020-02/"], ["LIMIT", 1]]
[info] ** NEW | State of Spritely for February 2020
[debug] *** dump item_attribs w/ class types:
[debug]   guid: >https://dustycloud.org/blog/state-of-spritely-2020-02/< : String
[debug]   title: >State of Spritely for February 2020< : String
[debug]   url: >https://dustycloud.org/blog/state-of-spritely-2020-02/< : String
[debug]   updated: >2020-02-10 15:30:00 UTC< : Time
[debug]   published: >< : NilClass
D, [2022-07-10T03:07:43.893194 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:43.894686 #3248059] DEBUG -- :   Pluto::Model::Item Create (0.6ms)  INSERT INTO "items" ("guid", "url", "title", "summary", "updated", "feed_id", "fetched", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [["guid", "https://dustycloud.org/blog/state-of-spritely-2020-02/"], ["url", "https://dustycloud.org/blog/state-of-spritely-2020-02/"], ["title", "State of Spritely for February 2020"], ["summary", "<p>We are now approximately 50% of the way through the\n<a href=\"/blog/samsung-stack-zero-grant/\">Samsung Stack Zero grant</a> for Spritely,\nand only a few months more since I\n<a href=\"https://dustycloud.org/blog/spritely/\">announced the Spritely project</a>\nat all.\nI thought this would be a good opportunity to review what has happened\nso far and what's on the way.</p><p>In my view, quite a lot has happened over the course of the last year:</p><ul><li><p><a href=\"https://datashards.net/\">Datashards</a> grew out of two Spritely\nprojects, <a href=\"https://gitlab.com/dustyweb/magenc/blob/master/magenc/scribblings/intro.org\">Magenc</a>\nand <a href=\"https://gitlab.com/spritely/crystal/blob/master/crystal/scribblings/intro.org\">Crystal</a>.\nThis provides the &quot;secure storage layer&quot; for the system, and by\nmoving into Datashards has even become its own project (now mostly\nunder the maintainership of Serge Wroclawski, who as it turns out is\nalso co-host with me of <a href=\"https://librelounge.org/\">Libre Lounge</a>.\nThere's external interest in this from the rest of the federated\nsocial web, and it was a topic of discussion in\n<a href=\"https://socialhub.activitypub.rocks/t/2-8-socialcg-telecon/507\">the last meeting</a>\nof the <a href=\"https://www.w3.org/wiki/SocialCG\">SocialCG</a>.\nWhile not as publicly visible recently, the project is indeed\nactive; I am currently helping advise and assist Serge with some of\nthe ongoing work on optimizations for smaller files, fixing the\nmanifest format to permit larger files, and a more robust HTTP API\nfor stores/registries.\n(Thank you Serge also for taking on a large portion of this work\nand responsibility!)</p></li><li><p><a href=\"https://gitlab.com/spritely/goblins\">Spritely Goblins</a>, the actor\nmodel layer of Spritely, continues its development.\nWe are now up to release <a href=\"https://gitlab.com/spritely/goblins/commit/9deede936e97ae7eeaa614e05071e7bd2de446c0\">v0.5</a>.\nI don't consider the API to be stable, but it is stabilizing.\nIn particular, the object/update model, the synchronous\ncommunication layer, and the transactional update support are\nall very close to stable.\nAsynchronous programming mostly works but has a few bugs I need\nto work out, and the distributed programming environment design\nis coming together enough where I expect to be able to demo it soon.</p></li><li><p>In addition, I have finally started to\n<a href=\"https://dustycloud.org/tmp/goblins-draft.html\">write docs for Spritely Goblins</a>.\nI think the tutorial above is fairly nice, and I've had a good amount\nof review from various parties, and those who have tried it seem to think\nit is fairly nice.\n(Please be advised that it requires working with the\n<a href=\"https://gitlab.com/spritely/goblins/-/tree/dev\">dev branch of Goblins</a>\nat the time of writing.)\nv0.6 should the first release to have documentation after the major\noverhaul I did last summer (effectively an entire rewrite of the system,\nincluding many changes to the design after doing\n<a href=\"http://www.erights.org/talks/thesis/\">research into ocap practices</a>).\nI cannot recommend that anyone else write production-level code using the\nsystem yet, but I hope that by the summer things will have congealed\nenough that this will change.</p></li><li><p>I have made a couple of publicly visible demos of Goblins' design.\nWeirdly enough all of these have involved ascii art.</p><ul><li><p>The proto-version was the\n<a href=\"http://dustycloud.org/blog/lets-just-be-weird-together/\">Let's Just Be Weird Together</a>\ndemo.\nActually it's a bit strange to say this because the LJBWT demo didn't\nuse Goblins, it used a library called <a href=\"https://gitlab.com/dustyweb/dos-hurd\">DOS/HURD</a>.\nHowever, writing this library (and adapting it from <a href=\"https://docs.racket-lang.org/dos/win.html\">DOS/Win</a>)\ndirectly informed the\n<a href=\"https://gitlab.com/spritely/goblinoid\">rewrite of Goblins, Goblinoid</a>\nwhich eventually became Goblins itself, replacing all the old code.\nThis is why I advocate demo-driven-development: the right design\nof an architecture flows out of a demo of it.\n(Oh yeah, and uh, it also allowed me to make a present for my 10th wedding\nanniversary, too.)</p></li><li><p>Continuing in a similar vein, I made the\n<a href=\"https://dustycloud.org/blog/conservancy-card/\">&quot;Season's Greetings&quot; postcard</a>,\nwhich <a href=\"https://sfconservancy.org/\">Software Freedom Conservancy</a>\nactually used in their funding campaign this year.\nThis snowy scene used the new rewrite of Goblins and allowed me\nto try to push the new &quot;become&quot; feature of Goblins to its limit\n(the third principle of <a href=\"https://en.wikipedia.org/wiki/Actor_model#Fundamental_concepts\">actor model semantics</a>,\ntaken very literally).\nIt wasn't really obvious to anyone else that this was using Goblins\nin any interesting way, but I'll say that writing this really allowed\nme to congeal many things about the update layer and it also lead to\nuncovering a performance problem, leading to a 10x speedup.\nHaving written this demo, I was starting to get the hang of\nthings in the Goblins synchronous layer.</p></li><li><p>Finally there was the\n<a href=\"https://gitlab.com/dustyweb/terminal-phase\">Terminal Phase demo</a>.\n(See the <a href=\"/blog/terminal-phase-prototype/\">prototype announcement blogpost</a> and\nthe <a href=\"/blog/terminal-phase-1.0/\">1.0 announcement</a>.)\nThis was originally designed as a\n<a href=\"https://www.patreon.com/posts/terminal-phase-31308473\">reward for donors for hitting $500/mo</a>\non\n<a href=\"https://www.patreon.com/cwebber\">my Patreon account</a>\n(you can still\n<a href=\"https://dustycloud.org/gfx/goodies/terminal-phase-credits-2020-01-19.gif\">show up in the credits</a>\nby donating!),\nthough once 1.0 made it out the door it seems like it raised considerable\nexcitement\n<a href=\"https://www.reddit.com/r/linux/comments/erh851/i_made_a_space_shooter_that_runs_in_your_terminal/\">on the r/linux subreddit</a>\nand\n<a href=\"https://news.ycombinator.com/item?id=22095092\">on Hacker News</a>,\nwhich was nice to see.\nTerminal Phase helped me finish testing and gaining confidence in the\ntransactional object-update and synchronous call semantics of Spritely Goblins,\nand I now have no doubt that this layer has a good design.\nBut I think Terminal Phase was the first time that <em>other people</em> could\nsee why Spritely Goblins was exciting, especially once I showed off the\n<a href=\"https://dustycloud.org/blog/goblins-time-travel-micropreview/\">time travel debugging in Terminal Phase demo</a>.\nThat last post lead people to finally start pinging me asking\n&quot;when can I use Spritely Goblins&quot;?\nThat's good... I'm glad it's obvious now that Goblins is doing something\ninteresting (though the most interesting things are yet to be demo'ed).</p></li></ul></li><li><p>I participated in, keynoted, and drummed up enthusiasm for\n<a href=\"/blog/activitypub-conf-2019/\">ActivityPub Conference 2019</a>.\n(I didn't organize though, that was\n<a href=\"https://mlemmer.org\">Morgan Lemmer-Webber</a>'s doing,\nalongside <a href=\"https://mastodon.social/@sl007\">Sebastian Lasse</a> and with\n<a href=\"https://mastodon.social/@chillicampari\">DeeAnn Little</a> organizing the\nvideo recording.)\nWe had a great <a href=\"http://dustycloud.org/blog/activitypub-conf-2019-speakers/\">speaker list</a>\nand even got <a href=\"http://dustycloud.org/blog/mark-miller-at-apconf-2019/\">Mark S. Miller to keynote</a>.\n<a href=\"https://conf.tube/video-channels/apconf_channel/videos\">Videos of the event</a>\nare also available.\nWhile that event was obviously much bigger than Spritely, the engagement\nof the ActivityPub community is obviously important for its success.</p></li><li><p>Relatedly, I continue to co-chair <a href=\"https://www.w3.org/wiki/SocialCG\">the SocialCG</a>\nbut <a href=\"https://cybre.space/@nightpool\">Nightpool</a> has joined as co-chair\nwhich should relieve some pressure there, as I was a bit too overloaded\nto be able to handle this all on my own.\nThe addition of the <a href=\"https://socialhub.activitypub.rocks/\">SocialHub community forum</a>\nhas also allowed the ActivityPub community to be able to coordinate in a way\nthat does not rely on me being a blocker.\nAgain, not Spritely related directly, but the health of the\nActivityPub community is important to Spritely's success.</p></li><li><p>At Rebooting Web of Trust I coordinated with a number of contributors\n(including Mark Miller) on sketching out plans for\n<a href=\"https://github.com/cwebber/rwot9-prague/blob/secure-uis/draft-documents/secure-user-interfaces.md\">secure UI designs</a>.\nSadly the paper is incomplete but has given me the framework for\nunderstanding the necessary UI components for when we get to the\nsocial network layer of Spritely.</p></li><li><p>Further along the lines of sketching out the desiderata of\nfederated social networks, I have written a nearly-complete\n<a href=\"https://gitlab.com/spritely/ocappub/blob/master/README.org\">OcapPub: towards networks of consent</a>.\nHowever, there are still some details to be figured out; I have\nbeen hammering them out on the <a href=\"https://groups.google.com/forum/#!forum/cap-talk\">cap-talk mailing list</a>\n(see <a href=\"https://groups.google.com/forum/#!topic/cap-talk/icey8aO5ABo\">this post laying out a very ocappub-like design</a>\nwith some known problems, and then\n<a href=\"https://groups.google.com/d/msg/cap-talk/5Q8BM3aW0Gw/lHzTgXaQAgAJ\">this analysis</a>).\nThe ocap community has thankfully been very willing to participate\nin working with me to hammer out the right security foundations,\nand I think we're close to the right design details.\nOf course, the proof of the pudding is in the demo, which has yet\nto be written.</p></li></ul><p>Okay, so I hope I've convinced you that a lot has happened, and\nhopefully you feel that I am using my time reasonably well.\nBut there is much, much, much ahead for Spritely to succeed in its goals.\nSo, what's next?</p><ul><li><p>I need to finish cleaning up the Goblins documentation and do a\nv0.6 release with it included.\nAt that point I can start recommending some brave souls to use it for\nsome simple applications.</p></li><li><p>A demo of Spritely Goblins working in a primarily asynchronous\nenvironment.\nThis might simply be a port of <a href=\"https://notabug.org/cwebber/mudsync/\">mudsync</a>\nas a first step.\n(<a href=\"https://archive.org/details/feb_2017-live_network_coding_8sync\">Recorded demo of mudsync</a>\nfrom a few years ago.)\nI'm not actually sure.\nThe goal of this isn't to be the &quot;right&quot; social network design (not\nfull OcapPub), just to test the async behaviors of Spritely Goblins.\nLike the synchronous demos that have already been done, the purpose of\nthis is to congeal and ensure the quality of the async primitives.\nI expect this and the previous bullet point to be done within the next\ncouple of months, so hopefully by the end of April.</p></li><li><p>Distributed networked programming in Goblins, and associated demo.\nMay expand on the previous demo.\nProbably will come out about two months later, so end of June.</p></li><li><p>Prototype of the secure UI concepts from the forementioned secure\nUIs paper.\nI expect/hope this to be usable by end of third quarter 2020.</p></li><li><p>Somewhere in-between all this, I'd like to add a demo of being able\nto securely run untrusted code from third parties, maybe in the MUD\ndemo.\nNot sure when yet.</p></li><li><p>All along, I continue to expect to push out new updates to Terminal\nPhase with more fun enemies and powerups to continue to reward donors\nto the <a href=\"https://www.patreon.com/cwebber\">Patreon campaign</a>.</p></li></ul><p>This will probably take most of this year.\nWhat you will notice is that this does not explicitly state a tie-in\nwith the ActivityPub network.\nThis is intentional, because the main goal of all the above demos are to\nprove more foundational concepts before they are all fully integrated.\nI think we'll see the full integration and it coming together with the\nexisting fediverse beginning in early 2021.</p><p>Anyway, that's a lot of stuff ahead.\nI haven't even mentioned my involvement in\n<a href=\"https://librelounge.org/\">Libre Lounge</a>, which I've been on hiatus\nfrom due to a health issue that has made recording difficult, and from\nbeing busy trying to deliver on these foundations, but I expect to be\ncoming back to LL shortly.</p><p>I hope I have instilled you with some confidence that I am moving\nsteadily along the abstract Spritely roadmap.\n(Gosh, I ought to finally put together a website for Spritely, huh?)\nThings are happening, and interesting ones I think.</p><p>But how do you think things are going?\nMaybe you would like to leave me feedback.\nIf so, feel free to <a href=\"/contact/\">reach out</a>.</p><p>Until next time...</p>"], ["updated", "2020-02-10 15:30:00"], ["feed_id", 1], ["fetched", "2022-07-10 07:07:43.060469"], ["created_at", "2022-07-10 07:07:43.892192"], ["updated_at", "2022-07-10 07:07:43.892192"]]
D, [2022-07-10T03:07:43.905023 #3248059] DEBUG -- :   TRANSACTION (9.6ms)  commit transaction
D, [2022-07-10T03:07:43.908310 #3248059] DEBUG -- :   Pluto::Model::Item Exists? (0.5ms)  SELECT 1 AS one FROM "items" WHERE "items"."feed_id" = ? AND "items"."published" IS NOT NULL AND (published > NULL) AND "items"."guid" NOT IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) LIMIT ?  [["feed_id", 1], ["guid", "https://dustycloud.org/blog/guile-steel-proposal/"], ["guid", "https://dustycloud.org/blog/site-converted-to-haunt/"], ["guid", "https://dustycloud.org/blog/nonbinary-trans-femme/"], ["guid", "https://dustycloud.org/blog/what-is-a-blockchain-really/"], ["guid", "https://dustycloud.org/blog/hurt-and-hopes/"], ["guid", "https://dustycloud.org/blog/vote-for-amy-guy/"], ["guid", "https://dustycloud.org/blog/identity-is-a-katamari/"], ["guid", "https://dustycloud.org/blog/spritely-website-apconf-videos/"], ["guid", "https://dustycloud.org/blog/spritely-goblins-v0/"], ["guid", "https://dustycloud.org/blog/if-you-cant-tell-people-anything/"], ["guid", "https://dustycloud.org/blog/terminal-phase-in-linux-magazine-pl/"], ["guid", "https://dustycloud.org/blog/announcing-foss-and-crafts/"], ["guid", "https://dustycloud.org/blog/mid-2020-updates/"], ["guid", "https://dustycloud.org/blog/departing-libre-lounge/"], ["guid", "https://dustycloud.org/blog/spritely-nlnet-grant/"], ["guid", "https://dustycloud.org/blog/what-should-fit-in-a-foss-license/"], ["guid", "https://dustycloud.org/blog/terminal-phase-1/"], ["guid", "https://dustycloud.org/blog/content-addressed-vocabulary/"], ["guid", "https://dustycloud.org/blog/vats-and-propagators/"], ["guid", "https://dustycloud.org/blog/state-of-spritely-2020-02/"], ["LIMIT", 1]]
D, [2022-07-10T03:07:43.911452 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.5ms)  SELECT "items".* FROM "items" WHERE "items"."feed_id" = ? ORDER BY coalesce(items.updated,items.published,'1970-01-01') desc LIMIT ?  [["feed_id", 1], ["LIMIT", 1]]
[debug] *** dump feed_attribs w/ class types:
[debug]   format: >atom< : String
[debug]   updated: >2022-07-09 18:40:19 UTC< : Time
[debug]   published: >< : NilClass
[debug]   summary: >Recent Posts< : String
[debug]   generator: >< : NilClass
[debug]   auto_title: >Dustycloud Brainstorms< : String
[debug]   auto_url: >dustycloud.org< : String
[debug]   auto_feed_url: >dustycloud.org//blog/index.xml< : String
D, [2022-07-10T03:07:43.914077 #3248059] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction
D, [2022-07-10T03:07:43.916103 #3248059] DEBUG -- :   Pluto::Model::Feed Update (1.6ms)  UPDATE "feeds" SET "format" = ?, "auto_title" = ?, "auto_url" = ?, "auto_feed_url" = ?, "summary" = ?, "updated" = ?, "items_last_updated" = ?, "updated_at" = ? WHERE "feeds"."id" = ?  [["format", "atom"], ["auto_title", "Dustycloud Brainstorms"], ["auto_url", "dustycloud.org"], ["auto_feed_url", "dustycloud.org//blog/index.xml"], ["summary", "Recent Posts"], ["updated", "2022-07-09 18:40:19"], ["items_last_updated", "2022-07-09 11:26:00"], ["updated_at", "2022-07-10 07:07:43.913286"], ["id", 1]]
D, [2022-07-10T03:07:43.930455 #3248059] DEBUG -- :   TRANSACTION (13.8ms)  commit transaction
[debug] manifest=planetid
[debug] Checking >*/*.txt<
[debug]   Found manifest candidate >companies/companies.txt<
[debug]   Adding match >companies/companies.txt<
[debug]   Found manifest candidate >notes/external.txt<
[debug]   Adding match >notes/external.txt<
[debug]   Found manifest candidate >orgsfeed/orgsfeed.txt<
[debug]   Adding match >orgsfeed/orgsfeed.txt<
[debug]   Found manifest candidate >planetid/planetid.txt<
[debug]   Adding match >planetid/planetid.txt<
[debug]   Found manifest candidate >media/media.txt<
[debug]   Adding match >media/media.txt<
[debug]   Found manifest candidate >web3/web3.txt<
[debug]   Adding match >web3/web3.txt<
[debug] Checking >node_modules/*/*.txt<
[debug] Checking >/home/lovelace/.pluto/*/*.txt<
D, [2022-07-10T03:07:43.931928 #3248059] DEBUG -- :   Pluto::Model::Site Load (0.2ms)  SELECT "sites".* FROM "sites" WHERE "sites"."key" = ? LIMIT ?  [["key", "try"], ["LIMIT", 1]]
[info] Merging template pack 'planetid'
[info]   Loading template manifest planetid/planetid.txt...
[debug] line 3: index.html        index.html.erb
[debug] line 4: overview.html     overview.html.erb
[debug] line 6: css/planetid.overview.css
[debug] line 7: css/planetid.css
[debug] line 8: css/font-awesome.css
[debug] line 10: i/feed-icon-10x10.png
[debug] line 11: i/view-headlines.png
[debug] line 12: i/view-snippets.png
[debug] line 13: i/view-standard.png
[debug] line 15: js/jquery-2.0.3.min.js
[debug] line 16: js/planetid.js
[debug] line 18: font/fontawesome-webfont.eot
[debug] line 19: font/fontawesome-webfont.svg
[debug] line 20: font/fontawesome-webfont.ttf
[debug] line 21: font/fontawesome-webfont.woff
[debug] line 22: font/FontAwesome.otf
[debug] templatesdir=planetid
[debug]   path[1]=>planetid/index.html.erb<
[debug]   path[1]=>planetid/overview.html.erb<
[debug]   path[1]=>planetid/css/planetid.overview.css<
[debug]   path[1]=>planetid/css/planetid.css<
[debug]   path[1]=>planetid/css/font-awesome.css<
[debug]   path[1]=>planetid/i/feed-icon-10x10.png<
[debug]   path[1]=>planetid/i/view-headlines.png<
[debug]   path[1]=>planetid/i/view-snippets.png<
[debug]   path[1]=>planetid/i/view-standard.png<
[debug]   path[1]=>planetid/js/jquery-2.0.3.min.js<
[debug]   path[1]=>planetid/js/planetid.js<
[debug]   path[1]=>planetid/font/fontawesome-webfont.eot<
[debug]   path[1]=>planetid/font/fontawesome-webfont.svg<
[debug]   path[1]=>planetid/font/fontawesome-webfont.ttf<
[debug]   path[1]=>planetid/font/fontawesome-webfont.woff<
[debug]   path[1]=>planetid/font/FontAwesome.otf<
[debug] destfull=>/home/lovelace/jamstack/identosphere/planetid/try/index.html<
[debug] destpath=>/home/lovelace/jamstack/identosphere/planetid/try<
[info]   Merging to index.html...
[info]   Loading template (from file) >planetid/index.html.erb<...
D, [2022-07-10T03:07:44.023277 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.3ms)  SELECT "feeds".* FROM "feeds" INNER JOIN "subscriptions" ON "feeds"."id" = "subscriptions"."feed_id" WHERE "subscriptions"."site_id" = ?  [["site_id", 1]]
D, [2022-07-10T03:07:44.028815 #3248059] DEBUG -- :   Pluto::Model::Item Load (1.0ms)  SELECT "items".* FROM "items" INNER JOIN "feeds" ON "items"."feed_id" = "feeds"."id" INNER JOIN "subscriptions" ON "feeds"."id" = "subscriptions"."feed_id" WHERE "subscriptions"."site_id" = ? ORDER BY coalesce(items.updated,items.published,'1970-01-01') desc LIMIT ?  [["site_id", 1], ["LIMIT", 250]]
D, [2022-07-10T03:07:44.031110 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.5ms)  SELECT "feeds".* FROM "feeds" WHERE "feeds"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
D, [2022-07-10T03:07:44.070504 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.6ms)  SELECT "feeds".* FROM "feeds" WHERE "feeds"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
D, [2022-07-10T03:07:44.098515 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.3ms)  SELECT "feeds".* FROM "feeds" WHERE "feeds"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
D, [2022-07-10T03:07:44.189943 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.3ms)  SELECT "feeds".* FROM "feeds" WHERE "feeds"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
D, [2022-07-10T03:07:44.198811 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.4ms)  SELECT "feeds".* FROM "feeds" WHERE "feeds"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
D, [2022-07-10T03:07:44.215961 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.5ms)  SELECT "feeds".* FROM "feeds" WHERE "feeds"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
D, [2022-07-10T03:07:44.230406 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.5ms)  SELECT "feeds".* FROM "feeds" WHERE "feeds"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
D, [2022-07-10T03:07:44.238240 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.7ms)  SELECT "feeds".* FROM "feeds" WHERE "feeds"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
D, [2022-07-10T03:07:44.254211 #3248059] DEBUG -- :   Pluto::Model::Feed Load (1.0ms)  SELECT "feeds".* FROM "feeds" WHERE "feeds"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
D, [2022-07-10T03:07:44.261093 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.5ms)  SELECT "feeds".* FROM "feeds" WHERE "feeds"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
D, [2022-07-10T03:07:44.267391 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.5ms)  SELECT "feeds".* FROM "feeds" WHERE "feeds"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
D, [2022-07-10T03:07:44.302730 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.9ms)  SELECT "feeds".* FROM "feeds" WHERE "feeds"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
D, [2022-07-10T03:07:44.313982 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.4ms)  SELECT "feeds".* FROM "feeds" WHERE "feeds"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
D, [2022-07-10T03:07:44.323145 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.7ms)  SELECT "feeds".* FROM "feeds" WHERE "feeds"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
D, [2022-07-10T03:07:44.343317 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.4ms)  SELECT "feeds".* FROM "feeds" WHERE "feeds"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
D, [2022-07-10T03:07:44.350299 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.4ms)  SELECT "feeds".* FROM "feeds" WHERE "feeds"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
D, [2022-07-10T03:07:44.356630 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.4ms)  SELECT "feeds".* FROM "feeds" WHERE "feeds"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
D, [2022-07-10T03:07:44.426667 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.7ms)  SELECT "feeds".* FROM "feeds" WHERE "feeds"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
D, [2022-07-10T03:07:44.431522 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.3ms)  SELECT "feeds".* FROM "feeds" WHERE "feeds"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
D, [2022-07-10T03:07:44.464165 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.4ms)  SELECT "feeds".* FROM "feeds" WHERE "feeds"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
[debug] destfull=>/home/lovelace/jamstack/identosphere/planetid/try/overview.html<
[debug] destpath=>/home/lovelace/jamstack/identosphere/planetid/try<
[info]   Merging to overview.html...
[info]   Loading template (from file) >planetid/overview.html.erb<...
D, [2022-07-10T03:07:44.491356 #3248059] DEBUG -- :   Pluto::Model::Feed Load (0.9ms)  SELECT "feeds".* FROM "feeds" INNER JOIN "subscriptions" ON "feeds"."id" = "subscriptions"."feed_id" WHERE "subscriptions"."site_id" = ? ORDER BY coalesce(feeds.items_last_updated,'1970-01-01') desc  [["site_id", 1]]
D, [2022-07-10T03:07:44.493177 #3248059] DEBUG -- :   Pluto::Model::Item Load (0.5ms)  SELECT "items".* FROM "items" WHERE "items"."feed_id" = ? ORDER BY coalesce(items.updated,items.published,'1970-01-01') desc LIMIT ?  [["feed_id", 1], ["LIMIT", 4]]
[debug] destfull=>/home/lovelace/jamstack/identosphere/planetid/try/css/planetid.overview.css<
[debug] destpath=>/home/lovelace/jamstack/identosphere/planetid/try/css<
[info]   Copying to css/planetid.overview.css from planetid/css/planetid.overview.css...
[debug] destfull=>/home/lovelace/jamstack/identosphere/planetid/try/css/planetid.css<
[debug] destpath=>/home/lovelace/jamstack/identosphere/planetid/try/css<
[info]   Copying to css/planetid.css from planetid/css/planetid.css...
[debug] destfull=>/home/lovelace/jamstack/identosphere/planetid/try/css/font-awesome.css<
[debug] destpath=>/home/lovelace/jamstack/identosphere/planetid/try/css<
[info]   Copying to css/font-awesome.css from planetid/css/font-awesome.css...
[debug] destfull=>/home/lovelace/jamstack/identosphere/planetid/try/i/feed-icon-10x10.png<
[debug] destpath=>/home/lovelace/jamstack/identosphere/planetid/try/i<
[info]   Copying to i/feed-icon-10x10.png from planetid/i/feed-icon-10x10.png...
[debug] destfull=>/home/lovelace/jamstack/identosphere/planetid/try/i/view-headlines.png<
[debug] destpath=>/home/lovelace/jamstack/identosphere/planetid/try/i<
[info]   Copying to i/view-headlines.png from planetid/i/view-headlines.png...
[debug] destfull=>/home/lovelace/jamstack/identosphere/planetid/try/i/view-snippets.png<
[debug] destpath=>/home/lovelace/jamstack/identosphere/planetid/try/i<
[info]   Copying to i/view-snippets.png from planetid/i/view-snippets.png...
[debug] destfull=>/home/lovelace/jamstack/identosphere/planetid/try/i/view-standard.png<
[debug] destpath=>/home/lovelace/jamstack/identosphere/planetid/try/i<
[info]   Copying to i/view-standard.png from planetid/i/view-standard.png...
[debug] destfull=>/home/lovelace/jamstack/identosphere/planetid/try/js/jquery-2.0.3.min.js<
[debug] destpath=>/home/lovelace/jamstack/identosphere/planetid/try/js<
[info]   Copying to js/jquery-2.0.3.min.js from planetid/js/jquery-2.0.3.min.js...
[debug] destfull=>/home/lovelace/jamstack/identosphere/planetid/try/js/planetid.js<
[debug] destpath=>/home/lovelace/jamstack/identosphere/planetid/try/js<
[info]   Copying to js/planetid.js from planetid/js/planetid.js...
[debug] destfull=>/home/lovelace/jamstack/identosphere/planetid/try/font/fontawesome-webfont.eot<
[debug] destpath=>/home/lovelace/jamstack/identosphere/planetid/try/font<
[info]   Copying to font/fontawesome-webfont.eot from planetid/font/fontawesome-webfont.eot...
[debug] destfull=>/home/lovelace/jamstack/identosphere/planetid/try/font/fontawesome-webfont.svg<
[debug] destpath=>/home/lovelace/jamstack/identosphere/planetid/try/font<
[info]   Copying to font/fontawesome-webfont.svg from planetid/font/fontawesome-webfont.svg...
[debug] destfull=>/home/lovelace/jamstack/identosphere/planetid/try/font/fontawesome-webfont.ttf<
[debug] destpath=>/home/lovelace/jamstack/identosphere/planetid/try/font<
[info]   Copying to font/fontawesome-webfont.ttf from planetid/font/fontawesome-webfont.ttf...
[debug] destfull=>/home/lovelace/jamstack/identosphere/planetid/try/font/fontawesome-webfont.woff<
[debug] destpath=>/home/lovelace/jamstack/identosphere/planetid/try/font<
[info]   Copying to font/fontawesome-webfont.woff from planetid/font/fontawesome-webfont.woff...
[debug] destfull=>/home/lovelace/jamstack/identosphere/planetid/try/font/FontAwesome.otf<
[debug] destpath=>/home/lovelace/jamstack/identosphere/planetid/try/font<
[info]   Copying to font/FontAwesome.otf from planetid/font/FontAwesome.otf...
[info] Done (in 0.569883541 s).
Done.
[debug]    executed command build
